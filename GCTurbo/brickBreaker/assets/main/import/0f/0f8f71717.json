[
  1,
  [
    "ecpdLyjvZBwrvm+cedCcQy",
    "e97GVMl6JHh5Ml5qEDdSGa",
    "6ckW52yqRPDIW15VZZ427I",
    "29FYIk+N1GYaeWH/q1NxQO",
    "4d+5bbohpJaJvkr/WUr7rq",
    "eaI6BWS9pEBo7khmPa4QEP",
    "f0BIwQ8D5Ml7nTNQbh1YlS",
    "a2MjXRFdtLlYQ5ouAFv/+R",
    "45SnPV/wBMFLdwilIcPUPL",
    "abTCp2LU1KhrQNzcg1oYMC",
    "c6KC7ivzxH8ax2/MMuudLf",
    "c4emyPXchJ57XDGca6duWE",
    "0drBlyWG5OAJ4oyDh3OuPq",
    "64+qA7tglOvLLn5xXl5zjN",
    "f6Xb7UQ2pE35WopfCsNJvD",
    "8eVso434BPXbkePT2WaIkf",
    "a07+fT4ntN8pNdo3zm5Mqb",
    "c7GWzUlUlAA4SwvJ05roAZ",
    "25Rk96b3FK5JwSM1edQjLr",
    "91BF2vBahKIYueKQOrjkhS",
    "71VhFCTINJM6/Ky3oX9nBT",
    "32y2a4xeZDybbURUjOetiE",
    "43L6CczwNM/6GGmCYEQIoH",
    "46bU+b5fROqIXVPG6aZWWK",
    "4fL1T5kwxEjrf9rSvQHvzi",
    "f3vTApxQ5Pv6V0Ev8iPsar",
    "4eG5ODZuBCp4cbAZ9Ywfgk",
    "0a9sfGUbxICbxfLq8uQAST",
    "6aLYkjw95Fv5Um/uEexFhU",
    "2fPthfCn5G8J2AKoWBRkdR",
    "440fH7/CxHpY5IoQ+5prW7",
    "1d2uunKUxKy49FpUjKxC/f",
    "29/XcrlvROh5LrUZoK8Oy5",
    "18ACjX9tNOKKrW41uULV7C",
    "f3vg8ygC1L7qHhVDnL2ih3",
    "f4kfLZtEBJerVwcp9aNbWU",
    "bf9XljBIpL5p4761Yi6BYW",
    "40kfIgG9ZL8by13PXDeFlu",
    "63qJ8YcglKb4Pt6zQX7p4w",
    "5act8IJlBOzKhoLYr3CQMx",
    "5crNwlwxtJb7jOFM/r9mxZ",
    "50VTP9WKZM4L9zQQX4CXcs",
    "cc4iA1GMBBer/VrBdJvehC",
    "f75RuDqI9BqaUtogIFAznx",
    "1d0POVh4JMOrBiFFWtKh6X",
    "66fK8FoA9ExIrYpf3HKROu",
    "20INO+quNBG5rVg2ELb+pr",
    "07FDVLdQRJy6oiEbg5V+W/",
    "09hGU8MitM07D/ctvp1psl",
    "8dsdRKHMdAbr+UoCr+r6lx",
    "f9+ZCVa+ZIkb0dYzqQet6h",
    "8bD7rRm+hLb6uJzoyday65",
    "55Q9n3DtVCJJP1JRgrqCAa",
    "1cRM4L4EZDmIHrnl6iO6iE",
    "71BTEWROZMf7ruE9g6dKpG",
    "4fvJD9JoZMOrVlbkyOz4cy",
    "05uZdhrBBHGIgHcHD+zcQu",
    "95286PmP1BjqKQ2H66v9RU",
    "e02+TUl15CUL2CwLz0fanP",
    "48TLb2Zi1IXofAxE20cP9V",
    "eeeQkErCFC9IdM25+GzNBC",
    "f8v4dwtQhO25yv6zMFuZ1y",
    "df2o27K/RLU4wfsVLDwAbR",
    "f59w4xTiBEurIbefagoTyz",
    "acirIGcVdP/KCWOCqZZ0W7",
    "0cqynuGwNHBYKEsrKRIRaE",
    "a3MtNi8zZL5LBEm+Fa2gTw",
    "edvZ1n4qtL6IC4WvsGNhYm",
    "3b8dirsG1OCKRWl31y6awL",
    "60AwGqM1dKELCGhPAR+jK6",
    "82migssElAGb04Ws6NimQX",
    "86lWSFNldLxKkC2JjCDJgu",
    "bf+/N4dqNILY9rVZBS9HBW",
    "7cYn/1BIZMnaNNG7S/HNpY",
    "b3LmdnmL9A070jwS2QVxPM",
    "2f52GhHYVBSJ23ET2Koudv",
    "c9J8xF42dOdLl2qTGcJdhI",
    "bbUA373mdOdaW99CPcL9Ib",
    "89xfu4IT5Etauo0nx2FL1B",
    "899xw+chhNn5/nOWn9krNA",
    "26alJ1Cr5E/oiSZJAv6mnq",
    "54qctmOyhBsaneJzIXTSVW",
    "17/psUpztBDoK284zdEABX",
    "118Pxu9AZL659tuf/OtLbv",
    "b1AFHnHzxJ4a0dQae1EsVG",
    "90K48sq5dB77+pNJR12J08",
    "02delMVqdBD70a/HSD99FK",
    "69tZzpUdhFlZx2L+bFITlM",
    "16JeGi3hhE/LsDL0vuwcqm",
    "c1Pc3XULJHeKPEuvs+u0Gp",
    "92rwtttpdJ1azDy1Wptd1p",
    "b4P/PCArtIdIH38t6mlw8Y",
    "47VQafedhHRL1IzWFl4mZl",
    "7eak+ZihFAwqvX2Y32WvX9",
    "9e3pQyJEVFtKZZMMFbKuNd",
    "2c3g0FtEZH87a2YeDX+pEf",
    "79s5JKhfFOO4zc/PrVBiLK",
    "7eNB52CRlHQ5mBGGdyRxzF",
    "56aqyfUTRNoZeDZe5b2aZd",
    "a3b8WjAwFIeaTf7oJK3HPs",
    "14c/TR7WZNUK3slOgD3NDa",
    "a47fis4L9NeI+zwP5dsw1j",
    "7aG8s7T11DY5bnbAGuqDR1",
    "73FIluljdK47CLU1m+BU6g",
    "e8Ueib+qJEhL6mXAHdnwbi",
    "c6xqH9LHVPN6Bd8yQk5yNx"
  ],
  [
    "node",
    "_spriteFrame",
    "_textureSetter",
    "root",
    "_N$file",
    "_parent",
    "_N$target",
    "_N$pressedSprite",
    "_N$hoverSprite",
    "_N$disabledSprite",
    "clickSound",
    "_N$normalSprite",
    "_target",
    "canvas",
    "bgNode",
    "loading",
    "pausePanel",
    "overPanel",
    "brickLayout",
    "paddle",
    "ball",
    "gameView",
    "scene",
    "_defaultClip",
    "brickHitSound",
    "brickBreakSound",
    "winSound",
    "loseSound",
    "bgmAudioClip",
    "brickPrefab",
    "mainTexture",
    "_effectAsset",
    "collider",
    "brickSprite",
    "brickNode",
    "data"
  ],
  [
    "cc.SpriteFrame",
    [
      "cc.Node",
      [
        "_name",
        "_objFlags",
        "_active",
        "_opacity",
        "_is3DNode",
        "_components",
        "_contentSize",
        "_parent",
        "_trs",
        "_prefab",
        "_children",
        "_anchorPoint",
        "_color",
        "_eulerAngles"
      ],
      -2,
      9,
      5,
      1,
      7,
      4,
      2,
      5,
      5,
      5
    ],
    [
      "cc.Widget",
      [
        "_alignFlags",
        "_originalWidth",
        "_top",
        "_bottom",
        "_originalHeight",
        "alignMode",
        "_left",
        "_right",
        "node",
        "_target"
      ],
      -5,
      1,
      1
    ],
    [
      "cc.Node",
      [
        "_name",
        "_active",
        "_id",
        "_objFlags",
        "_components",
        "_contentSize",
        "_trs",
        "_children",
        "_parent",
        "_anchorPoint",
        "_prefab"
      ],
      -1,
      12,
      5,
      7,
      2,
      1,
      5,
      4
    ],
    [
      "cc.Sprite",
      [
        "_sizeMode",
        "_type",
        "_isTrimmedMode",
        "_enabled",
        "node",
        "_materials",
        "_spriteFrame"
      ],
      -1,
      1,
      3,
      6
    ],
    [
      "cc.Label",
      [
        "_string",
        "_fontSize",
        "_styleFlags",
        "_N$verticalAlign",
        "_isSystemFontUsed",
        "_N$horizontalAlign",
        "_lineHeight",
        "node",
        "_materials",
        "_N$file"
      ],
      -4,
      1,
      3,
      6
    ],
    [
      "cc.CurveRange",
      [
        "constant",
        "mode",
        "multiplier",
        "curve"
      ],
      0,
      4
    ],
    [
      "cc.PrefabInfo",
      [
        "fileId",
        "root"
      ],
      2,
      1
    ],
    [
      "cc.Button",
      [
        "_N$transition",
        "node",
        "clickEvents",
        "_N$pressedColor",
        "_N$disabledColor",
        "_N$target",
        "_N$pressedSprite",
        "_N$hoverSprite",
        "_N$disabledSprite",
        "_N$normalColor",
        "_N$normalSprite"
      ],
      2,
      1,
      9,
      5,
      5,
      1,
      6,
      6,
      6,
      5,
      6
    ],
    [
      "cc.Layout",
      [
        "_resize",
        "_N$layoutType",
        "_N$spacingX",
        "_enabled",
        "_N$paddingLeft",
        "_N$paddingRight",
        "_N$paddingTop",
        "_N$paddingBottom",
        "_N$spacingY",
        "node",
        "_layoutSize",
        "_N$cellSize"
      ],
      -6,
      1,
      5,
      5
    ],
    [
      "cc.RigidBody",
      [
        "_type",
        "_gravityScale",
        "enabledContactListener",
        "node"
      ],
      0,
      1
    ],
    [
      "cc.PhysicsBoxCollider",
      [
        "tag",
        "node",
        "_size",
        "_offset"
      ],
      2,
      1,
      5,
      5
    ],
    [
      "cc.Keyframe",
      [
        "inTangent",
        "outTangent",
        "value",
        "time"
      ],
      -1
    ],
    [
      "cc.JsonAsset",
      [
        "_name",
        "json"
      ],
      1
    ],
    [
      "cc.AudioClip",
      [
        "_name",
        "_native",
        "duration"
      ],
      0
    ],
    [
      "cc.SceneAsset",
      [
        "_name",
        "asyncLoadAssets"
      ],
      1
    ],
    [
      "cc.Node",
      [
        "_name",
        "_parent",
        "_components",
        "_contentSize",
        "_anchorPoint",
        "_trs"
      ],
      2,
      1,
      2,
      5,
      5,
      7
    ],
    [
      "cc.BlockInputEvents",
      [
        "node"
      ],
      3,
      1
    ],
    [
      "cc.Canvas",
      [
        "node",
        "_designResolution"
      ],
      3,
      1,
      5
    ],
    [
      "a337308uxxJva7vh8G06q7Z",
      [
        "node",
        "gameView",
        "ball",
        "paddle",
        "brickLayout",
        "overPanel",
        "pausePanel",
        "levelConfig",
        "loading",
        "physicsNode",
        "bgNode",
        "canvas",
        "brickHitSound",
        "brickBreakSound",
        "winSound",
        "loseSound",
        "clickSound",
        "bgmAudioClip"
      ],
      3,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      3,
      1,
      1,
      1,
      1,
      6,
      6,
      6,
      6,
      6,
      6
    ],
    [
      "cc.ClickEvent",
      [
        "_componentId",
        "handler",
        "target"
      ],
      1,
      1
    ],
    [
      "cc.PhysicsCircleCollider",
      [
        "_friction",
        "_restitution",
        "_radius",
        "node"
      ],
      0,
      1
    ],
    [
      "cc.LabelOutline",
      [
        "node",
        "_color"
      ],
      3,
      1,
      5
    ],
    [
      "cc.Animation",
      [
        "playOnLoad",
        "node",
        "_clips",
        "_defaultClip"
      ],
      2,
      1,
      3,
      6
    ],
    [
      "cc.Scene",
      [
        "_name",
        "_active",
        "_children",
        "_anchorPoint",
        "_trs"
      ],
      1,
      2,
      5,
      7
    ],
    [
      "cc.Camera",
      [
        "_clearFlags",
        "_depth",
        "node"
      ],
      1,
      1
    ],
    [
      "62398FSMJtHJ55jmSoqf4WF",
      [
        "padding",
        "spacing",
        "cols",
        "node"
      ],
      0,
      1
    ],
    [
      "cc.ParticleSystem3D",
      [
        "duration",
        "_capacity",
        "_simulationSpace",
        "node",
        "_materials",
        "startDelay",
        "startLifetime",
        "startColor",
        "startSize",
        "startSpeed",
        "startRotation",
        "gravityModifier",
        "rateOverTime",
        "rateOverDistance",
        "_shapeModule"
      ],
      0,
      1,
      3,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4,
      4
    ],
    [
      "cc.GradientRange",
      [],
      3
    ],
    [
      "cc.AnimationCurve",
      [
        "keyFrames"
      ],
      3,
      9
    ],
    [
      "cc.ShapeModule",
      [
        "enable",
        "_shapeType",
        "emitFrom",
        "arcSpeed"
      ],
      0,
      4
    ],
    [
      "9b280YbFuZJv4QPGPL8e8iv",
      [
        "node",
        "rigidbody"
      ],
      3,
      1,
      1
    ],
    [
      "4dc82c1qO9KbZBsMZGbHlMV",
      [
        "speed",
        "node"
      ],
      2,
      1
    ],
    [
      "60425zRIQ5LNIZ6KmZ5p/LN",
      [
        "node",
        "replayBtn",
        "nextBtn",
        "scoreLabel",
        "highestScoreLabel",
        "gameOverPanel",
        "gameWinPanel"
      ],
      3,
      1,
      1,
      1,
      1,
      1,
      1,
      1
    ],
    [
      "b8352WVqZtHF6g5r3IjErdI",
      [
        "node",
        "loading"
      ],
      3,
      1,
      1
    ],
    [
      "e4735UW3lFPMoW0rK22obsG",
      [
        "node",
        "scoreLabel",
        "levelabel"
      ],
      3,
      1,
      1,
      1
    ],
    [
      "cc.Material",
      [
        "_name",
        "_techniqueData"
      ],
      2,
      11
    ],
    [
      "cc.EffectAsset",
      [
        "_name",
        "shaders",
        "techniques"
      ],
      0
    ],
    [
      "cc.Prefab",
      [
        "_name"
      ],
      2
    ],
    [
      "446b9MwGVhLTYvIS/KH+BcI",
      [
        "node",
        "brickNode",
        "brickSprite",
        "brickTextures",
        "brickType0Textures",
        "brickType1Textures",
        "brickType2Textures",
        "brickType3Textures",
        "collider"
      ],
      3,
      1,
      1,
      1,
      3,
      3,
      3,
      3,
      3,
      1
    ]
  ],
  [
    [
      13,
      0,
      1,
      3
    ],
    [
      4,
      0,
      4,
      5,
      6,
      2
    ],
    [
      1,
      0,
      7,
      5,
      6,
      8,
      2
    ],
    [
      4,
      1,
      0,
      4,
      5,
      6,
      3
    ],
    [
      7,
      1,
      1
    ],
    [
      20,
      0,
      1,
      2,
      3
    ],
    [
      22,
      0,
      1,
      1
    ],
    [
      1,
      0,
      7,
      5,
      9,
      6,
      8,
      2
    ],
    [
      8,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      2
    ],
    [
      10,
      0,
      3,
      2
    ],
    [
      5,
      0,
      1,
      4,
      2,
      5,
      3,
      7,
      8,
      9,
      7
    ],
    [
      14,
      0,
      1,
      2,
      4
    ],
    [
      2,
      0,
      8,
      2
    ],
    [
      6,
      1
    ],
    [
      1,
      0,
      10,
      5,
      6,
      8,
      2
    ],
    [
      1,
      0,
      7,
      10,
      5,
      6,
      8,
      2
    ],
    [
      2,
      0,
      1,
      4,
      8,
      4
    ],
    [
      2,
      0,
      3,
      1,
      8,
      4
    ],
    [
      7,
      0,
      1,
      2
    ],
    [
      11,
      0,
      1,
      2,
      2
    ],
    [
      3,
      0,
      8,
      4,
      5,
      6,
      2
    ],
    [
      1,
      0,
      7,
      5,
      8,
      2
    ],
    [
      17,
      0,
      1
    ],
    [
      2,
      0,
      7,
      8,
      3
    ],
    [
      6,
      0,
      2
    ],
    [
      3,
      0,
      8,
      4,
      5,
      9,
      6,
      2
    ],
    [
      1,
      0,
      7,
      10,
      5,
      6,
      2
    ],
    [
      1,
      0,
      1,
      7,
      10,
      5,
      9,
      6,
      8,
      3
    ],
    [
      1,
      0,
      7,
      5,
      6,
      2
    ],
    [
      1,
      0,
      1,
      7,
      5,
      9,
      6,
      8,
      3
    ],
    [
      1,
      0,
      7,
      5,
      6,
      11,
      8,
      2
    ],
    [
      4,
      4,
      5,
      6,
      1
    ],
    [
      2,
      5,
      0,
      1,
      4,
      8,
      5
    ],
    [
      2,
      0,
      6,
      8,
      3
    ],
    [
      8,
      0,
      1,
      2,
      9,
      3,
      4,
      5,
      10,
      6,
      7,
      8,
      2
    ],
    [
      11,
      0,
      1,
      3,
      2,
      2
    ],
    [
      5,
      0,
      1,
      6,
      4,
      2,
      5,
      3,
      7,
      8,
      9,
      8
    ],
    [
      5,
      0,
      1,
      4,
      2,
      3,
      7,
      8,
      6
    ],
    [
      5,
      0,
      1,
      6,
      2,
      5,
      3,
      7,
      8,
      7
    ],
    [
      15,
      0,
      1,
      3
    ],
    [
      3,
      0,
      1,
      7,
      4,
      5,
      3
    ],
    [
      3,
      0,
      2,
      7,
      4,
      5,
      6,
      3
    ],
    [
      3,
      0,
      3,
      1,
      7,
      4,
      5,
      4
    ],
    [
      3,
      0,
      8,
      7,
      4,
      5,
      6,
      2
    ],
    [
      3,
      0,
      4,
      10,
      5,
      6,
      2
    ],
    [
      1,
      0,
      10,
      5,
      6,
      11,
      8,
      2
    ],
    [
      1,
      0,
      1,
      2,
      10,
      5,
      9,
      6,
      4
    ],
    [
      1,
      0,
      7,
      5,
      9,
      6,
      8,
      13,
      2
    ],
    [
      1,
      0,
      2,
      7,
      5,
      6,
      8,
      3
    ],
    [
      1,
      0,
      3,
      7,
      5,
      12,
      6,
      3
    ],
    [
      1,
      0,
      7,
      5,
      9,
      6,
      2
    ],
    [
      1,
      0,
      4,
      7,
      5,
      8,
      3
    ],
    [
      1,
      0,
      3,
      7,
      5,
      9,
      12,
      6,
      3
    ],
    [
      16,
      0,
      1,
      2,
      3,
      4,
      5,
      2
    ],
    [
      4,
      1,
      0,
      2,
      4,
      5,
      6,
      4
    ],
    [
      4,
      3,
      1,
      0,
      4,
      5,
      6,
      4
    ],
    [
      4,
      0,
      4,
      5,
      2
    ],
    [
      2,
      0,
      2,
      3,
      1,
      8,
      9,
      5
    ],
    [
      2,
      5,
      0,
      6,
      7,
      2,
      3,
      1,
      4,
      8,
      9
    ],
    [
      2,
      0,
      1,
      8,
      3
    ],
    [
      2,
      0,
      2,
      8,
      3
    ],
    [
      2,
      0,
      2,
      1,
      8,
      4
    ],
    [
      18,
      0,
      1,
      1
    ],
    [
      19,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      1
    ],
    [
      21,
      0,
      1,
      2,
      3,
      4
    ],
    [
      9,
      3,
      0,
      1,
      4,
      5,
      6,
      7,
      2,
      8,
      9,
      10,
      11,
      10
    ],
    [
      9,
      0,
      1,
      2,
      9,
      10,
      4
    ],
    [
      10,
      1,
      2,
      3,
      3
    ],
    [
      23,
      0,
      1,
      2,
      3,
      2
    ],
    [
      24,
      0,
      1,
      2,
      3,
      4,
      3
    ],
    [
      25,
      0,
      1,
      2,
      3
    ],
    [
      26,
      0,
      1,
      2,
      3,
      4
    ],
    [
      27,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      4
    ],
    [
      6,
      1,
      2,
      3,
      3
    ],
    [
      28,
      1
    ],
    [
      29,
      0,
      1
    ],
    [
      12,
      2,
      0,
      1,
      4
    ],
    [
      12,
      3,
      0,
      1,
      4
    ],
    [
      30,
      0,
      1,
      2,
      3,
      4
    ],
    [
      31,
      0,
      1,
      1
    ],
    [
      32,
      0,
      1,
      2
    ],
    [
      33,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      1
    ],
    [
      34,
      0,
      1,
      1
    ],
    [
      35,
      0,
      1,
      2,
      1
    ],
    [
      36,
      0,
      1,
      2
    ],
    [
      37,
      0,
      1,
      2,
      4
    ],
    [
      38,
      0,
      2
    ],
    [
      39,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      1
    ]
  ],
  [
    [
      [
        [
          0,
          "level25",
          {
            "0": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "1": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "2": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "3": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "4": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "5": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level16",
          {
            "0": {
              "0": 0,
              "1": 0,
              "2": 2,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 2,
              "7": 0,
              "8": 0
            },
            "1": {
              "0": 0,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 0,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 0
            },
            "2": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "3": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "4": {
              "0": 0,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 0,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 0
            },
            "5": {
              "0": 0,
              "1": 0,
              "2": 2,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 2,
              "7": 0,
              "8": 0
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level17",
          {
            "0": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "1": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "2": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "3": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "4": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "5": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "Score_Text_Japanese",
          "rect": [
            0,
            0,
            96,
            34
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            96,
            34
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        16
      ]
    ],
    [
      [
        [
          11,
          "gameLose",
          ".mp3",
          3.526531
        ],
        -1
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "top",
          "rect": [
            0,
            0,
            900,
            151
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            900,
            151
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        17
      ]
    ],
    [
      [
        {
          "name": "g2",
          "rect": [
            0,
            0,
            86,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        18
      ]
    ],
    [
      [
        [
          0,
          "level2",
          {
            "0": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level22",
          {
            "0": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 3,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 3,
              "4": 2,
              "5": 3,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 2,
              "2": 3,
              "3": 2,
              "4": 1,
              "5": 2,
              "6": 3,
              "7": 2,
              "8": 1
            },
            "4": {
              "0": 2,
              "1": 3,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 3,
              "8": 2
            },
            "5": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 3
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level13",
          {
            "0": {
              "0": 1,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 1
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "loading",
          "rect": [
            0,
            9,
            512,
            494
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            512,
            512
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        19
      ]
    ],
    [
      [
        [
          0,
          "level15",
          {
            "0": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "default_btn_disabled",
          "rect": [
            0,
            0,
            40,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            40,
            40
          ],
          "capInsets": [
            12,
            12,
            12,
            12
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        20
      ]
    ],
    [
      [
        [
          0,
          "level1",
          {
            "0": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "1": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "2": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "5": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "green",
          "rect": [
            0,
            0,
            86,
            38
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            38
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        21
      ]
    ],
    [
      [
        [
          39,
          "game",
          null
        ],
        [
          40,
          "OverPanel",
          false,
          [
            -4,
            -5,
            -6,
            -7,
            -8,
            -9,
            -10,
            -11,
            -12,
            -13,
            -14,
            -15,
            -16
          ],
          [
            [
              -1,
              [
                1,
                0,
                -2,
                [
                  81
                ],
                82
              ],
              [
                22,
                -3
              ]
            ],
            1,
            4,
            4
          ],
          [
            5,
            450,
            600
          ]
        ],
        [
          45,
          "PhysicsLayer",
          [
            -20,
            -21,
            -22,
            -23,
            -24,
            -25,
            -26,
            -27
          ],
          [
            [
              57,
              45,
              2,
              2,
              450,
              -18,
              -17
            ],
            [
              3,
              1,
              0,
              -19,
              [
                10
              ],
              11
            ]
          ],
          [
            5,
            450,
            596
          ],
          [
            0,
            0.5,
            0
          ],
          [
            0,
            -298,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          41,
          "Canvas",
          "9fb39NGcOpF/or/pWJp+gH8",
          [
            -41,
            -42
          ],
          [
            [
              [
                62,
                -28,
                [
                  5,
                  450,
                  600
                ]
              ],
              [
                63,
                -38,
                -37,
                -36,
                -35,
                -34,
                -33,
                -32,
                [
                  114,
                  115,
                  116,
                  117,
                  118,
                  119,
                  120,
                  121,
                  122,
                  123,
                  124,
                  125,
                  126,
                  127,
                  128,
                  129,
                  130,
                  131,
                  132,
                  133,
                  134,
                  135,
                  136,
                  137,
                  138,
                  139,
                  140,
                  141,
                  142,
                  143
                ],
                -31,
                2,
                -30,
                -29,
                144,
                145,
                146,
                147,
                148,
                149
              ],
              -39,
              [
                16,
                45,
                450,
                600,
                -40
              ]
            ],
            4,
            4,
            1,
            4
          ],
          [
            5,
            450,
            600
          ],
          [
            225,
            300,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          42,
          "PausePanel",
          512,
          false,
          [
            -45,
            -46,
            -47,
            -48,
            -49
          ],
          [
            [
              [
                22,
                -43
              ],
              -44
            ],
            4,
            1
          ],
          [
            5,
            450,
            600
          ]
        ],
        [
          14,
          "top",
          [
            -52,
            -53,
            -54,
            -55,
            -56,
            -57,
            -58
          ],
          [
            [
              3,
              1,
              0,
              -50,
              [
                30
              ],
              31
            ],
            [
              58,
              0,
              1,
              -75,
              -75,
              7.447999999999979,
              669.5,
              600,
              81,
              -51
            ]
          ],
          [
            5,
            450,
            55
          ],
          [
            0,
            265.052,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          46,
          "loadingLayer",
          512,
          false,
          [
            -62,
            -63
          ],
          [
            [
              16,
              45,
              100,
              100,
              -60
            ],
            [
              22,
              -61
            ]
          ],
          [
            4,
            -59
          ],
          [
            5,
            450,
            600
          ]
        ],
        [
          26,
          "gameScreen",
          3,
          [
            -65,
            5,
            -66,
            1,
            4,
            6
          ],
          [
            [
              16,
              45,
              450,
              600,
              -64
            ]
          ],
          [
            5,
            450,
            600
          ]
        ],
        [
          14,
          "btn_next",
          [
            -71
          ],
          [
            [
              3,
              1,
              0,
              -67,
              [
                51
              ],
              52
            ],
            [
              8,
              3,
              -69,
              [
                [
                  5,
                  "60425zRIQ5LNIZ6KmZ5p/LN",
                  "onNextLevel",
                  1
                ]
              ],
              [
                4,
                4294967295
              ],
              [
                4,
                4294967295
              ],
              -68,
              53,
              54,
              55
            ],
            [
              23,
              32,
              165,
              -70
            ]
          ],
          [
            5,
            200,
            120
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          14,
          "btn_restart",
          [
            -76
          ],
          [
            [
              3,
              1,
              0,
              -72,
              [
                58
              ],
              59
            ],
            [
              8,
              3,
              -74,
              [
                [
                  5,
                  "60425zRIQ5LNIZ6KmZ5p/LN",
                  "onRestart",
                  1
                ]
              ],
              [
                4,
                4294967295
              ],
              [
                4,
                4294967295
              ],
              -73,
              60,
              61,
              62
            ],
            [
              12,
              32,
              -75
            ]
          ],
          [
            5,
            200,
            120
          ],
          [
            165,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          43,
          "ball",
          2,
          [
            -81
          ],
          [
            [
              [
                1,
                0,
                -77,
                [
                  4
                ],
                5
              ],
              -78,
              [
                64,
                0,
                1,
                13.700000000000006,
                -79
              ],
              -80
            ],
            4,
            1,
            4,
            1
          ],
          [
            5,
            25,
            25
          ],
          [
            0,
            50,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          27,
          "pauseBtn",
          512,
          5,
          [
            -86
          ],
          [
            [
              34,
              3,
              -84,
              [
                [
                  5,
                  "a337308uxxJva7vh8G06q7Z",
                  "onPause",
                  3
                ]
              ],
              [
                4,
                4293322470
              ],
              [
                4,
                4291348680
              ],
              [
                4,
                3363338360
              ],
              -83,
              26,
              27,
              28,
              29
            ],
            [
              23,
              32,
              15.455999999999989,
              -85
            ]
          ],
          [
            4,
            -82
          ],
          [
            5,
            34,
            34
          ],
          [
            192.544,
            2.17,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          27,
          "pauseBtn copy",
          512,
          7,
          [
            -91
          ],
          [
            [
              34,
              3,
              -89,
              [
                [
                  5,
                  "a337308uxxJva7vh8G06q7Z",
                  "onPause",
                  3
                ]
              ],
              [
                4,
                4293322470
              ],
              [
                4,
                4291348680
              ],
              [
                4,
                3363338360
              ],
              -88,
              34,
              35,
              36,
              37
            ],
            [
              23,
              32,
              15.455999999999989,
              -90
            ]
          ],
          [
            4,
            -87
          ],
          [
            5,
            34,
            34
          ],
          [
            192.544,
            267.222,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          14,
          "btn_backSelectLevel",
          [
            -96
          ],
          [
            [
              3,
              1,
              0,
              -92,
              [
                44
              ],
              45
            ],
            [
              8,
              3,
              -94,
              [
                [
                  5,
                  "60425zRIQ5LNIZ6KmZ5p/LN",
                  "onChangeStage",
                  1
                ]
              ],
              [
                4,
                4294967295
              ],
              [
                4,
                4294967295
              ],
              -93,
              46,
              47,
              48
            ],
            [
              12,
              8,
              -95
            ]
          ],
          [
            5,
            200,
            120
          ],
          [
            -165,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          26,
          "bgNode",
          7,
          [
            2
          ],
          [
            [
              54,
              1,
              0,
              false,
              -97,
              [
                12
              ],
              13
            ]
          ],
          [
            5,
            450,
            600
          ]
        ],
        [
          25,
          "brick_layout",
          2,
          [
            [
              [
                55,
                false,
                1,
                0,
                -98,
                [
                  0
                ],
                1
              ],
              -99,
              [
                65,
                false,
                2,
                3,
                2,
                2,
                2,
                2,
                2,
                2,
                -100,
                [
                  5,
                  447.5,
                  168
                ],
                [
                  5,
                  38.5,
                  17
                ]
              ],
              [
                59,
                40,
                447.5,
                -101
              ]
            ],
            4,
            1,
            4,
            4
          ],
          [
            5,
            450,
            168
          ],
          [
            0,
            0,
            1
          ],
          [
            -225,
            492,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          20,
          "paddle",
          2,
          [
            [
              [
                3,
                1,
                0,
                -102,
                [
                  6
                ],
                7
              ],
              [
                9,
                0,
                -103
              ],
              [
                19,
                3,
                -104,
                [
                  5,
                  154,
                  20
                ]
              ],
              -105
            ],
            4,
            4,
            4,
            1
          ],
          [
            5,
            154,
            22
          ],
          [
            0,
            26.299,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          15,
          "btnNode",
          1,
          [
            13,
            8,
            9
          ],
          [
            [
              66,
              1,
              1,
              -35,
              -106,
              [
                5,
                530,
                150
              ]
            ]
          ],
          [
            5,
            530,
            150
          ],
          [
            0,
            -240,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          15,
          "replayBtn",
          4,
          [
            -110
          ],
          [
            [
              3,
              1,
              0,
              -107,
              [
                89
              ],
              90
            ],
            [
              8,
              3,
              -109,
              [
                [
                  5,
                  "b8352WVqZtHF6g5r3IjErdI",
                  "onReplay",
                  4
                ]
              ],
              [
                4,
                4294967295
              ],
              [
                4,
                4294967295
              ],
              -108,
              91,
              92,
              93
            ]
          ],
          [
            5,
            276,
            120
          ],
          [
            0.676,
            97.191,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          15,
          "selectLevelBtn",
          4,
          [
            -114
          ],
          [
            [
              3,
              1,
              0,
              -111,
              [
                96
              ],
              97
            ],
            [
              8,
              3,
              -113,
              [
                [
                  5,
                  "b8352WVqZtHF6g5r3IjErdI",
                  "onChangeStage",
                  4
                ]
              ],
              [
                4,
                4294967295
              ],
              [
                4,
                4294967295
              ],
              -112,
              98,
              99,
              100
            ]
          ],
          [
            5,
            276,
            120
          ],
          [
            0.676,
            -7.818,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          15,
          "resumeBtn",
          4,
          [
            -118
          ],
          [
            [
              3,
              1,
              0,
              -115,
              [
                103
              ],
              104
            ],
            [
              8,
              3,
              -117,
              [
                [
                  5,
                  "b8352WVqZtHF6g5r3IjErdI",
                  "onResume",
                  4
                ],
                [
                  5,
                  "a337308uxxJva7vh8G06q7Z",
                  "onResumeGame",
                  3
                ]
              ],
              [
                4,
                4294967295
              ],
              [
                4,
                4294967295
              ],
              -116,
              105,
              106,
              107
            ]
          ],
          [
            5,
            276,
            120
          ],
          [
            0.676,
            -112.827,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          21,
          "leftwall",
          2,
          [
            [
              9,
              0,
              -119
            ],
            [
              35,
              4,
              -120,
              [
                0,
                0,
                300
              ],
              [
                5,
                10,
                600
              ]
            ],
            [
              12,
              12,
              -121
            ]
          ],
          [
            -225,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          21,
          "rightwall",
          2,
          [
            [
              9,
              0,
              -122
            ],
            [
              35,
              4,
              -123,
              [
                0,
                0,
                300
              ],
              [
                5,
                10,
                600
              ]
            ],
            [
              12,
              36,
              -124
            ]
          ],
          [
            225,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "topwall",
          2,
          [
            [
              9,
              0,
              -125
            ],
            [
              19,
              5,
              -126,
              [
                5,
                450,
                5
              ]
            ],
            [
              60,
              41,
              65,
              -127
            ]
          ],
          [
            5,
            450,
            0
          ],
          [
            0,
            531,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          28,
          "ground",
          2,
          [
            [
              9,
              0,
              -128
            ],
            [
              19,
              2,
              -129,
              [
                5,
                450,
                5
              ]
            ],
            [
              12,
              44,
              -130
            ]
          ],
          [
            5,
            450,
            0
          ]
        ],
        [
          7,
          "line-bot",
          2,
          [
            [
              1,
              0,
              -132,
              [
                8
              ],
              9
            ],
            [
              17,
              44,
              -8,
              900,
              -133
            ]
          ],
          [
            4,
            -131
          ],
          [
            5,
            450,
            19
          ],
          [
            0,
            3.4000000000000004,
            0,
            0,
            0,
            0,
            1,
            1,
            1.2,
            1
          ]
        ],
        [
          7,
          "line-top",
          5,
          [
            [
              1,
              0,
              -135,
              [
                22
              ],
              23
            ],
            [
              17,
              44,
              315.065,
              900,
              -136
            ]
          ],
          [
            4,
            -134
          ],
          [
            5,
            450,
            19
          ],
          [
            0,
            298.965,
            0,
            0,
            0,
            0,
            1,
            1,
            1.2,
            1
          ]
        ],
        [
          29,
          "Background",
          512,
          11,
          [
            [
              3,
              1,
              0,
              -137,
              [
                24
              ],
              25
            ],
            [
              32,
              0,
              45,
              100,
              40,
              -138
            ]
          ],
          [
            18,
            "abL+2GVfJJp4b1MwHgvCtE",
            11
          ],
          [
            5,
            34,
            34
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          29,
          "Background",
          512,
          12,
          [
            [
              3,
              1,
              0,
              -139,
              [
                32
              ],
              33
            ],
            [
              32,
              0,
              45,
              100,
              40,
              -140
            ]
          ],
          [
            18,
            "abL+2GVfJJp4b1MwHgvCtE",
            12
          ],
          [
            5,
            34,
            34
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            0
          ]
        ],
        [
          7,
          "line-top copy",
          1,
          [
            [
              1,
              0,
              -142,
              [
                69
              ],
              70
            ],
            [
              17,
              44,
              580.117,
              900,
              -143
            ]
          ],
          [
            4,
            -141
          ],
          [
            5,
            450,
            19
          ],
          [
            0,
            291.51699999999994,
            0,
            0,
            0,
            0,
            1,
            1,
            1.2,
            1
          ]
        ],
        [
          7,
          "line-top copy",
          1,
          [
            [
              1,
              0,
              -145,
              [
                71
              ],
              72
            ],
            [
              17,
              44,
              -8.378000000000014,
              900,
              -146
            ]
          ],
          [
            4,
            -144
          ],
          [
            5,
            450,
            19
          ],
          [
            0,
            -296.97800000000007,
            0,
            0,
            0,
            0,
            1,
            1,
            1.2,
            1
          ]
        ],
        [
          25,
          "scoreValue copy",
          5,
          [
            [
              -147,
              [
                33,
                8,
                77.71199999999999,
                -148
              ]
            ],
            1,
            4
          ],
          [
            5,
            23.85,
            50.4
          ],
          [
            0,
            0,
            0.5
          ],
          [
            -147.288,
            0.735,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          30,
          "scoreLabel copy",
          5,
          [
            [
              36,
              "レベル",
              18,
              18,
              false,
              1,
              2,
              1,
              -149,
              [
                18
              ],
              19
            ],
            [
              33,
              8,
              14.086000000000013,
              -150
            ]
          ],
          [
            5,
            54,
            22.68
          ],
          [
            0,
            1,
            0.5
          ],
          [
            -156.914,
            2.418,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          7,
          "line2-top",
          5,
          [
            [
              1,
              0,
              -152,
              [
                20
              ],
              21
            ]
          ],
          [
            4,
            -151
          ],
          [
            5,
            450,
            11
          ],
          [
            0,
            -26.429,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          20,
          "score",
          1,
          [
            [
              -153,
              [
                6,
                -154,
                [
                  4,
                  4278190080
                ]
              ]
            ],
            1,
            4
          ],
          [
            5,
            33.14,
            37.28
          ],
          [
            45.988,
            42.781,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          20,
          "highestScore",
          1,
          [
            [
              -155,
              [
                6,
                -156,
                [
                  4,
                  4278190080
                ]
              ]
            ],
            1,
            4
          ],
          [
            5,
            33.14,
            37.28
          ],
          [
            45.757,
            -30.879,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "New Label",
          13,
          [
            [
              10,
              "レベルを選択",
              22,
              false,
              1,
              1,
              1,
              -157,
              [
                42
              ],
              43
            ],
            [
              6,
              -158,
              [
                4,
                4278190080
              ]
            ]
          ],
          [
            5,
            134,
            52.4
          ],
          [
            0.879,
            9.963,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "New Label",
          8,
          [
            [
              10,
              "次のレベル",
              22,
              false,
              1,
              1,
              1,
              -159,
              [
                49
              ],
              50
            ],
            [
              6,
              -160,
              [
                4,
                4278190080
              ]
            ]
          ],
          [
            5,
            112,
            52.4
          ],
          [
            0.879,
            9.963,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "New Label",
          9,
          [
            [
              10,
              "再起動",
              22,
              false,
              1,
              1,
              1,
              -161,
              [
                56
              ],
              57
            ],
            [
              6,
              -162,
              [
                4,
                4278190080
              ]
            ]
          ],
          [
            5,
            68,
            52.4
          ],
          [
            0.879,
            9.963,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "topBlue",
          1,
          [
            [
              1,
              0,
              -163,
              [
                63
              ],
              64
            ],
            [
              61,
              40,
              100,
              100,
              -164
            ]
          ],
          [
            5,
            450,
            112
          ],
          [
            0,
            226.699,
            0,
            0,
            0,
            0,
            1,
            1,
            1.312,
            1
          ]
        ],
        [
          47,
          "line2-top copy",
          1,
          [
            [
              1,
              0,
              -166,
              [
                65
              ],
              66
            ]
          ],
          [
            4,
            -165
          ],
          [
            5,
            450,
            11
          ],
          [
            0,
            -167.192,
            0,
            0,
            0,
            1,
            6.123233995736766e-17,
            1,
            1,
            1
          ],
          [
            1,
            0,
            0,
            180
          ]
        ],
        [
          7,
          "line2-top copy",
          1,
          [
            [
              1,
              0,
              -168,
              [
                67
              ],
              68
            ]
          ],
          [
            4,
            -167
          ],
          [
            5,
            450,
            11
          ],
          [
            0,
            174.882,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          48,
          "Game_Over_Text_Japanese",
          false,
          1,
          [
            [
              31,
              -169,
              [
                77
              ],
              78
            ]
          ],
          [
            5,
            547,
            101
          ],
          [
            0,
            237.648,
            0,
            0,
            0,
            0,
            1,
            0.5,
            0.5,
            1
          ]
        ],
        [
          2,
          "Victory_Text_Japanese",
          1,
          [
            [
              31,
              -170,
              [
                79
              ],
              80
            ]
          ],
          [
            5,
            251,
            125
          ],
          [
            0,
            233.541,
            0,
            0,
            0,
            0,
            1,
            0.4,
            0.4,
            0.45
          ]
        ],
        [
          49,
          "New Sprite",
          150,
          4,
          [
            [
              1,
              0,
              -171,
              [
                83
              ],
              84
            ],
            [
              16,
              45,
              40,
              36,
              -172
            ]
          ],
          [
            4,
            4278190080
          ],
          [
            5,
            450,
            600
          ]
        ],
        [
          2,
          "New Label",
          18,
          [
            [
              10,
              "リプレイ",
              30,
              false,
              1,
              1,
              1,
              -173,
              [
                87
              ],
              88
            ],
            [
              6,
              -174,
              [
                4,
                4278190080
              ]
            ]
          ],
          [
            5,
            122,
            52.4
          ],
          [
            0,
            9.963,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "New Label",
          19,
          [
            [
              10,
              "レベルを選択",
              30,
              false,
              1,
              1,
              1,
              -175,
              [
                94
              ],
              95
            ],
            [
              6,
              -176,
              [
                4,
                4278190080
              ]
            ]
          ],
          [
            5,
            182,
            52.4
          ],
          [
            0,
            9.963,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "New Label",
          20,
          [
            [
              10,
              "ゲームに戻る",
              30,
              false,
              1,
              1,
              1,
              -177,
              [
                101
              ],
              102
            ],
            [
              6,
              -178,
              [
                4,
                4278190080
              ]
            ]
          ],
          [
            5,
            180.8,
            52.4
          ],
          [
            0,
            9.963,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          50,
          "loading",
          6,
          [
            [
              1,
              0,
              -179,
              [
                110
              ],
              111
            ],
            [
              68,
              true,
              -180,
              [
                113
              ],
              112
            ]
          ],
          [
            18,
            "67GElI95tN9JlSrVpV/6W5",
            6
          ],
          [
            5,
            100,
            100
          ]
        ],
        [
          69,
          "New Node",
          false,
          [
            3
          ],
          [
            0,
            0,
            0
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          21,
          "Main Camera",
          3,
          [
            [
              70,
              7,
              -1,
              -181
            ]
          ],
          [
            0,
            0,
            562.0504870561007,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          71,
          10,
          10,
          9,
          15
        ],
        [
          51,
          "New 3D Particle",
          true,
          10,
          [
            [
              72,
              2,
              500,
              0,
              -182,
              [
                2,
                3
              ],
              [
                13
              ],
              [
                24,
                2
              ],
              [
                74
              ],
              [
                73,
                1,
                7.9,
                [
                  75,
                  [
                    [
                      76,
                      1,
                      -1,
                      -1
                    ],
                    [
                      77,
                      1,
                      -1,
                      -1
                    ]
                  ]
                ]
              ],
              [
                24,
                5
              ],
              [
                13
              ],
              [
                13
              ],
              [
                24,
                10
              ],
              [
                13
              ],
              [
                78,
                true,
                1,
                0,
                [
                  13
                ]
              ]
            ]
          ],
          [
            -2.291,
            -2.141,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          67,
          0,
          true,
          10
        ],
        [
          79,
          10,
          53
        ],
        [
          80,
          800,
          16
        ],
        [
          53,
          "scoreValue",
          5,
          [
            -183
          ],
          [
            5,
            47.7,
            50.4
          ],
          [
            0,
            0,
            0.5
          ],
          [
            19.124,
            0.735,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          37,
          "7475",
          22,
          false,
          1,
          1,
          56,
          [
            14
          ]
        ],
        [
          30,
          "scoreLabel",
          5,
          [
            [
              36,
              "スコア:",
              18,
              18,
              false,
              1,
              2,
              1,
              -184,
              [
                15
              ],
              16
            ]
          ],
          [
            5,
            59.19,
            22.68
          ],
          [
            0,
            1,
            0.5
          ],
          [
            0,
            2.418,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          37,
          "10",
          22,
          false,
          1,
          1,
          31,
          [
            17
          ]
        ],
        [
          28,
          "pop-up",
          1,
          [
            [
              1,
              0,
              -185,
              [
                38
              ],
              39
            ]
          ],
          [
            5,
            312,
            250
          ]
        ],
        [
          38,
          "47",
          28,
          28,
          1,
          1,
          1,
          34,
          [
            40
          ]
        ],
        [
          38,
          "47",
          28,
          28,
          1,
          1,
          1,
          35,
          [
            41
          ]
        ],
        [
          2,
          "Score_Text_Japanese",
          1,
          [
            [
              1,
              0,
              -186,
              [
                73
              ],
              74
            ]
          ],
          [
            5,
            71,
            25
          ],
          [
            -45.08,
            43.36,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          2,
          "Highest_Score_Text_Japanese",
          1,
          [
            [
              1,
              0,
              -187,
              [
                75
              ],
              76
            ]
          ],
          [
            5,
            111,
            25
          ],
          [
            -67.288,
            -29.349,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          81,
          1,
          9,
          8,
          61,
          62,
          42,
          43
        ],
        [
          2,
          "pop-up",
          4,
          [
            [
              1,
              0,
              -188,
              [
                85
              ],
              86
            ]
          ],
          [
            5,
            312,
            357
          ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1.136,
            1
          ]
        ],
        [
          82,
          4,
          6
        ],
        [
          52,
          "bg",
          125,
          6,
          [
            [
              1,
              0,
              -189,
              [
                108
              ],
              109
            ]
          ],
          [
            18,
            "a70aZbZ+ZLeK9QnowEUgbL",
            6
          ],
          [
            4,
            4278190080
          ],
          [
            5,
            600,
            600
          ]
        ],
        [
          83,
          3,
          57,
          59
        ]
      ],
      0,
      [
        0,
        -1,
        65,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        -1,
        60,
        0,
        -2,
        34,
        0,
        -3,
        35,
        0,
        -4,
        17,
        0,
        -5,
        39,
        0,
        -6,
        40,
        0,
        -7,
        41,
        0,
        -8,
        29,
        0,
        -9,
        30,
        0,
        -10,
        63,
        0,
        -11,
        64,
        0,
        -12,
        42,
        0,
        -13,
        43,
        0,
        12,
        14,
        0,
        0,
        2,
        0,
        0,
        2,
        0,
        -1,
        21,
        0,
        -2,
        22,
        0,
        -3,
        23,
        0,
        -4,
        24,
        0,
        -5,
        15,
        0,
        -6,
        10,
        0,
        -7,
        16,
        0,
        -8,
        25,
        0,
        0,
        3,
        0,
        13,
        3,
        0,
        14,
        14,
        0,
        15,
        6,
        0,
        16,
        67,
        0,
        17,
        65,
        0,
        18,
        51,
        0,
        19,
        55,
        0,
        20,
        54,
        0,
        21,
        69,
        0,
        0,
        3,
        0,
        -3,
        69,
        0,
        0,
        3,
        0,
        -1,
        50,
        0,
        -2,
        7,
        0,
        0,
        4,
        0,
        -2,
        67,
        0,
        -1,
        44,
        0,
        -2,
        66,
        0,
        -3,
        18,
        0,
        -4,
        19,
        0,
        -5,
        20,
        0,
        0,
        5,
        0,
        0,
        5,
        0,
        -1,
        56,
        0,
        -2,
        58,
        0,
        -3,
        31,
        0,
        -4,
        32,
        0,
        -5,
        33,
        0,
        -6,
        26,
        0,
        -7,
        11,
        0,
        3,
        6,
        0,
        0,
        6,
        0,
        0,
        6,
        0,
        -1,
        68,
        0,
        -2,
        48,
        0,
        0,
        7,
        0,
        -1,
        14,
        0,
        -3,
        12,
        0,
        0,
        8,
        0,
        6,
        8,
        0,
        0,
        8,
        0,
        0,
        8,
        0,
        -1,
        37,
        0,
        0,
        9,
        0,
        6,
        9,
        0,
        0,
        9,
        0,
        0,
        9,
        0,
        -1,
        38,
        0,
        0,
        10,
        0,
        -2,
        53,
        0,
        0,
        10,
        0,
        -4,
        54,
        0,
        -1,
        52,
        0,
        3,
        11,
        0,
        6,
        27,
        0,
        0,
        11,
        0,
        0,
        11,
        0,
        -1,
        27,
        0,
        3,
        12,
        0,
        6,
        28,
        0,
        0,
        12,
        0,
        0,
        12,
        0,
        -1,
        28,
        0,
        0,
        13,
        0,
        6,
        13,
        0,
        0,
        13,
        0,
        0,
        13,
        0,
        -1,
        36,
        0,
        0,
        14,
        0,
        0,
        15,
        0,
        -2,
        51,
        0,
        0,
        15,
        0,
        0,
        15,
        0,
        0,
        16,
        0,
        0,
        16,
        0,
        0,
        16,
        0,
        -4,
        55,
        0,
        0,
        17,
        0,
        0,
        18,
        0,
        6,
        18,
        0,
        0,
        18,
        0,
        -1,
        45,
        0,
        0,
        19,
        0,
        6,
        19,
        0,
        0,
        19,
        0,
        -1,
        46,
        0,
        0,
        20,
        0,
        6,
        20,
        0,
        0,
        20,
        0,
        -1,
        47,
        0,
        0,
        21,
        0,
        0,
        21,
        0,
        0,
        21,
        0,
        0,
        22,
        0,
        0,
        22,
        0,
        0,
        22,
        0,
        0,
        23,
        0,
        0,
        23,
        0,
        0,
        23,
        0,
        0,
        24,
        0,
        0,
        24,
        0,
        0,
        24,
        0,
        3,
        25,
        0,
        0,
        25,
        0,
        0,
        25,
        0,
        3,
        26,
        0,
        0,
        26,
        0,
        0,
        26,
        0,
        0,
        27,
        0,
        0,
        27,
        0,
        0,
        28,
        0,
        0,
        28,
        0,
        3,
        29,
        0,
        0,
        29,
        0,
        0,
        29,
        0,
        3,
        30,
        0,
        0,
        30,
        0,
        0,
        30,
        0,
        -1,
        59,
        0,
        0,
        31,
        0,
        0,
        32,
        0,
        0,
        32,
        0,
        3,
        33,
        0,
        0,
        33,
        0,
        -1,
        61,
        0,
        0,
        34,
        0,
        -1,
        62,
        0,
        0,
        35,
        0,
        0,
        36,
        0,
        0,
        36,
        0,
        0,
        37,
        0,
        0,
        37,
        0,
        0,
        38,
        0,
        0,
        38,
        0,
        0,
        39,
        0,
        0,
        39,
        0,
        3,
        40,
        0,
        0,
        40,
        0,
        3,
        41,
        0,
        0,
        41,
        0,
        0,
        42,
        0,
        0,
        43,
        0,
        0,
        44,
        0,
        0,
        44,
        0,
        0,
        45,
        0,
        0,
        45,
        0,
        0,
        46,
        0,
        0,
        46,
        0,
        0,
        47,
        0,
        0,
        47,
        0,
        0,
        48,
        0,
        0,
        48,
        0,
        0,
        50,
        0,
        0,
        52,
        0,
        -1,
        57,
        0,
        0,
        58,
        0,
        0,
        60,
        0,
        0,
        63,
        0,
        0,
        64,
        0,
        0,
        66,
        0,
        0,
        68,
        0,
        22,
        49,
        1,
        5,
        7,
        2,
        5,
        14,
        3,
        5,
        49,
        4,
        5,
        7,
        5,
        5,
        7,
        6,
        5,
        7,
        8,
        5,
        17,
        9,
        5,
        17,
        13,
        5,
        17,
        189
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        51,
        57,
        59,
        65,
        67
      ],
      [
        -1,
        1,
        -1,
        -2,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        -1,
        4,
        -1,
        -1,
        4,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        11,
        7,
        8,
        9,
        -1,
        1,
        -1,
        1,
        11,
        7,
        8,
        9,
        -1,
        1,
        -1,
        -1,
        -1,
        4,
        -1,
        1,
        7,
        8,
        9,
        -1,
        4,
        -1,
        1,
        7,
        8,
        9,
        -1,
        4,
        -1,
        1,
        7,
        8,
        9,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        1,
        -1,
        4,
        -1,
        1,
        7,
        8,
        9,
        -1,
        4,
        -1,
        1,
        7,
        8,
        9,
        -1,
        4,
        -1,
        1,
        7,
        8,
        9,
        -1,
        1,
        -1,
        1,
        23,
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -6,
        -7,
        -8,
        -9,
        -10,
        -11,
        -12,
        -13,
        -14,
        -15,
        -16,
        -17,
        -18,
        -19,
        -20,
        -21,
        -22,
        -23,
        -24,
        -25,
        -26,
        -27,
        -28,
        -29,
        -30,
        24,
        25,
        26,
        27,
        10,
        28,
        29,
        4,
        4,
        10,
        10
      ],
      [
        0,
        7,
        22,
        23,
        0,
        24,
        0,
        25,
        0,
        5,
        0,
        26,
        0,
        10,
        0,
        0,
        2,
        0,
        0,
        2,
        0,
        8,
        0,
        5,
        0,
        11,
        6,
        1,
        6,
        3,
        0,
        12,
        0,
        11,
        6,
        1,
        6,
        3,
        0,
        13,
        0,
        0,
        0,
        2,
        0,
        4,
        1,
        1,
        3,
        0,
        2,
        0,
        4,
        1,
        1,
        3,
        0,
        2,
        0,
        4,
        1,
        1,
        3,
        0,
        12,
        0,
        8,
        0,
        8,
        0,
        5,
        0,
        5,
        0,
        27,
        0,
        28,
        0,
        29,
        0,
        30,
        0,
        10,
        0,
        7,
        0,
        13,
        0,
        2,
        0,
        4,
        1,
        1,
        3,
        0,
        2,
        0,
        4,
        1,
        1,
        3,
        0,
        2,
        0,
        4,
        1,
        1,
        3,
        0,
        7,
        0,
        31,
        14,
        14,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        9,
        66,
        67,
        2,
        2,
        9,
        9
      ]
    ],
    [
      [
        {
          "name": "Game_Over_Text_Japanese",
          "rect": [
            0,
            0,
            547,
            101
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            547,
            101
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        68
      ]
    ],
    [
      [
        [
          0,
          "level6",
          {
            "0": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          84,
          "builtin-3d-particle",
          [
            {},
            "0",
            11,
            [
              {
                "defines": {
                  "CC_USE_BILLBOARD": true,
                  "CC_USE_STRETCHED_BILLBOARD": false,
                  "CC_USE_HORIZONTAL_BILLBOARD": false,
                  "CC_USE_VERTICAL_BILLBOARD": false,
                  "CC_USE_MESH": false
                }
              },
              "props",
              11,
              [
                {},
                "mainTiling_Offset",
                8,
                [
                  2,
                  1,
                  1,
                  0,
                  0
                ],
                "tintColor",
                8,
                [
                  4,
                  2141562284
                ],
                "mainTexture",
                6,
                0
              ]
            ]
          ]
        ]
      ],
      0,
      0,
      [
        0,
        0
      ],
      [
        30,
        31
      ],
      [
        69,
        70
      ]
    ],
    [
      [
        {
          "name": "Victory_Text_Japanese",
          "rect": [
            0,
            0,
            251,
            125
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            251,
            125
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        71
      ]
    ],
    [
      [
        {
          "name": "line",
          "rect": [
            0,
            0,
            900,
            19
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            900,
            19
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        72
      ]
    ],
    [
      [
        [
          0,
          "level28",
          {
            "0": {
              "0": 2,
              "1": 3,
              "2": 3,
              "3": 2,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 2,
              "1": 2,
              "2": 3,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 0,
              "8": 1
            },
            "2": {
              "0": 2,
              "1": 3,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 0,
              "8": 1
            },
            "3": {
              "0": 3,
              "1": 3,
              "2": 2,
              "3": 2,
              "4": 1,
              "5": 2,
              "6": 0,
              "7": 0,
              "8": 1
            },
            "4": {
              "0": 2,
              "1": 3,
              "2": 3,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 0,
              "8": 1
            },
            "5": {
              "0": 2,
              "1": 3,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 2,
              "6": 0,
              "7": 0,
              "8": 0
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "button1",
          "rect": [
            0,
            0,
            506,
            220
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            506,
            220
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        73
      ]
    ],
    [
      [
        {
          "name": "pm_container_dialog",
          "rect": [
            0,
            0,
            57,
            57
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            57,
            57
          ],
          "capInsets": [
            15,
            7,
            15,
            23
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        74
      ]
    ],
    [
      [
        {
          "name": "ball",
          "rect": [
            0,
            0,
            73,
            73
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            73,
            73
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        75
      ]
    ],
    [
      [
        [
          0,
          "level24",
          {
            "0": {
              "0": 2,
              "1": 3,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 2,
              "1": 3,
              "2": 2,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 2,
              "7": 3,
              "8": 2
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 3,
              "7": 3,
              "8": 3
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 3,
              "8": 2
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level10",
          {
            "0": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "1": {
              "0": 2,
              "1": 0,
              "2": 0,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 0,
              "7": 0,
              "8": 2
            },
            "2": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "3": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "4": {
              "0": 2,
              "1": 0,
              "2": 0,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 0,
              "7": 0,
              "8": 2
            },
            "5": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 2,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level21",
          {
            "0": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "1": {
              "0": 2,
              "1": 3,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 3,
              "8": 2
            },
            "2": {
              "0": 1,
              "1": 2,
              "2": 3,
              "3": 2,
              "4": 1,
              "5": 2,
              "6": 3,
              "7": 2,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 3,
              "4": 2,
              "5": 3,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 3,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 3,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "R2",
          "rect": [
            0,
            0,
            86,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        76
      ]
    ],
    [
      [
        [
          0,
          "level8",
          {
            "0": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "1": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "2": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "3": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "4": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "5": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level9",
          {
            "0": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "1": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "2": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 0,
              "7": 0,
              "8": 0
            },
            "3": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level7",
          {
            "0": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "1": {
              "0": 1,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 1
            },
            "2": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "3": {
              "0": 1,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 1
            },
            "4": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 2
            },
            "5": {
              "0": 1,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "pop-up",
          "rect": [
            0,
            0,
            622,
            502
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            622,
            502
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        77
      ]
    ],
    [
      [
        [
          0,
          "level14",
          {
            "0": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "Highest_Score_Text_Japanese",
          "rect": [
            0,
            0,
            164,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            164,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        78
      ]
    ],
    [
      [
        [
          0,
          "level23",
          {
            "0": {
              "0": 3,
              "1": 1,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 3,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "1": {
              "0": 3,
              "1": 3,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 2,
              "6": 3,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 2,
              "1": 3,
              "2": 3,
              "3": 1,
              "4": 1,
              "5": 2,
              "6": 3,
              "7": 3,
              "8": 1
            },
            "3": {
              "0": 2,
              "1": 2,
              "2": 3,
              "3": 3,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 3,
              "8": 3
            },
            "4": {
              "0": 1,
              "1": 2,
              "2": 2,
              "3": 3,
              "4": 3,
              "5": 1,
              "6": 2,
              "7": 2,
              "8": 3
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 2,
              "4": 3,
              "5": 3,
              "6": 1,
              "7": 2,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "W1",
          "rect": [
            0,
            0,
            87,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            87,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        79
      ]
    ],
    [
      [
        {
          "name": "white",
          "rect": [
            0,
            0,
            87,
            38
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            87,
            38
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        80
      ]
    ],
    [
      [
        {
          "name": "W2",
          "rect": [
            0,
            0,
            86,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        81
      ]
    ],
    [
      [
        {
          "name": "B2",
          "rect": [
            0,
            0,
            86,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        82
      ]
    ],
    [
      [
        {
          "name": "Blue",
          "rect": [
            0,
            0,
            87,
            38
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            87,
            38
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        83
      ]
    ],
    [
      [
        [
          85,
          "builtin-3d-particle",
          [
            {
              "hash": 1682193167,
              "record": null,
              "name": "builtin-3d-particle|particle-vs-legacy:lpvs_main|tinted-fs:add",
              "glsl3": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nout vec2 uv;\nout vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nuniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform mat4 cc_matWorld;\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "CC_USE_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_STRETCHED_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_HORIZONTAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_VERTICAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_MESH",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "OUTPUT_TO_GAMMA",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "Constants",
                  "binding": 0,
                  "members": [
                    {
                      "name": "mainTiling_Offset",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "frameTile_velLenScale",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "scale",
                      "type": 16,
                      "count": 1
                    }
                  ],
                  "defines": []
                },
                {
                  "name": "FragConstants",
                  "binding": 1,
                  "members": [
                    {
                      "name": "tintColor",
                      "type": 16,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "mainTexture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": []
                }
              ]
            },
            {
              "hash": 1933642753,
              "record": null,
              "name": "builtin-3d-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply",
              "glsl3": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nout vec2 uv;\nout vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nuniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  return CCFragOutput(col);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform mat4 cc_matWorld;\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "CC_USE_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_STRETCHED_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_HORIZONTAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_VERTICAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_MESH",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "OUTPUT_TO_GAMMA",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "Constants",
                  "binding": 0,
                  "members": [
                    {
                      "name": "mainTiling_Offset",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "frameTile_velLenScale",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "scale",
                      "type": 16,
                      "count": 1
                    }
                  ],
                  "defines": []
                },
                {
                  "name": "FragConstants",
                  "binding": 1,
                  "members": [
                    {
                      "name": "tintColor",
                      "type": 16,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "mainTexture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": []
                }
              ]
            },
            {
              "hash": 1851787849,
              "record": null,
              "name": "builtin-3d-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth",
              "glsl3": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nout vec2 uv;\nout vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform mat4 cc_matWorld;\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "CC_USE_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_STRETCHED_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_HORIZONTAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_VERTICAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_MESH",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "OUTPUT_TO_GAMMA",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "Constants",
                  "binding": 0,
                  "members": [
                    {
                      "name": "mainTiling_Offset",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "frameTile_velLenScale",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "scale",
                      "type": 16,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "mainTexture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": []
                }
              ]
            },
            {
              "hash": 145387972,
              "record": null,
              "name": "builtin-3d-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied",
              "glsl3": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform Constants{\n    vec4 mainTiling_Offset;\n    vec4 frameTile_velLenScale;\n    vec4 scale;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nout vec2 uv;\nout vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    in vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    in vec3 a_texCoord3;\n    in vec3 a_normal;\n    in vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nvec4 quaternionFromAxis(vec3 xAxis,vec3 yAxis,vec3 zAxis){\n    mat3 m = mat3(xAxis,yAxis,zAxis);\n    float trace = m[0][0] + m[1][1] + m[2][2];\n    vec4 quat;\n    if (trace > 0.) {\n        float s = 0.5 / sqrt(trace + 1.0);\n        quat.w = 0.25 / s;\n        quat.x = (m[2][1] - m[1][2]) * s;\n        quat.y = (m[0][2] - m[2][0]) * s;\n        quat.z = (m[1][0] - m[0][1]) * s;\n    } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n        float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n        quat.w = (m[2][1] - m[1][2]) / s;\n        quat.x = 0.25 * s;\n        quat.y = (m[0][1] + m[1][0]) / s;\n        quat.z = (m[0][2] + m[2][0]) / s;\n    } else if (m[1][1] > m[2][2]) {\n        float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n        quat.w = (m[0][2] - m[2][0]) / s;\n        quat.x = (m[0][1] + m[1][0]) / s;\n        quat.y = 0.25 * s;\n        quat.z = (m[1][2] + m[2][1]) / s;\n    } else {\n        float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n        quat.w = (m[1][0] - m[0][1]) / s;\n        quat.x = (m[0][2] + m[2][0]) / s;\n        quat.y = (m[1][2] + m[2][1]) / s;\n        quat.z = 0.25 * s;\n    }\n    float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n    if (len > 0.) {\n        len = 1. / sqrt(len);\n        quat.x = quat.x * len;\n        quat.y = quat.y * len;\n        quat.z = quat.z * len;\n        quat.w = quat.w * len;\n    }\n    return quat;\n}\nvec4 quaternionFromEuler(vec3 angle){\n    float x = angle.x / 2.;\n    float y = angle.y / 2.;\n    float z = angle.z / 2.;\n    float sx = sin(x);\n    float cx = cos(x);\n    float sy = sin(y);\n    float cy = cos(y);\n    float sz = sin(z);\n    float cz = cos(z);\n    vec4 quat = vec4(0);\n    quat.x = sx * cy * cz + cx * sy * sz;\n    quat.y = cx * sy * cz + sx * cy * sz;\n    quat.z = cx * cy * sz - sx * sy * cz;\n    quat.w = cx * cy * cz - sx * sy * sz;\n    return quat;\n}\nmat4 matrixFromRT(vec4 q, vec3 p){\n    float x2 = q.x + q.x;\n    float y2 = q.y + q.y;\n    float z2 = q.z + q.z;\n    float xx = q.x * x2;\n    float xy = q.x * y2;\n    float xz = q.x * z2;\n    float yy = q.y * y2;\n    float yz = q.y * z2;\n    float zz = q.z * z2;\n    float wx = q.w * x2;\n    float wy = q.w * y2;\n    float wz = q.w * z2;\n    return mat4(\n        1. - (yy + zz), xy + wz, xz - wy, 0,\n        xy - wz, 1. - (xx + zz), yz + wx, 0,\n        xz + wy, yz - wx, 1. - (xx + yy), 0,\n        p.x, p.y, p.z, 1\n    );\n}\nmat4 matFromRTS(vec4 q, vec3 t, vec3 s){\n    float x = q.x, y = q.y, z = q.z, w = q.w;\n    float x2 = x + x;\n    float y2 = y + y;\n    float z2 = z + z;\n    float xx = x * x2;\n    float xy = x * y2;\n    float xz = x * z2;\n    float yy = y * y2;\n    float yz = y * z2;\n    float zz = z * z2;\n    float wx = w * x2;\n    float wy = w * y2;\n    float wz = w * z2;\n    float sx = s.x;\n    float sy = s.y;\n    float sz = s.z;\n    return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n        (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n        (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n        t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply(vec4 a, vec4 b){\n    vec4 quat;\n    quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n    quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n    quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n    quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    return quat;\n}\nvoid rotateVecFromQuat(inout vec3 v, vec4 q){\n    float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n    float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n    float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n    float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n    v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n    v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n    v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace(vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n    float z = pos.z;\n    float x = pos.x;\n    float y = pos.y;\n    vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n    vec4 rotQuat = quatMultiply(viewQuat, q);\n    rotateVecFromQuat(pos, rotQuat);\n    return pos;\n}\nvoid rotateCorner(inout vec2 corner, float angle){\n    float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n    float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n    corner.x = xOS;\n    corner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform mat4 cc_matView;\nuniform mat4 cc_matViewInv;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\nuniform mat4 cc_matWorld;\nvarying vec2 uv;\nvarying vec4 color;\nvoid computeVertPos(inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n    , mat4 viewInv\n#endif\n#if CC_USE_STRETCHED_BILLBOARD\n    , vec3 eye\n    , vec4 velocity\n    , float velocityScale\n    , float lengthScale\n    , float xIndex\n#endif\n) {\n#if CC_USE_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n    vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n    vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_USE_STRETCHED_BILLBOARD\n    vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n    vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n    pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_USE_HORIZONTAL_BILLBOARD\n    vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n    vec3 camX = vec3(1, 0, 0);\n    vec3 camY = vec3(0, 0, -1);\n    pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_USE_VERTICAL_BILLBOARD\n    vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n    rotateCorner(viewSpaceVert, q.z);\n    vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n    vec3 camY = vec3(0, 1, 0);\n    vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n    pos.xyz += offset;\n#else\n    pos.x += vertOffset.x;\n    pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV(float frameIndex, vec2 vertIndex, vec2 frameTile){\n    vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n    aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if !CC_USE_MESH\n    vertIndex.y = 1. - vertIndex.y;\n#endif\n    return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_USE_STRETCHED_BILLBOARD\n    attribute vec3 a_color1;\n#endif\n#if CC_USE_MESH\n    attribute vec3 a_texCoord3;\n    attribute vec3 a_normal;\n    attribute vec4 a_color1;\n#endif\nvec4 lpvs_main() {\n    vec3 compScale = scale.xyz * a_texCoord1;\n    vec4 pos = vec4(a_position, 1);\n#if CC_USE_STRETCHED_BILLBOARD\n    vec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_USE_STRETCHED_BILLBOARD\n        velocity = cc_matWorld * velocity;\n    #endif\n#endif\n#if !CC_USE_MESH\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_USE_BILLBOARD\n        vec3 rotEuler = a_texCoord2;\n    #elif CC_USE_STRETCHED_BILLBOARD\n        vec3 rotEuler = vec3(0.);\n    #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_USE_BILLBOARD || CC_USE_VERTICAL_BILLBOARD\n        , cc_matViewInv\n    #endif\n    #if CC_USE_STRETCHED_BILLBOARD\n        , cc_cameraPos.xyz\n        , velocity\n        , frameTile_velLenScale.z\n        , frameTile_velLenScale.w\n        , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n#else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n#endif\n    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n    pos = cc_matViewProj * pos;\n    return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
                "frag": "\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "CC_USE_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_STRETCHED_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_HORIZONTAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_VERTICAL_BILLBOARD",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_MESH",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "OUTPUT_TO_GAMMA",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "Constants",
                  "binding": 0,
                  "members": [
                    {
                      "name": "mainTiling_Offset",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "frameTile_velLenScale",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "scale",
                      "type": 16,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "mainTexture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": []
                }
              ]
            }
          ],
          [
            {
              "name": "add",
              "passes": [
                {
                  "program": "builtin-3d-particle|particle-vs-legacy:lpvs_main|tinted-fs:add",
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [
                      {
                        "blend": true,
                        "blendSrc": 770,
                        "blendDst": 1,
                        "blendSrcAlpha": 770,
                        "blendDstAlpha": 1
                      }
                    ]
                  },
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 29
                    },
                    "mainTiling_Offset": {
                      "type": 16,
                      "value": [
                        1,
                        1,
                        0,
                        0
                      ]
                    },
                    "tintColor": {
                      "type": 16,
                      "value": [
                        0.5,
                        0.5,
                        0.5,
                        0.5
                      ],
                      "inspector": {
                        "type": "color"
                      }
                    }
                  }
                }
              ]
            },
            {
              "name": "alpha-blend",
              "passes": [
                {
                  "program": "builtin-3d-particle|particle-vs-legacy:lpvs_main|tinted-fs:add",
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [
                      {
                        "blend": true,
                        "blendSrc": 770,
                        "blendDst": 771,
                        "blendSrcAlpha": 770,
                        "blendDstAlpha": 771
                      }
                    ]
                  },
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 29
                    },
                    "mainTiling_Offset": {
                      "type": 16,
                      "value": [
                        1,
                        1,
                        0,
                        0
                      ]
                    },
                    "tintColor": {
                      "type": 16,
                      "value": [
                        0.5,
                        0.5,
                        0.5,
                        0.5
                      ],
                      "inspector": {
                        "type": "color"
                      }
                    }
                  }
                }
              ]
            },
            {
              "name": "add-multiply",
              "passes": [
                {
                  "program": "builtin-3d-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply",
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [
                      {
                        "blend": true,
                        "blendSrc": 770,
                        "blendDst": 771,
                        "blendSrcAlpha": 770,
                        "blendDstAlpha": 771
                      }
                    ]
                  },
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 29
                    },
                    "mainTiling_Offset": {
                      "type": 16,
                      "value": [
                        1,
                        1,
                        0,
                        0
                      ]
                    },
                    "tintColor": {
                      "type": 16,
                      "value": [
                        0.5,
                        0.5,
                        0.5,
                        0.5
                      ],
                      "inspector": {
                        "type": "color"
                      }
                    }
                  }
                }
              ]
            },
            {
              "name": "add-smooth",
              "passes": [
                {
                  "program": "builtin-3d-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth",
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [
                      {
                        "blend": true,
                        "blendSrc": 770,
                        "blendDst": 771,
                        "blendSrcAlpha": 770,
                        "blendDstAlpha": 771
                      }
                    ]
                  },
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 29
                    },
                    "mainTiling_Offset": {
                      "type": 16,
                      "value": [
                        1,
                        1,
                        0,
                        0
                      ]
                    }
                  }
                }
              ]
            },
            {
              "name": "premultiply-blend",
              "passes": [
                {
                  "program": "builtin-3d-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied",
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [
                      {
                        "blend": true,
                        "blendSrc": 770,
                        "blendDst": 771,
                        "blendSrcAlpha": 770,
                        "blendDstAlpha": 771
                      }
                    ]
                  },
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 29
                    },
                    "mainTiling_Offset": {
                      "type": 16,
                      "value": [
                        1,
                        1,
                        0,
                        0
                      ]
                    }
                  }
                }
              ]
            }
          ]
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level20",
          {
            "0": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            },
            "1": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "5": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level18",
          {
            "0": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            },
            "1": {
              "0": 3,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 3
            },
            "2": {
              "0": 3,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 3
            },
            "3": {
              "0": 3,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 3
            },
            "4": {
              "0": 3,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 3
            },
            "5": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 1,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "B1",
          "rect": [
            0,
            0,
            86,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        84
      ]
    ],
    [
      [
        [
          0,
          "level26",
          {
            "0": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 3,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 3,
              "4": 1,
              "5": 3,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 3,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 3,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 3,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 3,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 3,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 3,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "red",
          "rect": [
            0,
            0,
            86,
            38
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            38
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        85
      ]
    ],
    [
      [
        {
          "name": "default_sprite_splash",
          "rect": [
            0,
            0,
            2,
            2
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            2,
            2
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        86
      ]
    ],
    [
      [
        [
          11,
          "BG_Music",
          ".mp3",
          41.822041
        ],
        -1
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "R1",
          "rect": [
            0,
            0,
            86,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            86,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        87
      ]
    ],
    [
      [
        {
          "name": "g1",
          "rect": [
            0,
            0,
            87,
            37
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            87,
            37
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        88
      ]
    ],
    [
      [
        [
          11,
          "gameWin",
          ".mp3",
          3.264
        ],
        -1
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level5",
          {
            "0": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 0,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 0,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 1,
              "2": 0,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 0,
              "7": 1,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 0,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 0,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 0,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 0,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "Pause_Button",
          "rect": [
            0,
            0,
            70,
            70
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            70,
            70
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        89
      ]
    ],
    [
      [
        {
          "name": "bg",
          "rect": [
            0,
            0,
            898,
            1194
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            898,
            1194
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        90
      ]
    ],
    [
      [
        [
          0,
          "level11",
          {
            "0": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 1,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 1,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 1
            },
            "3": {
              "0": 1,
              "1": 1,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 1,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 1
            },
            "5": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          11,
          "Accept Click",
          ".mp3",
          0.144
        ],
        -1
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level27",
          {
            "0": {
              "0": 2,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 2
            },
            "1": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 2,
              "1": 1,
              "2": 2,
              "3": 3,
              "4": 3,
              "5": 2,
              "6": 3,
              "7": 2,
              "8": 1
            },
            "3": {
              "0": 3,
              "1": 1,
              "2": 3,
              "3": 2,
              "4": 2,
              "5": 1,
              "6": 3,
              "7": 1,
              "8": 1
            },
            "4": {
              "0": 3,
              "1": 1,
              "2": 3,
              "3": 3,
              "4": 1,
              "5": 2,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 2,
              "1": 1,
              "2": 3,
              "3": 3,
              "4": 1,
              "5": 2,
              "6": 3,
              "7": 3,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "default_btn_pressed",
          "rect": [
            0,
            0,
            40,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            40,
            40
          ],
          "capInsets": [
            12,
            12,
            12,
            12
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        91
      ]
    ],
    [
      [
        {
          "name": "line-top",
          "rect": [
            0,
            0,
            900,
            47
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            900,
            47
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        92
      ]
    ],
    [
      [
        [
          86,
          "Brick"
        ],
        [
          44,
          "Brick",
          [
            [
              -2,
              [
                9,
                0,
                -3
              ],
              -4,
              [
                87,
                -8,
                -7,
                -6,
                [
                  1,
                  2,
                  3,
                  4
                ],
                [
                  5,
                  6
                ],
                [
                  7,
                  8
                ],
                [
                  9,
                  10
                ],
                [
                  11,
                  12
                ],
                -5
              ]
            ],
            1,
            4,
            1,
            4
          ],
          [
            4,
            -1
          ],
          [
            5,
            38.5,
            17
          ],
          [
            34.365,
            -13.634,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1
          ]
        ],
        [
          56,
          0,
          1,
          [
            0
          ]
        ],
        [
          19,
          1,
          1,
          [
            5,
            36,
            15
          ]
        ]
      ],
      0,
      [
        0,
        3,
        1,
        0,
        -1,
        2,
        0,
        0,
        1,
        0,
        -3,
        3,
        0,
        32,
        3,
        0,
        33,
        2,
        0,
        34,
        1,
        0,
        0,
        1,
        0,
        35,
        1,
        8
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2
      ],
      [
        -1,
        -1,
        -2,
        -3,
        -4,
        -1,
        -2,
        -1,
        -2,
        -1,
        -2,
        -1,
        -2,
        1
      ],
      [
        0,
        93,
        94,
        95,
        96,
        97,
        15,
        98,
        99,
        100,
        101,
        102,
        103,
        15
      ]
    ],
    [
      [
        [
          0,
          "level29",
          {
            "0": {
              "0": 1,
              "1": 0,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 3,
              "8": 3
            },
            "1": {
              "0": 0,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 3,
              "8": 2
            },
            "2": {
              "0": 0,
              "1": 0,
              "2": 0,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "3": {
              "0": 0,
              "1": 0,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 1,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "4": {
              "0": 0,
              "1": 1,
              "2": 0,
              "3": 1,
              "4": 1,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "5": {
              "0": 0,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 2,
              "5": 2,
              "6": 3,
              "7": 2,
              "8": 3
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        {
          "name": "default_btn_normal",
          "rect": [
            0,
            0,
            40,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            40,
            40
          ],
          "capInsets": [
            12,
            12,
            12,
            12
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        104
      ]
    ],
    [
      [
        {
          "name": "Paddle 2",
          "rect": [
            0,
            0,
            210,
            41
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            210,
            41
          ],
          "capInsets": [
            80,
            0,
            80,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        2
      ],
      [
        105
      ]
    ],
    [
      [
        [
          0,
          "level3",
          {
            "0": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "2": {
              "0": 0,
              "1": 1,
              "2": 0,
              "3": 1,
              "4": 0,
              "5": 1,
              "6": 0,
              "7": 1,
              "8": 0
            },
            "3": {
              "0": 0,
              "1": 1,
              "2": 0,
              "3": 1,
              "4": 0,
              "5": 1,
              "6": 0,
              "7": 1,
              "8": 0
            },
            "4": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level4",
          {
            "0": {
              "0": 1,
              "1": 0,
              "2": 1,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 1,
              "7": 0,
              "8": 1
            },
            "1": {
              "0": 0,
              "1": 1,
              "2": 0,
              "3": 1,
              "4": 0,
              "5": 1,
              "6": 0,
              "7": 1,
              "8": 0
            },
            "2": {
              "0": 1,
              "1": 0,
              "2": 1,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 1,
              "7": 0,
              "8": 1
            },
            "3": {
              "0": 0,
              "1": 1,
              "2": 0,
              "3": 1,
              "4": 0,
              "5": 1,
              "6": 0,
              "7": 1,
              "8": 0
            },
            "4": {
              "0": 1,
              "1": 0,
              "2": 1,
              "3": 0,
              "4": 1,
              "5": 0,
              "6": 1,
              "7": 0,
              "8": 1
            },
            "5": {
              "0": 0,
              "1": 1,
              "2": 0,
              "3": 1,
              "4": 0,
              "5": 1,
              "6": 0,
              "7": 1,
              "8": 0
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          11,
          "Wipe Chips",
          ".mp3",
          1.224
        ],
        -1
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level12",
          {
            "0": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 2
            },
            "1": {
              "0": 2,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 2
            },
            "2": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "3": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "4": {
              "0": 2,
              "1": 2,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 2,
              "8": 2
            },
            "5": {
              "0": 2,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 2
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level30",
          {
            "0": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            },
            "1": {
              "0": 3,
              "1": 0,
              "2": 2,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 2,
              "7": 0,
              "8": 3
            },
            "2": {
              "0": 3,
              "1": 2,
              "2": 1,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 1,
              "7": 2,
              "8": 3
            },
            "3": {
              "0": 3,
              "1": 0,
              "2": 2,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 2,
              "7": 0,
              "8": 3
            },
            "4": {
              "0": 3,
              "1": 0,
              "2": 2,
              "3": 0,
              "4": 0,
              "5": 0,
              "6": 2,
              "7": 0,
              "8": 3
            },
            "5": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "level19",
          {
            "0": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            },
            "1": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "2": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            },
            "3": {
              "0": 3,
              "1": 3,
              "2": 3,
              "3": 3,
              "4": 3,
              "5": 3,
              "6": 3,
              "7": 3,
              "8": 3
            },
            "4": {
              "0": 2,
              "1": 2,
              "2": 2,
              "3": 2,
              "4": 2,
              "5": 2,
              "6": 2,
              "7": 2,
              "8": 2
            },
            "5": {
              "0": 1,
              "1": 1,
              "2": 1,
              "3": 1,
              "4": 1,
              "5": 1,
              "6": 1,
              "7": 1,
              "8": 1
            }
          }
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ]
  ]
]