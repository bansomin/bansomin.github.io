window.__require = function e(t, n, r) {
  function s(o, u) {
    if (!n[o]) {
      if (!t[o]) {
        var b = o.split("/");
        b = b[b.length - 1];
        if (!t[b]) {
          var a = "function" == typeof __require && __require;
          if (!u && a) return a(b, !0);
          if (i) return i(b, !0);
          throw new Error("Cannot find module '" + o + "'");
        }
        o = b;
      }
      var f = n[o] = {
        exports: {}
      };
      t[o][0].call(f.exports, function(e) {
        var n = t[o][1][e];
        return s(n || e);
      }, f, f.exports, e, t, n, r);
    }
    return n[o].exports;
  }
  var i = "function" == typeof __require && __require;
  for (var o = 0; o < r.length; o++) s(r[o]);
  return s;
}({
  AniLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "31b1b/UIL9Fh6MDH3OgnwEn", "AniLabel");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        label: cc.Label,
        baseDuration: 1,
        stepInterval: .02,
        speedFactor: .002
      },
      onLoad: function onLoad() {
        this.currentValue = 0;
        this.targetValue = 0;
        this.isAnimating = false;
      },
      animateNumberChange: function animateNumberChange(targetValue) {
        var _this = this;
        if (this.targetValue === targetValue) return;
        if ("" == this.label.string) {
          this.label.string = targetValue;
          this.targetValue = targetValue;
          this.currentValue = this.targetValue;
          return;
        }
        this.isAnimating && this.unschedule(this.updateNumberStep);
        this.targetValue = targetValue;
        this.isAnimating = true;
        var diff = Math.abs(this.targetValue - this.currentValue);
        var duration = Math.max(this.baseDuration - diff * this.speedFactor, .2);
        0 == this.targetValue && (duration = .01);
        var steps = Math.ceil(duration / this.stepInterval);
        var increment = (this.targetValue - this.currentValue) / steps;
        var stepCount = 0;
        this.updateNumberStep = function() {
          if (stepCount < steps) {
            stepCount++;
            _this.currentValue += increment;
            _this.label.string = Math.floor(_this.currentValue).toString();
          } else {
            _this.currentValue = _this.targetValue;
            _this.label.string = _this.targetValue.toString();
            _this.unschedule(_this.updateNumberStep);
            _this.isAnimating = false;
          }
        };
        this.schedule(this.updateNumberStep, this.stepInterval);
      },
      start: function start() {}
    });
    cc._RF.pop();
  }, {} ],
  AnimatorAnimation: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c0eccTRS2tFf5D/vabVUToc", "AnimatorAnimation");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorBase_1 = require("./core/AnimatorBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent, disallowMultiple = _a.disallowMultiple;
    var AnimatorAnimation = function(_super) {
      __extends(AnimatorAnimation, _super);
      function AnimatorAnimation() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._animation = null;
        _this._animState = null;
        _this._wrapModeMap = new Map();
        return _this;
      }
      AnimatorAnimation.prototype.start = function() {
        if (!this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this._animation = this.getComponent(cc.Animation);
        this._animation.on(cc.Animation.EventType.FINISHED, this.onAnimFinished, this);
        this._animation.on(cc.Animation.EventType.LASTFRAME, this.onAnimFinished, this);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorAnimation.prototype.onInit = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this.initArgs.apply(this, args);
        this._animation = this.getComponent(cc.Animation);
        this._animation.on(cc.Animation.EventType.FINISHED, this.onAnimFinished, this);
        this._animation.on(cc.Animation.EventType.LASTFRAME, this.onAnimFinished, this);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorAnimation.prototype.playAnimation = function(animName, loop) {
        if (!animName) return;
        this._animState = this._animation.play(animName);
        if (!this._animState) return;
        this._wrapModeMap.has(this._animState) || this._wrapModeMap.set(this._animState, this._animState.wrapMode);
        this._animState.wrapMode = loop ? cc.WrapMode.Loop : this._wrapModeMap.get(this._animState);
      };
      AnimatorAnimation.prototype.scaleTime = function(scale) {
        this._animState && (this._animState.speed = scale);
      };
      AnimatorAnimation = __decorate([ ccclass, disallowMultiple, requireComponent(cc.Animation) ], AnimatorAnimation);
      return AnimatorAnimation;
    }(AnimatorBase_1.default);
    exports.default = AnimatorAnimation;
    cc._RF.pop();
  }, {
    "./core/AnimatorBase": "AnimatorBase"
  } ],
  AnimatorBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "70155SubV5GBpf9+7htzg6v", "AnimatorBase");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorController_1 = require("./AnimatorController");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, executionOrder = _a.executionOrder;
    var AnimatorBase = function(_super) {
      __extends(AnimatorBase, _super);
      function AnimatorBase() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.AssetRawUrl = null;
        _this.PlayOnStart = true;
        _this.AutoUpdate = true;
        _this._hasInit = false;
        _this._ac = null;
        _this._stateLogicMap = null;
        _this._onStateChangeCall = null;
        _this._animationPlayer = null;
        _this._extraMulti = 1;
        return _this;
      }
      Object.defineProperty(AnimatorBase.prototype, "extraMulti", {
        get: function() {
          return this._extraMulti;
        },
        set: function(v) {
          if (this._extraMulti === v) return;
          this._extraMulti = v;
          this.updatePlaySpeed();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorBase.prototype, "curStateName", {
        get: function() {
          return this._ac.curState.name;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorBase.prototype, "curStateMotion", {
        get: function() {
          return this._ac.curState.motion;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorBase.prototype, "animComplete", {
        get: function() {
          return this._ac.animComplete;
        },
        enumerable: false,
        configurable: true
      });
      AnimatorBase.prototype.onInit = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
      };
      AnimatorBase.prototype.initArgs = function() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        args.forEach(function(arg) {
          if (!arg) return;
          if ("function" === typeof arg) _this._onStateChangeCall = arg; else if ("object" === typeof arg) if (arg instanceof Map) _this._stateLogicMap = arg; else {
            _this._animationPlayer = arg;
            _this._animationPlayer.setFinishedCallback(_this.onAnimFinished, _this);
          }
        });
      };
      AnimatorBase.prototype.updatePlaySpeed = function() {
        var playSpeed = this._ac.curState.speed * this.extraMulti;
        this._ac.curState.multi && (playSpeed *= this._ac.params.getNumber(this._ac.curState.multi) || 1);
        this.scaleTime(playSpeed);
      };
      AnimatorBase.prototype.updateAnimator = function() {
        this.updatePlaySpeed();
        if (this._stateLogicMap) {
          var curLogic = this._stateLogicMap.get(this._ac.curState.name);
          curLogic && curLogic.onUpdate();
        }
        this._ac.updateAnimator();
      };
      AnimatorBase.prototype.update = function() {
        this._hasInit && this.AutoUpdate && this.updateAnimator();
      };
      AnimatorBase.prototype.manualUpdate = function() {
        this._hasInit && !this.AutoUpdate && this.updateAnimator();
      };
      AnimatorBase.prototype.initJson = function(json) {
        this._ac = new AnimatorController_1.default(this, json);
        this._ac.changeState(json.defaultState);
      };
      AnimatorBase.prototype.onAnimFinished = function() {
        this._ac.onAnimationComplete();
      };
      AnimatorBase.prototype.playAnimation = function(animName, loop) {};
      AnimatorBase.prototype.scaleTime = function(scale) {};
      AnimatorBase.prototype.onStateChange = function(fromState, toState) {
        this.playAnimation(toState.motion, toState.loop);
        var fromStateName = fromState ? fromState.name : "";
        if (this._stateLogicMap) {
          var fromLogic = this._stateLogicMap.get(fromStateName);
          fromLogic && fromLogic.onExit();
          var toLogic = this._stateLogicMap.get(toState.name);
          toLogic && toLogic.onEntry();
        }
        this._onStateChangeCall && this._onStateChangeCall(fromStateName, toState.name);
      };
      AnimatorBase.prototype.setBool = function(key, value) {
        this._ac.params.setBool(key, value);
      };
      AnimatorBase.prototype.getBool = function(key) {
        return 0 !== this._ac.params.getBool(key);
      };
      AnimatorBase.prototype.setNumber = function(key, value) {
        this._ac.params.setNumber(key, value);
      };
      AnimatorBase.prototype.getNumber = function(key) {
        return this._ac.params.getNumber(key);
      };
      AnimatorBase.prototype.setTrigger = function(key) {
        this._ac.params.setTrigger(key);
      };
      AnimatorBase.prototype.resetTrigger = function(key) {
        this._ac.params.resetTrigger(key);
      };
      AnimatorBase.prototype.autoTrigger = function(key) {
        this._ac.params.autoTrigger(key);
      };
      AnimatorBase.prototype.play = function(stateName) {
        if (!this._hasInit) return;
        this._ac.play(stateName);
      };
      __decorate([ property({
        type: cc.JsonAsset,
        tooltip: false
      }) ], AnimatorBase.prototype, "AssetRawUrl", void 0);
      __decorate([ property({
        tooltip: false
      }) ], AnimatorBase.prototype, "PlayOnStart", void 0);
      __decorate([ property({
        tooltip: false
      }) ], AnimatorBase.prototype, "AutoUpdate", void 0);
      AnimatorBase = __decorate([ ccclass, executionOrder(-1e3) ], AnimatorBase);
      return AnimatorBase;
    }(cc.Component);
    exports.default = AnimatorBase;
    cc._RF.pop();
  }, {
    "./AnimatorController": "AnimatorController"
  } ],
  AnimatorCondition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed0e9YXQv1GI62/4Q+HbH3W", "AnimatorCondition");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LogicType = exports.ParamType = void 0;
    var ParamType;
    (function(ParamType) {
      ParamType[ParamType["COMPLETE"] = 0] = "COMPLETE";
      ParamType[ParamType["BOOLEAN"] = 1] = "BOOLEAN";
      ParamType[ParamType["NUMBER"] = 2] = "NUMBER";
      ParamType[ParamType["TRIGGER"] = 3] = "TRIGGER";
      ParamType[ParamType["AUTO_TRIGGER"] = 4] = "AUTO_TRIGGER";
    })(ParamType = exports.ParamType || (exports.ParamType = {}));
    var LogicType;
    (function(LogicType) {
      LogicType[LogicType["EQUAL"] = 0] = "EQUAL";
      LogicType[LogicType["NOTEQUAL"] = 1] = "NOTEQUAL";
      LogicType[LogicType["GREATER"] = 2] = "GREATER";
      LogicType[LogicType["LESS"] = 3] = "LESS";
      LogicType[LogicType["GREATER_EQUAL"] = 4] = "GREATER_EQUAL";
      LogicType[LogicType["LESS_EQUAL"] = 5] = "LESS_EQUAL";
    })(LogicType = exports.LogicType || (exports.LogicType = {}));
    var AnimatorCondition = function() {
      function AnimatorCondition(data, ac) {
        this._ac = null;
        this._param = "";
        this._value = 0;
        this._logic = LogicType.EQUAL;
        this._ac = ac;
        this._param = data.param;
        this._value = data.value;
        this._logic = data.logic;
      }
      AnimatorCondition.prototype.getParamName = function() {
        return this._param;
      };
      AnimatorCondition.prototype.getParamType = function() {
        return this._ac.params.getParamType(this._param);
      };
      AnimatorCondition.prototype.check = function() {
        var type = this.getParamType();
        if (type === ParamType.BOOLEAN) return this._ac.params.getBool(this._param) === this._value;
        if (type !== ParamType.NUMBER) {
          if (type === ParamType.AUTO_TRIGGER) return 0 !== this._ac.params.getAutoTrigger(this._param);
          if (type === ParamType.TRIGGER) return 0 !== this._ac.params.getTrigger(this._param);
          cc.error("[AnimatorCondition.check] \u9519\u8bef\u7684type: " + type);
          return false;
        }
        var value = this._ac.params.getNumber(this._param);
        switch (this._logic) {
         case LogicType.EQUAL:
          return value === this._value;

         case LogicType.NOTEQUAL:
          return value !== this._value;

         case LogicType.GREATER:
          return value > this._value;

         case LogicType.LESS:
          return value < this._value;

         case LogicType.GREATER_EQUAL:
          return value >= this._value;

         case LogicType.LESS_EQUAL:
          return value <= this._value;

         default:
          return false;
        }
      };
      return AnimatorCondition;
    }();
    exports.default = AnimatorCondition;
    cc._RF.pop();
  }, {} ],
  AnimatorController: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a787cUvl2tHh4nL+49DDSrS", "AnimatorController");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorParams_1 = require("./AnimatorParams");
    var AnimatorState_1 = require("./AnimatorState");
    var AnimatorController = function() {
      function AnimatorController(player, json) {
        this._jsonData = null;
        this._animator = null;
        this._params = null;
        this._states = null;
        this._anyState = null;
        this._curState = null;
        this._changeCount = 0;
        this.animCompleteState = null;
        this.animComplete = false;
        this._animator = player;
        this._jsonData = json;
        this._states = new Map();
        this._params = new AnimatorParams_1.default(json.parameters);
        this.init(json);
      }
      Object.defineProperty(AnimatorController.prototype, "curState", {
        get: function() {
          return this._curState;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorController.prototype, "params", {
        get: function() {
          return this._params;
        },
        enumerable: false,
        configurable: true
      });
      AnimatorController.prototype.init = function(json) {
        if (json.states.length <= 0) {
          cc.error("[AnimatorController.init] \u72b6\u6001\u673ajson\u9519\u8bef");
          return;
        }
        this._anyState = new AnimatorState_1.default(json.anyState, this);
        for (var i = 0; i < json.states.length; i++) {
          var state = new AnimatorState_1.default(json.states[i], this);
          this._states.set(state.name, state);
        }
      };
      AnimatorController.prototype.updateState = function() {
        this._curState.checkAndTrans();
        this._curState !== this._anyState && null !== this._anyState && this._anyState.checkAndTrans();
      };
      AnimatorController.prototype.updateAnimator = function() {
        this._changeCount = 0;
        this.updateState();
        this.animComplete && this.animCompleteState.loop && (this.animComplete = false);
        this.params.resetAllAutoTrigger();
      };
      AnimatorController.prototype.onAnimationComplete = function() {
        this.animComplete = true;
        this.animCompleteState = this._curState;
      };
      AnimatorController.prototype.play = function(stateName) {
        if (!this._states.has(stateName)) return;
        this.animComplete = false;
        var oldState = this._curState;
        this._curState = this._states.get(stateName);
        this._animator.onStateChange(oldState, this._curState);
        this.updateState();
      };
      AnimatorController.prototype.changeState = function(stateName) {
        this._changeCount++;
        if (this._changeCount > 1e3) {
          cc.error("[AnimatorController.changeState] error: \u72b6\u6001\u5207\u6362\u9012\u5f52\u8c03\u7528\u8d85\u8fc71000\u6b21\uff0ctransition\u8bbe\u7f6e\u53ef\u80fd\u51fa\u9519!");
          return;
        }
        if (!this._states.has(stateName) || null !== this._curState && this._curState.name === stateName) cc.error("[AnimatorController.changeState] error state: " + stateName); else {
          var oldState = this._curState;
          this._curState = this._states.get(stateName);
          this._animator.onStateChange(oldState, this._curState);
          this.updateState();
        }
      };
      return AnimatorController;
    }();
    exports.default = AnimatorController;
    cc._RF.pop();
  }, {
    "./AnimatorParams": "AnimatorParams",
    "./AnimatorState": "AnimatorState"
  } ],
  AnimatorCustomization: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0e26fCq18dIn7sZ8VOtyCEI", "AnimatorCustomization");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorBase_1 = require("./core/AnimatorBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent, disallowMultiple = _a.disallowMultiple;
    var AnimatorCustomization = function(_super) {
      __extends(AnimatorCustomization, _super);
      function AnimatorCustomization() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.PlayOnStart = false;
        return _this;
      }
      AnimatorCustomization.prototype.onInit = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (this._hasInit) return;
        this._hasInit = true;
        this.initArgs.apply(this, args);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorCustomization.prototype.playAnimation = function(animName, loop) {
        this._animationPlayer && animName && this._animationPlayer.playAnimation(animName, loop);
      };
      AnimatorCustomization.prototype.scaleTime = function(scale) {
        this._animationPlayer && this._animationPlayer.scaleTime(scale);
      };
      __decorate([ property({
        override: true,
        visible: false
      }) ], AnimatorCustomization.prototype, "PlayOnStart", void 0);
      AnimatorCustomization = __decorate([ ccclass, disallowMultiple ], AnimatorCustomization);
      return AnimatorCustomization;
    }(AnimatorBase_1.default);
    exports.default = AnimatorCustomization;
    cc._RF.pop();
  }, {
    "./core/AnimatorBase": "AnimatorBase"
  } ],
  AnimatorDragonBones: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fa0001DMAlCzZ/hkmySCXhc", "AnimatorDragonBones");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorBase_1 = require("./core/AnimatorBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent, disallowMultiple = _a.disallowMultiple;
    var AnimatorDragonBones = function(_super) {
      __extends(AnimatorDragonBones, _super);
      function AnimatorDragonBones() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._dragonBones = null;
        return _this;
      }
      AnimatorDragonBones.prototype.start = function() {
        if (!this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this._dragonBones = this.getComponent(dragonBones.ArmatureDisplay);
        this._dragonBones.addEventListener(dragonBones.EventObject.COMPLETE, this.onAnimFinished, this);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorDragonBones.prototype.onInit = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this.initArgs.apply(this, args);
        this._dragonBones = this.getComponent(dragonBones.ArmatureDisplay);
        this._dragonBones.addEventListener(dragonBones.EventObject.COMPLETE, this.onAnimFinished, this);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorDragonBones.prototype.playAnimation = function(animName, loop) {
        animName && this._dragonBones.playAnimation(animName, loop ? 0 : -1);
      };
      AnimatorDragonBones.prototype.scaleTime = function(scale) {
        this._dragonBones.timeScale = scale;
      };
      AnimatorDragonBones = __decorate([ ccclass, disallowMultiple, requireComponent(dragonBones.ArmatureDisplay) ], AnimatorDragonBones);
      return AnimatorDragonBones;
    }(AnimatorBase_1.default);
    exports.default = AnimatorDragonBones;
    cc._RF.pop();
  }, {
    "./core/AnimatorBase": "AnimatorBase"
  } ],
  AnimatorParams: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8ffa0ESFiNN+5eHOhEJdUDk", "AnimatorParams");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorCondition_1 = require("./AnimatorCondition");
    var AnimatorParams = function() {
      function AnimatorParams(dataArr) {
        var _this = this;
        this._paramMap = new Map();
        dataArr.forEach(function(data) {
          var param = {
            type: data.type,
            value: data.init
          };
          _this._paramMap.set(data.param, param);
        });
      }
      AnimatorParams.prototype.getParamType = function(key) {
        var param = this._paramMap.get(key);
        return param ? param.type : null;
      };
      AnimatorParams.prototype.setNumber = function(key, value) {
        var param = this._paramMap.get(key);
        param && param.type === AnimatorCondition_1.ParamType.NUMBER && (param.value = value);
      };
      AnimatorParams.prototype.setBool = function(key, value) {
        var param = this._paramMap.get(key);
        param && param.type === AnimatorCondition_1.ParamType.BOOLEAN && (param.value = value ? 1 : 0);
      };
      AnimatorParams.prototype.setTrigger = function(key) {
        var param = this._paramMap.get(key);
        param && param.type === AnimatorCondition_1.ParamType.TRIGGER && (param.value = 1);
      };
      AnimatorParams.prototype.resetTrigger = function(key) {
        var param = this._paramMap.get(key);
        param && param.type === AnimatorCondition_1.ParamType.TRIGGER && (param.value = 0);
      };
      AnimatorParams.prototype.autoTrigger = function(key) {
        var param = this._paramMap.get(key);
        param && param.type === AnimatorCondition_1.ParamType.AUTO_TRIGGER && (param.value = 1);
      };
      AnimatorParams.prototype.resetAutoTrigger = function(key) {
        var param = this._paramMap.get(key);
        param && param.type === AnimatorCondition_1.ParamType.AUTO_TRIGGER && (param.value = 0);
      };
      AnimatorParams.prototype.resetAllAutoTrigger = function() {
        this._paramMap.forEach(function(param, key) {
          param.type === AnimatorCondition_1.ParamType.AUTO_TRIGGER && (param.value = 0);
        });
      };
      AnimatorParams.prototype.getNumber = function(key) {
        var param = this._paramMap.get(key);
        return param && param.type === AnimatorCondition_1.ParamType.NUMBER ? param.value : 0;
      };
      AnimatorParams.prototype.getBool = function(key) {
        var param = this._paramMap.get(key);
        return param && param.type === AnimatorCondition_1.ParamType.BOOLEAN ? param.value : 0;
      };
      AnimatorParams.prototype.getTrigger = function(key) {
        var param = this._paramMap.get(key);
        return param && param.type === AnimatorCondition_1.ParamType.TRIGGER ? param.value : 0;
      };
      AnimatorParams.prototype.getAutoTrigger = function(key) {
        var param = this._paramMap.get(key);
        return param && param.type === AnimatorCondition_1.ParamType.AUTO_TRIGGER ? param.value : 0;
      };
      return AnimatorParams;
    }();
    exports.default = AnimatorParams;
    cc._RF.pop();
  }, {
    "./AnimatorCondition": "AnimatorCondition"
  } ],
  AnimatorSpineSecondary: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "32504xevahNAblXzax6Zdkv", "AnimatorSpineSecondary");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorSpine_1 = require("./AnimatorSpine");
    var AnimatorBase_1 = require("./core/AnimatorBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent;
    var AnimatorSpineSecondary = function(_super) {
      __extends(AnimatorSpineSecondary, _super);
      function AnimatorSpineSecondary() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.TrackIndex = 1;
        _this._main = null;
        _this._spine = null;
        return _this;
      }
      AnimatorSpineSecondary.prototype.start = function() {
        if (!this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this._spine = this.getComponent(sp.Skeleton);
        this._main = this.getComponent(AnimatorSpine_1.default);
        this._main.addSecondaryListener(this.onAnimFinished, this);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorSpineSecondary.prototype.onInit = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this.initArgs.apply(this, args);
        this._spine = this.getComponent(sp.Skeleton);
        this._main = this.getComponent(AnimatorSpine_1.default);
        this._main.addSecondaryListener(this.onAnimFinished, this);
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorSpineSecondary.prototype.playAnimation = function(animName, loop) {
        animName ? this._spine.setAnimation(this.TrackIndex, animName, loop) : this._spine.clearTrack(this.TrackIndex);
      };
      __decorate([ property({
        tooltip: false
      }) ], AnimatorSpineSecondary.prototype, "TrackIndex", void 0);
      AnimatorSpineSecondary = __decorate([ ccclass, requireComponent(sp.Skeleton) ], AnimatorSpineSecondary);
      return AnimatorSpineSecondary;
    }(AnimatorBase_1.default);
    exports.default = AnimatorSpineSecondary;
    cc._RF.pop();
  }, {
    "./AnimatorSpine": "AnimatorSpine",
    "./core/AnimatorBase": "AnimatorBase"
  } ],
  AnimatorSpine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "81397AkbwFD5Izg7F0yY1/D", "AnimatorSpine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorBase_1 = require("./core/AnimatorBase");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property, requireComponent = _a.requireComponent, disallowMultiple = _a.disallowMultiple;
    var AnimatorSpine = function(_super) {
      __extends(AnimatorSpine, _super);
      function AnimatorSpine() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this._spine = null;
        _this._completeListenerMap = new Map();
        _this._secondaryListenerMap = new Map();
        return _this;
      }
      AnimatorSpine.prototype.start = function() {
        if (!this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this._spine = this.getComponent(sp.Skeleton);
        this._spine.setCompleteListener(this.onSpineComplete.bind(this));
        this._spine.setEventListener(this.onTrack.bind(this));
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorSpine.prototype.onTrack = function(trackEntry, event) {};
      AnimatorSpine.prototype.onInit = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
        if (this.PlayOnStart || this._hasInit) return;
        this._hasInit = true;
        this.initArgs.apply(this, args);
        this._spine = this.getComponent(sp.Skeleton);
        this._spine.setCompleteListener(this.onSpineComplete.bind(this));
        null !== this.AssetRawUrl && this.initJson(this.AssetRawUrl.json);
      };
      AnimatorSpine.prototype.onSpineComplete = function(entry) {
        0 === entry.trackIndex && this.onAnimFinished();
        this._completeListenerMap.forEach(function(target, cb) {
          target ? cb.call(target, entry) : cb(entry);
        });
        this._secondaryListenerMap.forEach(function(target, cb) {
          entry.trackIndex === target.TrackIndex && cb.call(target, entry);
        });
      };
      AnimatorSpine.prototype.playAnimation = function(animName, loop) {
        animName ? this._spine.setAnimation(0, animName, loop) : this._spine.clearTrack(0);
      };
      AnimatorSpine.prototype.scaleTime = function(scale) {
        this._spine.timeScale = scale;
      };
      AnimatorSpine.prototype.addSecondaryListener = function(cb, target) {
        this._secondaryListenerMap.set(cb, target);
      };
      AnimatorSpine.prototype.addCompleteListener = function(cb, target) {
        void 0 === target && (target = null);
        if (this._completeListenerMap.has(cb)) return;
        this._completeListenerMap.set(cb, target);
      };
      AnimatorSpine.prototype.removeCompleteListener = function(cb) {
        this._completeListenerMap.delete(cb);
      };
      AnimatorSpine.prototype.clearCompleteListener = function() {
        this._completeListenerMap.clear;
      };
      AnimatorSpine = __decorate([ ccclass, disallowMultiple, requireComponent(sp.Skeleton) ], AnimatorSpine);
      return AnimatorSpine;
    }(AnimatorBase_1.default);
    exports.default = AnimatorSpine;
    cc._RF.pop();
  }, {
    "./core/AnimatorBase": "AnimatorBase"
  } ],
  AnimatorStateLogic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66b3443xBZChLXcVaSoAEp9", "AnimatorStateLogic");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorStateLogic = function() {
      function AnimatorStateLogic() {}
      AnimatorStateLogic.prototype.onEntry = function() {};
      AnimatorStateLogic.prototype.onUpdate = function() {};
      AnimatorStateLogic.prototype.onExit = function() {};
      return AnimatorStateLogic;
    }();
    exports.default = AnimatorStateLogic;
    cc._RF.pop();
  }, {} ],
  AnimatorState: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "929e16hOgtHZJinhK6dMl6C", "AnimatorState");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorTransition_1 = require("./AnimatorTransition");
    var AnimatorState = function() {
      function AnimatorState(data, ac) {
        this._name = "";
        this._motion = "";
        this._loop = false;
        this._speed = 1;
        this._multi = "";
        this._transitions = [];
        this._ac = null;
        this._name = data.state;
        this._motion = data.motion || "";
        this._loop = data.loop || false;
        this._speed = data.speed || 1;
        this._multi = data.multiplier || "";
        this._ac = ac;
        for (var i = 0; i < data.transitions.length; i++) {
          var transition = new AnimatorTransition_1.default(data.transitions[i], ac);
          transition.isValid() && this._transitions.push(transition);
        }
      }
      Object.defineProperty(AnimatorState.prototype, "name", {
        get: function() {
          return this._name;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorState.prototype, "motion", {
        get: function() {
          return this._motion;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorState.prototype, "loop", {
        get: function() {
          return this._loop;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorState.prototype, "speed", {
        get: function() {
          return this._speed;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AnimatorState.prototype, "multi", {
        get: function() {
          return this._multi;
        },
        enumerable: false,
        configurable: true
      });
      AnimatorState.prototype.checkAndTrans = function() {
        for (var i = 0; i < this._transitions.length; i++) {
          var transition = this._transitions[i];
          if (transition && transition.check()) {
            transition.doTrans();
            return;
          }
        }
      };
      return AnimatorState;
    }();
    exports.default = AnimatorState;
    cc._RF.pop();
  }, {
    "./AnimatorTransition": "AnimatorTransition"
  } ],
  AnimatorTransition: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "488de/O3gpGKJh+zuH2z5by", "AnimatorTransition");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorCondition_1 = require("./AnimatorCondition");
    var AnimatorTransition = function() {
      function AnimatorTransition(data, ac) {
        this._toStateName = "";
        this._hasExitTime = false;
        this._conditions = [];
        this._ac = null;
        this._toStateName = data.toState;
        this._hasExitTime = data.hasExitTime;
        this._ac = ac;
        for (var i = 0; i < data.conditions.length; i++) {
          var condition = new AnimatorCondition_1.default(data.conditions[i], ac);
          this._conditions.push(condition);
        }
      }
      AnimatorTransition.prototype.isValid = function() {
        return this._hasExitTime || this._conditions.length > 0;
      };
      AnimatorTransition.prototype.check = function() {
        if (this._toStateName === this._ac.curState.name) return false;
        if (this._hasExitTime && (this._ac.curState !== this._ac.animCompleteState || !this._ac.animComplete)) return false;
        for (var i = 0; i < this._conditions.length; i++) if (!this._conditions[i].check()) return false;
        return true;
      };
      AnimatorTransition.prototype.doTrans = function() {
        this._hasExitTime && (this._ac.animComplete = false);
        for (var i = 0; i < this._conditions.length; i++) {
          var type = this._conditions[i].getParamType();
          var name = this._conditions[i].getParamName();
          type === AnimatorCondition_1.ParamType.TRIGGER ? this._ac.params.resetTrigger(name) : type === AnimatorCondition_1.ParamType.AUTO_TRIGGER && this._ac.params.resetAutoTrigger(name);
        }
        this._ac.changeState(this._toStateName);
      };
      return AnimatorTransition;
    }();
    exports.default = AnimatorTransition;
    cc._RF.pop();
  }, {
    "./AnimatorCondition": "AnimatorCondition"
  } ],
  AsyncQueue: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b259bF/vTtNtJu+LqeEwyeh", "AsyncQueue");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AsyncQueue = void 0;
    var AsyncQueue = function() {
      function AsyncQueue() {
        this._runningAsyncTask = null;
        this._queues = [];
        this._isProcessingTaskUUID = 0;
        this._enable = true;
        this.complete = null;
      }
      Object.defineProperty(AsyncQueue.prototype, "queues", {
        get: function() {
          return this._queues;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncQueue.prototype, "enable", {
        get: function() {
          return this._enable;
        },
        set: function(val) {
          if (this._enable === val) return;
          this._enable = val;
          val && this.size > 0 && this.play();
        },
        enumerable: false,
        configurable: true
      });
      AsyncQueue.prototype.push = function(callback, params) {
        void 0 === params && (params = null);
        var uuid = AsyncQueue._$uuid_count++;
        this._queues.push({
          uuid: uuid,
          callbacks: [ callback ],
          params: params
        });
        return uuid;
      };
      AsyncQueue.prototype.pushMulti = function(params) {
        var callbacks = [];
        for (var _i = 1; _i < arguments.length; _i++) callbacks[_i - 1] = arguments[_i];
        var uuid = AsyncQueue._$uuid_count++;
        this._queues.push({
          uuid: uuid,
          callbacks: callbacks,
          params: params
        });
        return uuid;
      };
      AsyncQueue.prototype.remove = function(uuid) {
        var _a;
        if ((null === (_a = this._runningAsyncTask) || void 0 === _a ? void 0 : _a.uuid) === uuid) {
          console.warn("\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1\u4e0d\u53ef\u4ee5\u79fb\u9664");
          return;
        }
        for (var i = 0; i < this._queues.length; i++) if (this._queues[i].uuid === uuid) {
          this._queues.splice(i, 1);
          break;
        }
      };
      Object.defineProperty(AsyncQueue.prototype, "size", {
        get: function() {
          return this._queues.length;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncQueue.prototype, "isProcessing", {
        get: function() {
          return this._isProcessingTaskUUID > 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncQueue.prototype, "isStop", {
        get: function() {
          if (this._queues.length > 0) return false;
          if (this.isProcessing) return false;
          return true;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AsyncQueue.prototype, "runningParams", {
        get: function() {
          if (this._runningAsyncTask) return this._runningAsyncTask.params;
          return null;
        },
        enumerable: false,
        configurable: true
      });
      AsyncQueue.prototype.clear = function() {
        this._queues = [];
        this._isProcessingTaskUUID = 0;
        this._runningAsyncTask = null;
      };
      AsyncQueue.prototype.step = function() {
        this.isProcessing && this.next(this._isProcessingTaskUUID);
      };
      AsyncQueue.prototype.play = function(args) {
        var _this = this;
        void 0 === args && (args = null);
        if (this.isProcessing) return;
        if (!this._enable) return;
        var actionData = this._queues.shift();
        if (actionData) {
          this._runningAsyncTask = actionData;
          var taskUUID_1 = actionData.uuid;
          this._isProcessingTaskUUID = taskUUID_1;
          var callbacks = actionData.callbacks;
          if (1 == callbacks.length) {
            var nextFunc = function(nextArgs) {
              void 0 === nextArgs && (nextArgs = null);
              _this.next(taskUUID_1, nextArgs);
            };
            callbacks[0](nextFunc, actionData.params, args);
          } else {
            var fnum_1 = callbacks.length;
            var nextArgsArr_1 = [];
            var nextFunc = function(nextArgs) {
              void 0 === nextArgs && (nextArgs = null);
              --fnum_1;
              nextArgsArr_1.push(nextArgs || null);
              0 === fnum_1 && _this.next(taskUUID_1, nextArgsArr_1);
            };
            var knum = fnum_1;
            for (var i = 0; i < knum; i++) callbacks[i](nextFunc, actionData.params, args);
          }
        } else {
          this._isProcessingTaskUUID = 0;
          this._runningAsyncTask = null;
          this.complete && this.complete(args);
        }
      };
      AsyncQueue.prototype.yieldTime = function(time, callback) {
        void 0 === callback && (callback = null);
        var task = function(next, params, args) {
          var _t = setTimeout(function() {
            clearTimeout(_t);
            callback && callback();
            next(args);
          }, time);
        };
        this.push(task, {
          des: "AsyncQueue.yieldTime"
        });
      };
      AsyncQueue.prototype.next = function(taskUUID, args) {
        void 0 === args && (args = null);
        if (this._isProcessingTaskUUID === taskUUID) {
          this._isProcessingTaskUUID = 0;
          this._runningAsyncTask = null;
          this.play(args);
        } else this._runningAsyncTask && Global.utils.logMessage(this._runningAsyncTask);
      };
      AsyncQueue.excuteTimes = function(count, next) {
        void 0 === next && (next = null);
        var fnum = count;
        var call = function() {
          --fnum;
          0 === fnum && next && next();
        };
        return call;
      };
      AsyncQueue._$uuid_count = 1;
      return AsyncQueue;
    }();
    exports.AsyncQueue = AsyncQueue;
    cc._RF.pop();
  }, {} ],
  AudioEffectPool: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01278BDjrtCr4CBpmO5DZlN", "AudioEffectPool");
    "use strict";
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioEffectPool = void 0;
    var AudioEffect_1 = require("./AudioEffect");
    var AE_ID_MAX = 3e4;
    var AudioEffectPool = function() {
      function AudioEffectPool() {
        this._switch = true;
        this._volume = 1;
        this.pool = new cc.NodePool();
        this.effects = new Map();
        this.res = new Map();
        this._aeId = 0;
      }
      Object.defineProperty(AudioEffectPool.prototype, "switch", {
        get: function() {
          return this._switch;
        },
        set: function(value) {
          this._switch = value;
          value && this.stop();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioEffectPool.prototype, "volume", {
        get: function() {
          return this._volume;
        },
        set: function(value) {
          this._volume = value;
          this.effects.forEach(function(ae) {
            ae.volume = value;
          });
        },
        enumerable: false,
        configurable: true
      });
      AudioEffectPool.prototype.getAeId = function() {
        this._aeId == AE_ID_MAX && (this._aeId = 1);
        this._aeId++;
        return this._aeId;
      };
      AudioEffectPool.prototype.load = function(url, bundleName, onPlayComplete) {
        void 0 === bundleName && (bundleName = "resources");
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            return [ 2, new Promise(function(resolve, reject) {
              return __awaiter(_this, void 0, void 0, function() {
                var clip, aeid, key, ae, node;
                var _this = this;
                return __generator(this, function(_a) {
                  switch (_a.label) {
                   case 0:
                    if (!this.switch) return [ 2, resolve(-1) ];
                    if (!(url instanceof cc.AudioClip)) return [ 3, 1 ];
                    clip = url;
                    return [ 3, 3 ];

                   case 1:
                    clip = Global.res.getRes(url);
                    if (!!clip) return [ 3, 3 ];
                    this.res.set(bundleName, url);
                    return [ 4, Global.res.loadAsync(url, cc.AudioClip) ];

                   case 2:
                    clip = _a.sent();
                    _a.label = 3;

                   case 3:
                    if (!clip.isValid) {
                      resolve(-1);
                      return [ 2 ];
                    }
                    aeid = this.getAeId();
                    key = url instanceof cc.AudioClip ? url.uuid : bundleName + "_" + url;
                    key += "_" + aeid;
                    node = null;
                    if (0 == this.pool.size()) {
                      node = new cc.Node();
                      node.name = "AudioEffect";
                      node.parent = Global.audio.node;
                      ae = node.addComponent(AudioEffect_1.AudioEffect);
                    } else {
                      node = this.pool.get();
                      ae = node.getComponent(AudioEffect_1.AudioEffect);
                    }
                    ae.onComplete = function() {
                      _this.put(aeid, url, bundleName);
                      onPlayComplete && onPlayComplete();
                    };
                    this.effects.set(key, ae);
                    ae.volume = this.volume;
                    ae.clip = clip;
                    ae.play();
                    resolve(aeid);
                    return [ 2 ];
                  }
                });
              });
            }) ];
          });
        });
      };
      AudioEffectPool.prototype.put = function(aeid, url, bundleName) {
        void 0 === bundleName && (bundleName = "resources");
        var key;
        key = url instanceof cc.AudioClip ? url.uuid : bundleName + "_" + url;
        key += "_" + aeid;
        var ae = this.effects.get(key);
        if (ae && ae.clip) {
          this.effects.delete(key);
          ae.stop();
          this.pool.put(ae.node);
        }
      };
      AudioEffectPool.prototype.release = function() {
        this.effects.forEach(function(ae) {
          ae.node.destroy();
        });
        this.effects.clear();
        this.res.forEach(function(url, bundleName) {
          Global.res.release(url);
        });
        this.pool.clear();
      };
      AudioEffectPool.prototype.stop = function() {
        this.effects.forEach(function(ae) {
          ae.stop();
        });
      };
      AudioEffectPool.prototype.play = function() {
        if (!this.switch) return;
        this.effects.forEach(function(ae) {
          ae.play();
        });
      };
      AudioEffectPool.prototype.pause = function() {
        if (!this.switch) return;
        this.effects.forEach(function(ae) {
          ae.pause();
        });
      };
      return AudioEffectPool;
    }();
    exports.AudioEffectPool = AudioEffectPool;
    cc._RF.pop();
  }, {
    "./AudioEffect": "AudioEffect"
  } ],
  AudioEffect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e52d2ysY1BEbpcT2Cz0Wwss", "AudioEffect");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioEffect = void 0;
    var AudioEffect = function(_super) {
      __extends(AudioEffect, _super);
      function AudioEffect() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.onComplete = null;
        return _this;
      }
      AudioEffect.prototype.start = function() {
        this.node.on("ended", this.onAudioEnded, this);
      };
      AudioEffect.prototype.onAudioEnded = function() {
        this.onComplete && this.onComplete();
      };
      return AudioEffect;
    }(cc.AudioSource);
    exports.AudioEffect = AudioEffect;
    cc._RF.pop();
  }, {} ],
  AudioManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "252f0z+vPNL8Y/jsLYmomtw", "AudioManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioManager = void 0;
    var AudioEffectPool_1 = require("./AudioEffectPool");
    var AudioMusic_1 = require("./AudioMusic");
    var LOCAL_STORE_KEY = "game_audio";
    var AudioManager = function(_super) {
      __extends(AudioManager, _super);
      function AudioManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.music = null;
        _this.effect = new AudioEffectPool_1.AudioEffectPool();
        _this.local_data = {};
        return _this;
      }
      AudioManager.prototype.setMusicComplete = function(callback) {
        void 0 === callback && (callback = null);
        this.music.onComplete = callback;
      };
      AudioManager.prototype.playMusic = function(url, callback, bundleName) {};
      AudioManager.prototype.playMusicLoop = function(url, bundleName) {};
      AudioManager.prototype.stopMusic = function() {
        this.music.switch && this.music.isPlaying && this.music.stop();
      };
      Object.defineProperty(AudioManager.prototype, "progressMusic", {
        get: function() {
          return this.music.progress;
        },
        set: function(value) {
          this.music.progress = value;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "volumeMusic", {
        get: function() {
          return this.music.volume;
        },
        set: function(value) {
          this.music.volume = value;
          this.save();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "switchMusic", {
        get: function() {
          return this.music.switch;
        },
        set: function(value) {
          this.music.switch = value;
          value || this.music.stop();
          this.save();
        },
        enumerable: false,
        configurable: true
      });
      AudioManager.prototype.playEffect = function(url, bundleName, onPlayComplete) {
        return this.effect.load(url, bundleName, onPlayComplete);
      };
      AudioManager.prototype.putEffect = function(aeid, url, bundleName) {
        this.effect.put(aeid, url, bundleName);
      };
      Object.defineProperty(AudioManager.prototype, "volumeEffect", {
        get: function() {
          return this.effect.volume;
        },
        set: function(value) {
          this.effect.volume = value;
          this.save();
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(AudioManager.prototype, "switchEffect", {
        get: function() {
          return this.effect.switch;
        },
        set: function(value) {
          this.effect.switch = value;
          value || this.effect.stop();
          this.save();
        },
        enumerable: false,
        configurable: true
      });
      AudioManager.prototype.resumeAll = function() {
        !this.music.isPlaying && this.music.progress > 0 && this.music.play();
        this.effect.play();
      };
      AudioManager.prototype.pauseAll = function() {
        this.music.isPlaying && this.music.pause();
        this.effect.pause();
      };
      AudioManager.prototype.stopAll = function() {
        this.music.stop();
        this.effect.stop();
      };
      AudioManager.prototype.save = function() {
        this.local_data.volume_music = this.music.volume;
        this.local_data.volume_effect = this.effect.volume;
        this.local_data.switch_music = this.music.switch;
        this.local_data.switch_effect = this.effect.switch;
        Global.storage.set(LOCAL_STORE_KEY, this.local_data);
      };
      AudioManager.prototype.load = function() {
        this.music = this.getComponent(AudioMusic_1.AudioMusic) || this.addComponent(AudioMusic_1.AudioMusic);
        this.local_data = Global.storage.getJson(LOCAL_STORE_KEY);
        if (this.local_data) try {
          this.setState();
        } catch (_a) {
          this.setStateDefault();
        } else this.setStateDefault();
      };
      AudioManager.prototype.setState = function() {
        this.music.volume = this.local_data.volume_music;
        this.effect.volume = this.local_data.volume_effect;
        this.music.switch = this.local_data.switch_music;
        this.effect.switch = this.local_data.switch_effect;
      };
      AudioManager.prototype.setStateDefault = function() {
        this.local_data = {};
        this.music.volume = .5;
        this.effect.volume = .5;
        this.music.switch = true;
        this.effect.switch = true;
      };
      return AudioManager;
    }(cc.Component);
    exports.AudioManager = AudioManager;
    cc._RF.pop();
  }, {
    "./AudioEffectPool": "AudioEffectPool",
    "./AudioMusic": "AudioMusic"
  } ],
  AudioMusic: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5c1f3kqGetBiIv48/CvuaQv", "AudioMusic");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AudioMusic = void 0;
    var AudioMusic = function(_super) {
      __extends(AudioMusic, _super);
      function AudioMusic() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.switch = true;
        _this.onComplete = null;
        _this._progress = 0;
        _this._isLoading = false;
        _this._nextBundleName = null;
        _this._nextUrl = null;
        return _this;
      }
      AudioMusic.prototype.start = function() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onAudioEnded, this);
      };
      AudioMusic.prototype.onAudioEnded = function() {
        this.onComplete && this.onComplete();
      };
      Object.defineProperty(AudioMusic.prototype, "progress", {
        get: function() {
          this.getDuration() > 0 && (this._progress = this.getCurrentTime() / this.getDuration());
          return this._progress;
        },
        set: function(value) {
          this._progress = value;
          this.setCurrentTime(value * this.getDuration());
        },
        enumerable: false,
        configurable: true
      });
      AudioMusic.prototype.load = function(url, callback, bundleName) {
        void 0 === bundleName && (bundleName = "resources");
        return __awaiter(this, void 0, void 0, function() {
          var data;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              if (this._isLoading) {
                this._nextBundleName = bundleName;
                this._nextUrl = url;
                return [ 2 ];
              }
              this._isLoading = true;
              return [ 4, Global.res.loadAsync(url, cc.AudioClip) ];

             case 1:
              data = _a.sent();
              if (data) {
                this._isLoading = false;
                if (null != this._nextUrl) {
                  this.load(this._nextUrl, callback, this._nextBundleName);
                  this._nextBundleName = this._nextUrl = null;
                } else {
                  callback && callback();
                  this.isPlaying && this.stop();
                  this.release();
                  this.clip = data;
                  this.play();
                }
              }
              return [ 2 ];
            }
          });
        });
      };
      AudioMusic.prototype.release = function() {
        if (this.clip) {
          this.stop();
          this.clip.decRef();
          this.clip = null;
        }
      };
      return AudioMusic;
    }(cc.AudioSource);
    exports.AudioMusic = AudioMusic;
    cc._RF.pop();
  }, {} ],
  BackpackView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "dbb65X55opKObM79bYovn2C", "BackpackView");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    var UI_TYPE = {
      STATES: "states",
      EQUIP: "equip"
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        content: {
          type: cc.Node,
          default: null
        },
        bpTitleItem: {
          type: cc.Prefab,
          default: null
        },
        bgStatesItem: {
          type: cc.Prefab,
          default: null
        },
        bpStatesGroupItem: {
          type: cc.Prefab,
          default: null
        },
        bgStateItem: {
          type: cc.Prefab,
          default: null
        },
        bpEquipItem: {
          type: cc.Prefab,
          default: null
        },
        bpEquipGroupItem: {
          type: cc.Prefab,
          default: null
        },
        toggleState: {
          type: cc.Toggle,
          default: null
        },
        _uiType: null,
        _isEnemy: false,
        _roleData: null,
        _belongsToCT: null
      },
      onAdded: function onAdded(args) {
        this._isEnemy = args.isEnemy;
        this._roleData = args.roleData;
        this._belongsToCT = args.belongsToCT;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: gameConfig.CONTROLS.BACKPACK_CT
        });
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: this._belongsToCT
        });
      },
      onEnable: function onEnable() {
        this._uiType = null;
        this.toggleState.check();
        this.initUI(UI_TYPE.STATES);
      },
      onClickToggleBtn: function onClickToggleBtn(event, type) {
        this.initUI(type);
      },
      initUI: function initUI(type) {
        if (this._uiType == type) return;
        this._uiType = type;
        this.content.removeAllChildren();
        var bpTitleItem = cc.instantiate(this.bpTitleItem);
        bpTitleItem.getComponent("BpTitleItem").initUI(this._isEnemy, type);
        this.content.addChild(bpTitleItem);
        if (type == UI_TYPE.STATES) {
          var bgStatesItem = cc.instantiate(this.bgStatesItem);
          bgStatesItem.getComponent("BpStatesItem").initUI("STATES", this._roleData);
          this.content.addChild(bgStatesItem);
          var bulletData = this._roleData.data.bullets;
          var backpackItem = cc.instantiate(this.bpEquipItem);
          backpackItem.getComponent("BpEquipItem").initUI("BACKPACK", bulletData, EnumType.SKILL_TYPE.BULLET, this._roleData);
          this.content.addChild(backpackItem);
        } else if (type == UI_TYPE.EQUIP) {
          var skillData = Global.skillManager.getSkillSetByOwnership(EnumType.BAG_TYPE.SKILL, this._roleData);
          var cardsItem = cc.instantiate(this.bpEquipItem);
          cardsItem.getComponent("BpEquipItem").initUI("CARDS", skillData, EnumType.SKILL_TYPE.SKILL, this._roleData);
          this.content.addChild(cardsItem);
          var magicData = Global.skillManager.getSkillSetByOwnership(EnumType.BAG_TYPE.MAGIC, this._roleData);
          var itemsItem = cc.instantiate(this.bpEquipItem);
          itemsItem.getComponent("BpEquipItem").initUI("ITEMS", magicData, EnumType.SKILL_TYPE.MAGIC, this._roleData);
          this.content.addChild(itemsItem);
        }
      },
      closeUI: function closeUI() {
        Global.gui.remove(gameConfig.UIID.BackpackPanel);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  BagItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "96fd5OQcV1JhLh6jtzS+DiC", "BagItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        rareBgList: [ cc.SpriteFrame ],
        currentBg: cc.Sprite,
        itemMask: cc.Node,
        countLabel: cc.Node,
        lockIcon: cc.Node,
        selectedIcon: cc.Node,
        iconSprite: cc.Sprite,
        probLabel: cc.Node,
        container: cc.Node,
        flash: sp.Skeleton
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd.bind(this), this);
      },
      onEnable: function onEnable() {
        var _this = this;
        if (this.ownerType == EnumType.ITEM_OWNER_TYPE.OPEN_BOX_RESULT) {
          this.container.setScale(0, 0);
          this.flash.node.active = true;
          this.flash.clearTrack(0);
          var aniName = this.itemData.rarity >= EnumType.RARE_TYPE_EQUIPMENT.EPIC ? "Purple" : "Blue";
          this.flash.setAnimation(0, aniName, false);
          this.flash.setEventListener(function(trackEntry, event) {
            "Start" === event.data.name && cc.tween(_this.container).to(.2, {
              scale: 1
            }).start();
          });
          this.flash.setCompleteListener(function(trackEntry) {
            _this.flash.node.active = false;
          });
        } else {
          this.container.setScale(1, 1);
          this.flash.node.active = false;
        }
      },
      setTaskRewardInfo: function setTaskRewardInfo(_index, _type) {
        this.taskRewardIndex = _index;
        this.taskRewardType = _type;
      },
      onTouchEnd: function onTouchEnd() {
        if (this.ownerType == EnumType.ITEM_OWNER_TYPE.MERGE_SLOT) {
          var equipMergeNode = Global.gui.get(gameConfig.UIID.EquipMerge);
          equipMergeNode && equipMergeNode.getComponent("EquipMerge").onClickItem2Cancel(this.node);
        } else if (this.ownerType == EnumType.ITEM_OWNER_TYPE.MERGE) {
          var _equipMergeNode = Global.gui.get(gameConfig.UIID.EquipMerge);
          _equipMergeNode && _equipMergeNode.getComponent("EquipMerge").onClickItem2Merge(this.node);
        } else if (this.ownerType == EnumType.ITEM_OWNER_TYPE.TASK_REWARD) {
          var taskNode = Global.gui.get(gameConfig.UIID.TaskPanel);
          taskNode && taskNode.getComponent("TaskPanel").claimSingleItem(this.taskRewardIndex, this.taskRewardType);
        }
      },
      setMask: function setMask(_mask) {
        this.itemMask.active = _mask;
      },
      showLock: function showLock(_lock) {
        this.setMask(_lock);
        this.lockIcon.active = _lock;
      },
      showSelect: function showSelect(_select) {
        this.setMask(_select);
        this.selectedIcon.active = _select;
      },
      setData: function setData(_itemData, _roleData, _ownerType, _showType, _prob) {
        void 0 === _ownerType && (_ownerType = EnumType.ITEM_OWNER_TYPE.NONE);
        void 0 === _showType && (_showType = EnumType.ITEM_SHOW_TYPE.NONE);
        this.ownerType = _ownerType;
        this.itemData = _itemData;
        this.roleData = _roleData;
        this.currentBg.spriteFrame = this.rareBgList[_itemData.rarity];
        this.countLabel.getComponent("LabelUpdater").setString("X" + _itemData.count);
        _itemData.type != EnumType.BAG_ITEM_TYPE.MERGE || _ownerType != EnumType.ITEM_OWNER_TYPE.MERGE && _ownerType != EnumType.ITEM_OWNER_TYPE.MERGE_SLOT && _ownerType != EnumType.ITEM_OWNER_TYPE.EQUIP ? this.countLabel.active = true : this.countLabel.active = false;
        this.countLabel.setScale(1);
        this.setMask(false);
        this.lockIcon.active = false;
        this.selectedIcon.active = false;
        _showType & EnumType.ITEM_SHOW_TYPE.SELECTED_FLAG && this.showSelect(this.itemData.selected);
        this.probLabel.active = _showType & EnumType.ITEM_SHOW_TYPE.PROB_FLAG;
        _showType & EnumType.ITEM_SHOW_TYPE.PROB_FLAG && this.probLabel.getComponent("LabelUpdater").setString(_prob);
        this.countLabel.setScale(1);
        _showType & EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_1 ? this.countLabel.setScale(2) : _showType & EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2 && this.countLabel.setScale(1.2);
        var self = this;
        var pathIcon = "icons/itemIcons/item_" + this.itemData.itemId;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          res && (self.iconSprite.spriteFrame = res);
        });
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  BagManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a8d3endLMlEWpfyEAd1kKVb", "BagManager");
    "use strict";
    var ItemConfig = require("ItemConfig");
    var ItemData = require("ItemData");
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    var BagManager = cc.Class({
      extends: cc.Component,
      properties: {},
      ctor: function ctor() {
        this.itemConfigDict = {};
        for (var i = 0; i < ItemConfig.data.length; i++) {
          var item = ItemConfig.data[i];
          this.itemConfigDict[item.id] = item;
        }
        this.STAMINA_ITEM_ID = 2001;
        this.DIAMOND_ITEM_ID = 2002;
        this.COIN_ITEM_ID = 2003;
      },
      getItemConfig: function getItemConfig(_id) {
        return this.itemConfigDict[_id];
      },
      checkItems: function checkItems(_ids, _counts, _roleData) {
        var dict = {};
        for (var j = 0; j < _ids.length; j++) {
          var id = _ids[j];
          var count = _counts[j];
          false == dict.hasOwnProperty(id) ? dict[id] = parseInt(count) : dict[id] += count;
        }
        var result = dict;
        for (var key in dict) {
          var _id2 = key;
          var _count2 = dict[key];
          if (_roleData.itemDict && _roleData.itemDict.hasOwnProperty(_id2)) {
            var item = _roleData.itemDict[_id2];
            item.count < _count2 && (result = null);
          } else result = null;
        }
        return result;
      },
      removeItem: function removeItem(_id, _itemData, _count, _roleData) {
        if (null != _id) {
          for (var key in _roleData.bag[EnumType.BAG_TYPE.ITEM]) {
            var rarityList = _roleData.bag[EnumType.BAG_TYPE.ITEM][key];
            for (var i = 0; i < rarityList.length; i++) {
              var item = rarityList[i];
              if (item.itemId == _id) {
                item.count -= _count;
                item.count <= 0 && rarityList.splice(i, 1);
                break;
              }
            }
          }
          if (_roleData.itemDict.hasOwnProperty(_id)) {
            var _item2 = _roleData.itemDict[_id];
            _item2.count <= 0 && delete _roleData.itemDict[_id];
          }
        } else for (var _key in _roleData.bag[EnumType.BAG_TYPE.ITEM]) {
          var _rarityList = _roleData.bag[EnumType.BAG_TYPE.ITEM][_key];
          var index = _rarityList.indexOf(_itemData);
          index >= 0 && _rarityList.splice(index, 1);
        }
        var storageData = _roleData.getBagItemStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.BAG_ITEM_DATA, storageData);
      },
      addItem2Bag: function addItem2Bag(_item, _roleData) {
        if (_roleData.bag[EnumType.BAG_TYPE.ITEM].hasOwnProperty(_item.rarity)) {
          var result = false;
          for (var i = 0; i < _roleData.bag[EnumType.BAG_TYPE.ITEM][_item.rarity].length; i++) {
            var item = _roleData.bag[EnumType.BAG_TYPE.ITEM][_item.rarity][i];
            if (item.itemId == _item.itemId && _item.type != EnumType.BAG_ITEM_TYPE.MERGE) {
              result = true;
              item.count++;
              break;
            }
          }
          false == result && _roleData.bag[EnumType.BAG_TYPE.ITEM][_item.rarity].push(_item);
        } else _roleData.bag[EnumType.BAG_TYPE.ITEM][_item.rarity] = [ _item ];
        if (_item.type == EnumType.BAG_ITEM_TYPE.MERGE) return;
        null == _roleData.itemDict && (_roleData.itemDict = {});
        false == _roleData.itemDict.hasOwnProperty(_item.itemId) && (_roleData.itemDict[_item.itemId] = _item);
      },
      addItem: function addItem(_id, _count, _roleData, _dontSave) {
        var itemConfig = this.getItemConfig(_id);
        if (null == itemConfig) return;
        var items = [];
        for (var i = 0; i < _count; i++) {
          var itemData = new ItemData();
          itemData.setData(_roleData, itemConfig);
          this.addItem2Bag(itemData, _roleData);
          items.push(itemData);
        }
        if (true != _dontSave) {
          var storageData = _roleData.getBagItemStorageData();
          Global.storage.set(gameConfig.COMMON_KEYS.BAG_ITEM_DATA, storageData);
        }
        return items;
      },
      checkItemCount: function checkItemCount(_id, _roleData) {
        var result = 0;
        _roleData.itemDict && true == _roleData.itemDict.hasOwnProperty(_id) && (result = _roleData.itemDict[_id].count);
        return result;
      }
    });
    module.exports = BagManager;
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    ItemConfig: "ItemConfig",
    ItemData: "ItemData"
  } ],
  BaseProgressBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5280fSr8FhHb6p38hB507gE", "BaseProgressBar");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        progressBar: {
          type: cc.ProgressBar,
          default: null
        },
        numLab: {
          type: cc.Label,
          default: null
        },
        ishowBaseHp: {
          default: false,
          tooltip: "\u662f\u5426\u663e\u793a\u603b\u751f\u547d\u503c\uff08\u683c\u5f0f\uff1a\u5f53\u524d\u751f\u547d\u503c/\u603b\u751f\u547d\u503c\uff09"
        },
        direction: {
          displayName: "\u65b9\u5411",
          type: gameConfig.DIRECTION_ENUM,
          default: gameConfig.DIRECTION_ENUM.LEFT,
          notify: function notify() {
            this.updateBaseUI();
          }
        }
      },
      updateBaseUI: function updateBaseUI() {
        this.direction == gameConfig.DIRECTION_ENUM.RIGHT ? this.node.setScale(1, 1) : this.node.setScale(-1, 1);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  BasicAttributesManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a3446PQ3aFBZqKnlV8/EYul", "BasicAttributesManager");
    "use strict";
    var BasicAttributes = require("BasicAttributes");
    var BasicAttributesManager = cc.Class({
      extends: cc.Component,
      ctor: function ctor() {
        this.configDict = {};
        for (var i = 0; i < BasicAttributes.data.length; i++) {
          var item = BasicAttributes.data[i];
          for (var key in item) {
            var value = item[key];
            "skills" != key && "magazine" != key && "path" != key && "prologueMessages" != key && "victoryMessages" != key && "defeatMessages" != key && (item[key] = parseInt(value));
          }
          this.configDict[item.id] = item;
        }
      },
      getConfigByID: function getConfigByID(_id) {
        var result = this.configDict[_id];
        return result;
      }
    });
    module.exports = BasicAttributesManager;
    cc._RF.pop();
  }, {
    BasicAttributes: "BasicAttributes"
  } ],
  BasicAttributes: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "82d2aB5bMhLEYe0YTmvSjMy", "BasicAttributes");
    "use strict";
    var BasicAttributes = cc.Class({
      name: "BasicAttributes",
      statics: {
        data: [ {
          id: "1000",
          path: "prefabs/role/player",
          ultimate_id: "1001",
          prologueMessages: "",
          defeatMessages: "",
          victoryMessages: "",
          magazine: "1001,1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "20",
          discount: "0",
          skills: "",
          random_skill_count: "0",
          stamina_max: "30",
          stamina_recovery: "100",
          skill_reroll_count: "0",
          shop_restock_count: "3",
          raid_trash_coin: "100",
          raid_boss_coin: "100"
        }, {
          id: "1001",
          path: "prefabs/role/enemy01",
          ultimate_id: "3001",
          prologueMessages: "2001",
          defeatMessages: "2002",
          victoryMessages: "2003",
          magazine: "1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "2400",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "0",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "0",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1002",
          path: "prefabs/role/enemy02",
          ultimate_id: "3002",
          prologueMessages: "2004",
          defeatMessages: "2005",
          victoryMessages: "2006",
          magazine: "1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "2700",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "0",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "1",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1003",
          path: "prefabs/role/enemy03",
          ultimate_id: "3003",
          prologueMessages: "2007|2008",
          defeatMessages: "2009",
          victoryMessages: "2010",
          magazine: "1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "3260",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "0",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "1",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1004",
          path: "prefabs/role/enemy04",
          ultimate_id: "3004",
          prologueMessages: "2011|2012",
          defeatMessages: "2013",
          victoryMessages: "2014",
          magazine: "1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "3380",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "0",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "2",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1005",
          path: "prefabs/role/enemy05",
          ultimate_id: "3005",
          prologueMessages: "2015",
          defeatMessages: "2016",
          victoryMessages: "2017",
          magazine: "1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "3",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1006",
          path: "prefabs/role/enemy06",
          ultimate_id: "3006",
          prologueMessages: "2018",
          defeatMessages: "2019",
          victoryMessages: "2020",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "3500",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "3",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1007",
          path: "prefabs/role/enemy07",
          ultimate_id: "3007",
          prologueMessages: "2021",
          defeatMessages: "2022",
          victoryMessages: "2023",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "150",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "",
          random_skill_count: "3",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1008",
          path: "prefabs/role/enemy08",
          ultimate_id: "3007",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1083|1",
          random_skill_count: "4",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1009",
          path: "prefabs/role/enemy09",
          ultimate_id: "3009",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1083|2",
          random_skill_count: "5",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1010",
          path: "prefabs/role/boss01",
          ultimate_id: "2001",
          prologueMessages: "2024",
          defeatMessages: "2025",
          victoryMessages: "2026",
          magazine: "",
          strength: "60",
          energy_recovery: "160",
          basic_hp: "11250",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1093|5",
          random_skill_count: "0",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1011",
          path: "prefabs/role/enemy10",
          ultimate_id: "3006",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|1,1083|3,1064|1",
          random_skill_count: "5",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1012",
          path: "prefabs/role/enemy11",
          ultimate_id: "3011",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|1,1083|4,1064|1",
          random_skill_count: "6",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1013",
          path: "prefabs/role/enemy12",
          ultimate_id: "3002",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|2,1083|5,1064|1",
          random_skill_count: "6",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1014",
          path: "prefabs/role/enemy13",
          ultimate_id: "3013",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|2,1083|6,1064|2",
          random_skill_count: "7",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1015",
          path: "prefabs/role/enemy01",
          ultimate_id: "3001",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|3,1083|6,1064|3",
          random_skill_count: "7",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1016",
          path: "prefabs/role/enemy02",
          ultimate_id: "3002",
          prologueMessages: "2004",
          defeatMessages: "2005",
          victoryMessages: "2006",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|3,1083|7,1064|4",
          random_skill_count: "8",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1017",
          path: "prefabs/role/enemy03",
          ultimate_id: "3003",
          prologueMessages: "2007|2008",
          defeatMessages: "2009",
          victoryMessages: "2010",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|3,1083|8,1064|4",
          random_skill_count: "8",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1018",
          path: "prefabs/role/enemy04",
          ultimate_id: "3004",
          prologueMessages: "2011|2012",
          defeatMessages: "2013",
          victoryMessages: "2014",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|3,1083|9,1064|5",
          random_skill_count: "9",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1019",
          path: "prefabs/role/enemy05",
          ultimate_id: "3005",
          prologueMessages: "2015",
          defeatMessages: "2016",
          victoryMessages: "2017",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|4,1083|10,1064|5",
          random_skill_count: "10",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1020",
          path: "prefabs/role/boss02",
          ultimate_id: "2002",
          prologueMessages: "2028",
          defeatMessages: "2029",
          victoryMessages: "2030",
          magazine: "1001",
          strength: "150",
          energy_recovery: "160",
          basic_hp: "35000",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1012|10,1086|5",
          random_skill_count: "0",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1021",
          path: "prefabs/role/enemy06",
          ultimate_id: "3006",
          prologueMessages: "2018",
          defeatMessages: "2019",
          victoryMessages: "2020",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|5,1083|14,1064|6",
          random_skill_count: "12",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1022",
          path: "prefabs/role/enemy07",
          ultimate_id: "3007",
          prologueMessages: "2021",
          defeatMessages: "2022",
          victoryMessages: "2023",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|5,1083|15,1064|6",
          random_skill_count: "13",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1023",
          path: "prefabs/role/enemy08",
          ultimate_id: "3007",
          prologueMessages: "2034",
          defeatMessages: "2035",
          victoryMessages: "2036",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|6,1083|17,1064|6",
          random_skill_count: "14",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1024",
          path: "prefabs/role/enemy09",
          ultimate_id: "3009",
          prologueMessages: "2037|2038",
          defeatMessages: "2039",
          victoryMessages: "2040",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|6,1083|18,1064|7",
          random_skill_count: "15",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1025",
          path: "prefabs/role/enemy10",
          ultimate_id: "3006",
          prologueMessages: "2041",
          defeatMessages: "2042",
          victoryMessages: "2043",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|7,1083|21,1064|8",
          random_skill_count: "16",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1026",
          path: "prefabs/role/enemy11",
          ultimate_id: "3011",
          prologueMessages: "2044",
          defeatMessages: "2045",
          victoryMessages: "2046",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|8,1083|22,1064|8",
          random_skill_count: "17",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1027",
          path: "prefabs/role/enemy12",
          ultimate_id: "3002",
          prologueMessages: "2047",
          defeatMessages: "2048",
          victoryMessages: "2049",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|9,1083|25,1064|8",
          random_skill_count: "18",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1028",
          path: "prefabs/role/enemy13",
          ultimate_id: "3013",
          prologueMessages: "2050",
          defeatMessages: "2051",
          victoryMessages: "2052",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|9,1083|28,1064|9",
          random_skill_count: "19",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1029",
          path: "prefabs/role/enemy01",
          ultimate_id: "3001",
          prologueMessages: "2001",
          defeatMessages: "2003",
          victoryMessages: "2002",
          magazine: "1001,1001,1001,1001,1001",
          strength: "90",
          energy_recovery: "160",
          basic_hp: "3600",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|10,1083|30,1064|9",
          random_skill_count: "20",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        }, {
          id: "1030",
          path: "prefabs/role/boss03",
          ultimate_id: "2003",
          prologueMessages: "2031",
          defeatMessages: "2032",
          victoryMessages: "2033",
          magazine: "1001,1001,1001,1001,1001",
          strength: "150",
          energy_recovery: "160",
          basic_hp: "50000",
          energy_max: "1000",
          critical_damage: "100",
          reflect_damage: "0",
          hp_regeneration: "0",
          armor: "30",
          healing_boost: "0",
          attack_speed: "100",
          critical_rate: "0",
          ultimate_ability_critical_rate: "0",
          ultimate_ability_dodge: "0",
          amplified_damage: "0",
          dodge: "0",
          ultimate_ability_damage: "0",
          reflect_damage_count: "0",
          income: "30",
          discount: "0",
          skills: "1001|5,1012|1,1095|10,1123|10",
          random_skill_count: "0",
          stamina_max: "",
          stamina_recovery: "",
          skill_reroll_count: "",
          shop_restock_count: "",
          raid_trash_coin: "",
          raid_boss_coin: ""
        } ]
      }
    });
    module.exports = BasicAttributes;
    cc._RF.pop();
  }, {} ],
  BasketAnimatorSpine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5a4f8zRAFVHxJtSB+SI5ZS5", "BasketAnimatorSpine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorSpine_1 = require("../../animator/AnimatorSpine");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var BasketAnimatorSpine = function(_super) {
      __extends(BasketAnimatorSpine, _super);
      function BasketAnimatorSpine() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.onAttackComplete = null;
        return _this;
      }
      BasketAnimatorSpine.prototype.initData = function(_roleData) {
        this._roleData = _roleData;
      };
      BasketAnimatorSpine.prototype.playAnimation = function(animName, loop) {
        if (animName) {
          var level = this.getLevel();
          var name = level + "_" + animName;
          this._spine.setAnimation(0, name, loop);
        } else this._spine.clearTrack(0);
      };
      BasketAnimatorSpine.prototype.getLevel = function() {
        var level = 1;
        this._roleData && (level = Math.ceil(this._roleData.data.bullets.length / 6));
        level = level > 3 ? 3 : level;
        return level;
      };
      BasketAnimatorSpine = __decorate([ ccclass ], BasketAnimatorSpine);
      return BasketAnimatorSpine;
    }(AnimatorSpine_1.default);
    exports.default = BasketAnimatorSpine;
    cc._RF.pop();
  }, {
    "../../animator/AnimatorSpine": "AnimatorSpine"
  } ],
  BattleConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "615e3AJy2pDn4p8juOUBh/+", "BattleConfig");
    "use strict";
    var BattleConfig = cc.Class({
      extends: cc.Component,
      statics: {
        HEART_BEAT: 100,
        HEART_BEAT_ONE_SECOND: 1e3,
        HEART_BEAT_ONE_MINUTE: 6e4,
        HP_REGENERATION_INTERVAL: 5,
        ENERGY_REGENERATION_INTERVAL: 5,
        FIRE_ULTIMATE_ABILITY_INTERVAL: .65,
        ICE_BULLET_DURATION: 3
      },
      properties: {},
      start: function start() {}
    });
    module.exports = BattleConfig;
    cc._RF.pop();
  }, {} ],
  BattlePageView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f6b26Px+bdGh68C6wJwWwfD", "BattlePageView");
    "use strict";
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        chapterTitleNode: {
          type: cc.Node,
          default: null
        },
        bestLevelNode: {
          type: cc.Node,
          default: null
        },
        roleRootNode: {
          type: cc.Node,
          default: null
        },
        _roleView: null
      },
      onAdded: function onAdded(args) {
        Global.utils.logMessage("BattleView onAdded:", args);
        return true;
      },
      onEnable: function onEnable() {
        if (this._roleView) {
          this._roleView.run();
          cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ScrollBackground, {
            scrollFlag: true
          });
        } else {
          this.roleRootNode.removeAllChildren();
          var rolePreb = Global.res.getRes(Global.roleData.basicConfig.path);
          var role = cc.instantiate(rolePreb);
          this.roleRootNode.addChild(role);
          var roleView = this._roleView = role.getComponent("RoleView");
          roleView.updateData(this, Global.roleData);
          roleView.hideBar();
          setTimeout(function() {
            roleView && roleView.run();
            cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ScrollBackground, {
              scrollFlag: true
            });
          }, 500);
        }
        this.chapterTitleNode.getComponent("RichTextUpdater").setContent("chapter_title_" + Global.chapterManager.curChapter);
        this.bestLevelNode.getComponent("RichTextUpdater").setContent("homepage_bestLevel", 0);
      },
      onClickSettingsBtn: function onClickSettingsBtn() {
        Global.audio.playEffect("audio/click");
        var uiArgs = {
          belongsToCT: gameConfig.CONTROLS.BATTLE_CT
        };
        Global.gui.open(gameConfig.UIID.SettingsPanel, uiArgs);
      },
      onClickEmailBtn: function onClickEmailBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.open(gameConfig.UIID.MailPanel);
      },
      onClickSigninBtn: function onClickSigninBtn() {
        Global.audio.playEffect("audio/click");
        var uiArgs = {};
        Global.gui.open(gameConfig.UIID.SigninPanel, uiArgs);
      },
      onClickTasksBtn: function onClickTasksBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.open(gameConfig.UIID.TaskPanel);
      },
      onClickPCardBtn: function onClickPCardBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.open(gameConfig.UIID.VIP);
      },
      onClickRaidBtn: function onClickRaidBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.open(gameConfig.UIID.PassiveHarvestingPanel);
      },
      onClickMaxBtn: function onClickMaxBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.toast("\u529f\u80fd\u5f00\u53d1\u4e2d...");
      },
      onClickStartBtn: function onClickStartBtn() {
        Global.audio.playEffect("audio/click");
        if (!(Global.roleData.currentStamina >= 5)) {
          Global.gui.toast("\u4f53\u529b\u4e0d\u8db3...");
          return;
        }
        Global.roleData.updateStamina(-5);
        this.closeUI();
      },
      onClickGiftBtn: function onClickGiftBtn(target, data) {
        Global.audio.playEffect("audio/click");
        parseInt(data);
        Global.gui.toast("\u529f\u80fd\u5f00\u53d1\u4e2d...");
      },
      closeUI: function closeUI() {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
             case 0:
              Global.gui.remove(gameConfig.UIID.HomePagePanel);
              Global.gui.remove(gameConfig.UIID.BattlePagePanel);
              _context.next = 4;
              return Global.gui.openAsync(gameConfig.UIID.BattlePanel);

             case 4:
             case "end":
              return _context.stop();
            }
          }, _callee);
        }))();
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  BattleView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c19a5dQGe5D75cGDvWJlYno", "BattleView");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        roleRootNode: {
          type: cc.Node,
          default: null
        },
        roleInfoLab: {
          type: cc.Label,
          default: null
        },
        autoRoleRootNode: {
          type: cc.Node,
          default: null
        },
        autoRoleInfoLab: {
          type: cc.Label,
          default: null
        },
        carEffectRootNode: {
          type: cc.Node,
          default: null
        },
        effectRootNode: {
          type: cc.Node,
          default: null
        },
        debugNode: {
          type: cc.Node,
          default: null
        },
        _roleView: null,
        _autoRoleView: null,
        _gameOver: false,
        _marketTime: 0,
        _carNode: null,
        _isMoveCar: false
      },
      onEnable: function onEnable() {
        this.reset();
        this.jumpTo(Global.chapterManager.curChapter, Global.levelManager.curLevel, true);
        cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ScrollBackground, {
          scrollFlag: false
        });
        Global.gui.remove(gameConfig.UIID.TopUI);
      },
      jumpTo: function jumpTo(chapter, level, resetFlag) {
        void 0 === resetFlag && (resetFlag = false);
        Global.utils.logMessage("\u3010\u5f53\u524d\u4e3a\u7b2c" + (chapter + 1) + "\u7ae0\uff0c\u7b2c" + (level + 1) + "\u5173\u3011");
        Global.levelManager.curLevel = level;
        cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ChangeScrollBackground, {
          chapter: chapter,
          level: level
        });
        var roleData, autoRoleData;
        if (this._roleView) roleData = this._roleView._roleData; else {
          roleData = Global.roleData;
          this._roleView = this.createRole(this.roleRootNode, roleData.roleId);
          this._roleView.direction = gameConfig.DIRECTION_ENUM.RIGHT;
        }
        true;
        var levelData = Global.levelManager.getLevelDataByLevel(level);
        autoRoleData = Global.roleManager.generateRoleData(levelData.roleId);
        this._autoRoleView = this.createRole(this.autoRoleRootNode, autoRoleData.roleId);
        this._autoRoleView.direction = gameConfig.DIRECTION_ENUM.LEFT;
        var visibleSize = cc.view.getVisibleSize();
        var speed = 5;
        var scrollBg = Global.gui.get(gameConfig.UIID.ScrollBackgroundPanel);
        scrollBg && (speed = scrollBg.getComponent("ScrollBackgroundView").getBackGroundSpeed());
        var walkingTime = levelData.isBoss ? gameConfig.WALKING_TIME.BOSS : gameConfig.WALKING_TIME.MONSTER;
        var randomX = 60 * walkingTime * speed;
        var posX = Math.floor(visibleSize.width / 2 - this.autoRoleRootNode.x + randomX);
        this._autoRoleView.node.setPosition(posX, 0);
        resetFlag && roleData.resetAll();
        roleData.setEnemy(autoRoleData);
        autoRoleData.setEnemy(roleData);
        roleData.getCurrentProperties();
        autoRoleData.getCurrentProperties();
        this._roleView.updateData(this, roleData);
        this._autoRoleView.updateData(this, autoRoleData);
        this.addGUI();
        this._roleView.hideBar();
        this._autoRoleView.hideBar();
        this._roleView._roleData.fireUltimateAbilityCallback = this.fireUltimateAbilityCallback.bind(this, this._roleView, this._autoRoleView);
        this._autoRoleView._roleData.fireUltimateAbilityCallback = this.fireUltimateAbilityCallback_Enemy2Player.bind(this, this._autoRoleView, this._roleView);
        this._roleView._roleData.fireBulletsFromEventCallback = this.fireBulletsFromEventCallback.bind(this);
        this._autoRoleView._roleData.fireBulletsFromEventCallback = this.fireBulletsFromEventCallback.bind(this);
        this._roleView._roleData.specialSkillCallback = this.roleView_specialSkillCallback.bind(this);
        this._autoRoleView._roleData.specialSkillCallback = this.autoRoleView_specialSkillCallback.bind(this);
        this._roleView._roleData.gameOverCallback = this.gameOverCallback.bind(this);
        this._autoRoleView._roleData.gameOverCallback = this.gameOverCallback.bind(this);
        this._roleView._roleData.initProgressBarCallback = this.initProgressBarCallback.bind(this);
        this._autoRoleView._roleData.initProgressBarCallback = this.initProgressBarCallback_autoView.bind(this);
      },
      initProgressBarCallback: function initProgressBarCallback() {
        this._roleView.initProgressBar();
      },
      initProgressBarCallback_autoView: function initProgressBarCallback_autoView() {
        this._autoRoleView.initProgressBar();
      },
      addGUI: function addGUI() {
        var uiArgs = {
          controls: gameConfig.CONTROLS.BATTLE_CT,
          roleView: this._roleView,
          autoRoleView: this._autoRoleView,
          checkProgress: true
        };
        Global.gui.has(gameConfig.UIID.GuiPanel) ? Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData(uiArgs) : Global.gui.open(gameConfig.UIID.GuiPanel, uiArgs);
      },
      gameOverCallback: function gameOverCallback(_targetData) {
        this.stopFight(_targetData.roleId != this._roleView._roleData.roleId);
      },
      createRole: function createRole(parent, roleId) {
        Global.utils.logMessage("\u521b\u5efa\u65b0\u89d2\u8272 " + roleId);
        var basicData = Global.basicAttributesManager.getConfigByID(roleId);
        var rolePreb = Global.res.getRes(basicData.path);
        var role = cc.instantiate(rolePreb);
        parent.addChild(role);
        var roleView = role.getComponent("RoleView");
        return roleView;
      },
      onAttackComplete: function onAttackComplete(fromRoleView) {
        if (this._gameOver) return;
        var bulletList = fromRoleView.getNextBullet();
        this.fire(bulletList);
      },
      fire: function fire(bullets) {
        var _this = this;
        if (this._gameOver || !bullets) return;
        var _loop = function _loop(index) {
          var bulletData = bullets[index];
          var fromRoleView = bulletData.fromData.node;
          var targetRoleView = bulletData.targetData.node;
          var bulletNode = Global.poolManager.get(gameConfig.POOLMANAGER_TYPE.bullet.key);
          if (bulletNode) {
            var fworldPos = fromRoleView.getAreaLaunchPosition();
            var fnodePos = _this.effectRootNode.convertToNodeSpaceAR(fworldPos);
            var _tworldPos = targetRoleView.getReceivePositon();
            var tnodePos = _this.effectRootNode.convertToNodeSpaceAR(_tworldPos);
            bulletNode.setPosition(fnodePos);
            bulletNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.LOW;
            _this.effectRootNode.addChild(bulletNode);
            var bullet = bulletNode.getComponent("Bullet");
            bullet.initData(bulletData, {
              hasEffect: true
            });
            var roleHeight = fromRoleView.areaRootNode.height;
            var cpX = 0;
            var cpY = roleHeight + Global.utils.getRandomNumber(200, 500);
            if (fromRoleView._roleData.roleId == targetRoleView._roleData.roleId) {
              cpX = fnodePos.x;
              cpY = roleHeight + Global.utils.getRandomNumber(400, 600);
            }
            bullet.shoot({
              startPos: fnodePos,
              controlPos: new cc.Vec3(cpX, cpY, 0),
              endPos: tnodePos,
              laps: bulletData.bulletConfig.laps,
              fromLeft: bulletData.fromData.roleId == _this._roleView._roleData.roleId
            }, function(bData) {
              if (this._gameOver) return;
              var damage = fromRoleView._roleData.hitByBullet(bData);
              if (damage) {
                if ("miss" == damage) this.playValueAnimation(damage, _tworldPos); else for (var damageType in damage) {
                  var item = damage[damageType];
                  item.damageType = damageType;
                  if (item.damageType == EnumType.BULLET_DAMAGE_TYPE.BLEED || item.damageType == EnumType.BULLET_DAMAGE_TYPE.ATTACK_SPEED) continue;
                  damageType == EnumType.BULLET_DAMAGE_TYPE.ENERGY_BACK, this.playValueAnimation(item, _tworldPos);
                }
                this._gameOver || targetRoleView.showBoom();
              }
            }.bind(_this));
          }
        };
        for (var index = 0; index < bullets.length; index++) _loop(index);
      },
      fireUltimateAbilityCallback_Enemy2Player: function fireUltimateAbilityCallback_Enemy2Player(fromRoleView, targetRoleView) {
        var self = this;
        var curLevel = Global.levelManager.getCurrentLevel();
        var levelData = Global.levelManager.getLevelDataByLevel(curLevel);
        if (levelData.isBoss) {
          fromRoleView.ultra();
          fromRoleView._roleAnimator.trackEventCallBack = function(trackEntry, event) {
            "Shoot" == event.data.name && self.fireUltimateAbilityCallback(fromRoleView, targetRoleView);
          };
        } else self.fireUltimateAbilityCallback(fromRoleView, targetRoleView);
      },
      fireUltimateAbilityCallback: function fireUltimateAbilityCallback(fromRoleView, targetRoleView) {
        var _this2 = this;
        if (this._gameOver) return;
        var curUltimateType = fromRoleView._roleData.basicConfig.ultimate_id;
        var ultimateAniName = "Ultra";
        var totalAmount = 1;
        var ultimateType = fromRoleView._roleData.getCurrentUltimateAbilityId();
        curUltimateType = ultimateType || curUltimateType;
        if (curUltimateType == EnumType.ULTIMATE_ABILITY_TYPE.TYPE_3) if (fromRoleView._roleData.ownSkills.hasOwnProperty("1230")) {
          totalAmount = 4;
          ultimateAniName = "Ultra_4";
        } else if (fromRoleView._roleData.ownSkills.hasOwnProperty("1229")) {
          totalAmount = 3;
          ultimateAniName = "Ultra_3";
        }
        var ultimatePreb;
        var ultimatePath = "prefabs/effects/ultimate_1001";
        try {
          ultimatePath = gameConfig.PRELOADCONFIG["ultimate_" + curUltimateType].path;
        } catch (error) {
          console.warn("\u89d2\u8272" + fromRoleView._roleData.data.id + "\u4f7f\u7528\u901a\u7528\u5927\u62db");
        }
        ultimatePreb = Global.res.getRes(ultimatePath);
        var ultimateNode = cc.instantiate(ultimatePreb);
        var fworldPos = fromRoleView.node.convertToWorldSpaceAR(cc.v2(0, 0));
        var fnodePos = this.effectRootNode.convertToNodeSpaceAR(fworldPos);
        ultimateNode.setPosition(fnodePos);
        ultimateNode.setScale(fromRoleView.node.scaleX, 1);
        ultimateNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.MID;
        this.effectRootNode.addChild(ultimateNode);
        var spineBase = ultimateNode.getComponent("SpineBase");
        var showEffect = function showEffect(damage) {
          if ("ultimateAbilityMiss" == damage) _this2.playValueAnimation(damage, tworldPos); else if (damage && damage.value) {
            var perValue = Math.floor(damage.value / totalAmount);
            _this2.playValueAnimation({
              damageType: "Ultimate",
              isCrit: damage.damageType & EnumType.BULLET_DAMAGE_TYPE.CRIT,
              value: perValue
            }, targetRoleView.getValuePositon());
          }
        };
        spineBase.animationCallBack = function() {
          ultimateNode.removeFromParent();
        };
        var damage = null;
        spineBase.trackEventCallBack = function(trackEntry, event) {
          if ("Hit_0" == event.data.name || "Hit" == event.data.name) {
            if (this._gameOver) return;
            damage = fromRoleView._roleData.hitByUltimateAbility(fromRoleView._roleData.ultimateAbility);
            var ultimateBoomPreb;
            var boomPath = "prefabs/effects/ultimate_boom_1001";
            try {
              boomPath = gameConfig.PRELOADCONFIG["ultimate_boom_" + curUltimateType].path;
            } catch (error) {
              console.warn("\u89d2\u8272" + fromRoleView._roleData.data.id + "\u4f7f\u7528\u901a\u7528\u5927\u62db\u7206\u70b9");
            }
            ultimateBoomPreb = Global.res.getRes(boomPath);
            var _tworldPos2;
            if (ultimateBoomPreb) {
              var ultimateBoomNode = cc.instantiate(ultimateBoomPreb);
              _tworldPos2 = targetRoleView.node.convertToWorldSpaceAR(cc.v2(0, 0));
              var tnodePos = this.effectRootNode.convertToNodeSpaceAR(_tworldPos2);
              ultimateBoomNode.setPosition(tnodePos);
              ultimateBoomNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.MID;
              this.effectRootNode.addChild(ultimateBoomNode);
              var spineBaseEffect = ultimateBoomNode.getComponent("SpineBase");
              spineBaseEffect.animationCallBack = function() {
                ultimateBoomNode.removeFromParent();
              };
              spineBaseEffect && spineBaseEffect.playAnimation(ultimateAniName, false);
            }
            showEffect(damage);
            targetRoleView.updateAllUI();
          } else if (damage && ("Hit_1" == event.data.name || "Hit_2" == event.data.name || "Hit_3" == event.data.name)) {
            showEffect(damage);
            targetRoleView.updateAllUI();
          }
        }.bind(this);
        spineBase && spineBase.playAnimation(ultimateAniName, false);
      },
      fireBulletsFromEventCallback: function fireBulletsFromEventCallback(bullets) {
        setTimeout(function() {
          this.fire(bullets);
        }.bind(this), 100);
      },
      roleView_specialSkillCallback: function roleView_specialSkillCallback(type, value) {
        this.specialSkillCallback(this._roleView, this._autoRoleView, type, value);
      },
      autoRoleView_specialSkillCallback: function autoRoleView_specialSkillCallback(type, value) {
        this.specialSkillCallback(this._autoRoleView, this._roleView, type, value);
      },
      specialSkillCallback: function specialSkillCallback(fromRoleView, targetRoleView, type, value) {
        var fromLeft = fromRoleView._roleData.roleId == this._roleView._roleData.roleId;
        var specialPreb;
        if ("damage" == type) specialPreb = Global.res.getRes(gameConfig.PRELOADCONFIG.car.path); else if ("stun" == type) {
          if (0 == value) return;
          specialPreb = Global.res.getRes(gameConfig.PRELOADCONFIG.car.path);
        }
        if (specialPreb) {
          var specialNode = cc.instantiate(specialPreb);
          var fworldPos = fromRoleView.node.convertToWorldSpaceAR(cc.v2(0, 0));
          var fnodePos = this.effectRootNode.convertToNodeSpaceAR(fworldPos);
          specialNode.setPosition(fnodePos);
          specialNode.setScale(fromLeft ? -.5 : .5, .5);
          specialNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.MID;
          this.effectRootNode.addChild(specialNode);
          var spineBase = specialNode.getComponent("SpineBase");
          spineBase.animationCallBack = function() {
            specialNode.removeFromParent();
          };
          spineBase.trackEventCallBack = function(trackEntry, event) {
            if ("Shop" == event.data.name) {
              "damage" == type && this.playValueAnimation({
                damageType: "specialSkill",
                value: value
              }, targetRoleView.getValuePositon());
              fromRoleView._roleData.specialSkilHit(type, value);
            }
          }.bind(this);
          spineBase && spineBase.playAnimation("animation", false);
        }
      },
      showRogueItemEffect: function showRogueItemEffect(_skillId, _worldPos, callback) {
        Global.utils.logMessage(_skillId);
        var localPos = Global.gui.effect.convertToNodeSpaceAR(_worldPos);
        var spriteNode = new cc.Node("NewSprite");
        var sprite = spriteNode.addComponent(cc.Sprite);
        spriteNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.HIGH;
        Global.gui.effect.addChild(spriteNode);
        spriteNode.setPosition(localPos.x, localPos.y);
        var pathIcon = "icons/skillIcons/skill_" + _skillId;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          res && (sprite.spriteFrame = res);
        });
        var backpackBtn = Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").backpackBtn;
        var worldPos_btn = backpackBtn.parent.convertToWorldSpaceAR(backpackBtn.getPosition());
        var localPos_btn = Global.gui.effect.convertToNodeSpaceAR(worldPos_btn);
        var self = this;
        cc.tween(spriteNode).delay(.3).to(.5, {
          position: localPos_btn
        }, {
          easing: "quadIn"
        }).to(.2, {
          opacity: 0
        }).call(function() {
          spriteNode.removeFromParent();
          spriteNode.destroy();
          self.updateAllUI();
          callback && callback();
        }).start();
      },
      playValueAnimation: function playValueAnimation(damage, tworldPos, args) {
        var valueNode = Global.poolManager.get(gameConfig.POOLMANAGER_TYPE.valueLabel.key);
        if (valueNode) {
          var nodePos = this.effectRootNode.convertToNodeSpaceAR(tworldPos);
          valueNode.zIndex = "Ultimate" == damage.damageType ? gameConfig.EFFECT_ZINDEX_TYPE.HIGH : gameConfig.EFFECT_ZINDEX_TYPE.MID;
          valueNode.setPosition(nodePos);
          this.effectRootNode.addChild(valueNode);
          valueNode.getComponent("ValueLabel").show(damage, args);
        }
      },
      onClickStartBtn: function onClickStartBtn() {
        var _this3 = this;
        this._gameOver = false;
        this.debugNode.active = false;
        var promiseQueue = new Array();
        var promise0 = function promise0() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u6bcf\u7ae0\u8282\u7684\u7b2c\u4e00\u5173\u4e4b\u524d\u5f39\u4e09\u9009\u4e00\u754c\u9762");
            var giftPreb = Global.res.getRes(gameConfig.PRELOADCONFIG.gift.path);
            if (giftPreb) {
              var giftNode = cc.instantiate(giftPreb);
              var fworldPos = _this3.autoRoleRootNode.convertToWorldSpaceAR(cc.v2(0, 0));
              var fnodePos = _this3.effectRootNode.convertToNodeSpaceAR(fworldPos);
              giftNode.setPosition(fnodePos);
              giftNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.MID;
              _this3.effectRootNode.addChild(giftNode);
              giftNode.on(cc.Node.EventType.TOUCH_START, function() {
                giftNode.setScale(.9, .9);
              }, _this3);
              giftNode.on(cc.Node.EventType.TOUCH_END, function() {
                giftNode.setScale(1, 1);
                giftNode.off("touchstart");
                giftNode.off("touchend");
                spineBase && spineBase.playAnimation("Open", false);
              }, _this3);
              giftNode.on(cc.Node.EventType.TOUCH_CANCEL, function() {
                giftNode.setScale(1, 1);
              }, _this3);
              var spineBase = giftNode.getComponent("SpineBase");
              spineBase.trackEventCallBack = function(trackEntry, event) {
                if ("Start" == event.data.name) {
                  giftNode.removeFromParent();
                  var uiArgs = {
                    belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
                    type: gameConfig.ROGUE_PANEL_TYPE.ROGUE,
                    roleData: this._roleView._roleData
                  };
                  var uicallBack = {
                    onRemoved: function onRemoved(node, params) {
                      resolve();
                    }
                  };
                  Global.gui.open(gameConfig.UIID.RoguePanel, uiArgs, uicallBack);
                }
              }.bind(_this3);
              spineBase && spineBase.playAnimation("Gift_Idle", true);
            }
          });
        };
        0 == Global.levelManager.curLevel && promiseQueue.push(promise0);
        var promise1 = function promise1() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u4e3b\u89d2\u8d76\u8def\u4e2d...");
            var curLevel = Global.levelManager.getCurrentLevel();
            var levelData = Global.levelManager.getLevelDataByLevel(curLevel);
            levelData.isBoss && setTimeout(function() {
              Global.utils.logMessage("\u76ee\u6d4b\u5bf9\u65b9\u662f\u5927Boss,\u63d2\u64ad\u4e2a\u906d\u9047\u52a8\u753b\u5427...");
              Global.gui.open(gameConfig.UIID.BossComing);
            }, 1e3);
            setTimeout(function() {
              this._roleView.run();
            }.bind(_this3));
            _this3._isMoveCar = true;
            cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ScrollBackground, {
              scrollFlag: true,
              targetLevel: Global.levelManager.curLevel
            });
            var speed = 5;
            var scrollBg = Global.gui.get(gameConfig.UIID.ScrollBackgroundPanel);
            scrollBg && (speed = scrollBg.getComponent("ScrollBackgroundView").getBackGroundSpeed());
            Global.utils.logMessage("\u53d1\u73b0\u654c\u60c5,\u8ddd\u79bb\u4e3a" + _this3._autoRoleView.node.x + ",\u79fb\u901f\u4e3a" + speed);
            _this3._autoRoleView.moveTo(0, speed, function() {
              Global.utils.logMessage("\u906d\u9047\u654c\u4eba,\u53cc\u65b9\u5bf9\u5cd9\u4e2d...");
              _this3._roleView.idle();
              _this3._isMoveCar = false;
              cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ScrollBackground, {
                scrollFlag: false
              });
              resolve();
            });
          });
        };
        promiseQueue.push(promise1);
        var promise3 = function promise3() {
          return new Promise(function(resolve, reject) {
            var roleId = _this3._autoRoleView._roleData.roleId;
            var basicData = Global.basicAttributesManager.getConfigByID(roleId);
            if ("" != basicData.prologueMessages) {
              Global.utils.logMessage("Boss\u8bed\u8a00\u6311\u8845\u4e2d...");
              _this3._autoRoleView.playDialogueAnimation(basicData.prologueMessages);
            } else Global.utils.logMessage("Boss\u4e00\u8a00\u4e0d\u53d1...");
            resolve();
          });
        };
        promiseQueue.push(promise3);
        var promise4 = function promise4() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u88c5\u5907\u6b66\u5668...");
            _this3._roleView.showBar();
            _this3._autoRoleView.showBar();
            _this3._roleView.showDetailPanel();
            resolve();
          });
        };
        promiseQueue.push(promise4);
        var promise5 = function promise5() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("1s\u540e\u8fdb\u5165\u6218\u6597...");
            setTimeout(resolve, 1e3);
          });
        };
        promiseQueue.push(promise5);
        var promise6 = function promise6() {
          return new Promise(function(resolve, reject) {
            console.warn("\u6218\u524d\u51c6\u5907\u7b2c\u4e00\u8f6e:\u5224\u65ad\u662f\u5426\u62e5\u6709\u76f8\u5173\u5361\u724c\u548c\u6297\u538b\u795e\u5668");
            1;
            console.warn("\u7b2c\u4e00\u8f6e\u65e0\u5361\u724c\u548c\u6297\u538b\u795e\u5668");
            resolve();
          });
        };
        promiseQueue.push(promise6);
        var promise7 = function promise7() {
          return new Promise(function(resolve, reject) {
            console.warn("\u6218\u524d\u51c6\u5907\u7b2c\u4e8c\u8f6e:\u5224\u65ad\u662f\u5426\u62e5\u6709\u76f8\u5173\u5361\u724c\u548c\u6297\u538b\u795e\u5668");
            1;
            console.warn("\u7b2c\u4e8c\u8f6e\u65e0\u5361\u724c\u548c\u6297\u538b\u795e\u5668");
            resolve();
          });
        };
        promiseQueue.push(promise7);
        var promise8 = function promise8() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u6218\u6597\u6b63\u5f0f\u5f00\u59cb,\u53cc\u65b9\u6076\u6597\u4e2d...");
            _this3.fight();
          });
        };
        promiseQueue.push(promise8);
        Global.utils.runPromiseQueue(promiseQueue);
      },
      keepFighting: function keepFighting() {
        this._roleView._roleData.reborn();
        this._autoRoleView._roleData.currentEnergy = 0;
        this.updateAllUI();
        this._roleView.idle();
        this._autoRoleView.idle();
        this._gameOver = false;
        this.fight();
      },
      fight: function fight() {
        this._roleView.fight();
        this._roleView._roleData.battleStart();
        this._autoRoleView.fight();
        this._autoRoleView._roleData.battleStart();
        cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.BattleTime, {
          cleanTime: true,
          battleTimeFlag: true
        });
      },
      stopFight: function stopFight(result) {
        var _this4 = this;
        this._gameOver = true;
        result ? this._roleView._roleData.defeatEnemy() : this._autoRoleView._roleData.defeatEnemy();
        this._roleView.stopFight();
        this._autoRoleView.stopFight();
        cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.BattleTime, {
          cleanTime: false,
          battleTimeFlag: false
        });
        var promiseQueue = new Array();
        var curLevel = Global.levelManager.getCurrentLevel();
        var levelData = Global.levelManager.getLevelDataByLevel(curLevel);
        var maxLen = Global.levelManager.levelData.length;
        var promise1 = function promise1() {
          return new Promise(function(resolve, reject) {
            var messages = "";
            Global.utils.logMessage("\u4e3b\u89d2\u8d62\u4e86,Boss\u597d\u50cf\u6709\u8bdd\u8981\u8bf4...");
            var roleId = _this4._autoRoleView._roleData.roleId;
            var basicData = Global.basicAttributesManager.getConfigByID(roleId);
            messages = basicData.defeatMessages;
            if ("" == messages) Global.utils.logMessage("Boss\u6b32\u8a00\u53c8\u6b62,\u76f4\u63a5\u560e\u4e86..."); else {
              Global.utils.logMessage("Boss\u7ec4\u7ec7\u8bdd\u8bf4\u4e2d...");
              _this4._autoRoleView.playDialogueAnimation(messages);
            }
            resolve();
          });
        };
        result && promiseQueue.push(promise1);
        var promise2 = function promise2() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u89e6\u53d1\u6b7b\u4ea1\u52a8\u753b\u548c\u66f4\u65b0\u663e\u793aUI");
            if (result) {
              _this4._roleView.vic();
              _this4._autoRoleView.death();
              Global.utils.logMessage("\u4e3b\u89d2\u8d62\u4e86\uff0c\u76f4\u63a5\u56de\u590d\u5230\u6ee1\u8840\u72b6\u6001");
              _this4._roleView._roleData.resetState();
              _this4.updateAllUI();
            } else {
              _this4._roleView.death();
              _this4._autoRoleView.vic();
            }
            resolve();
          });
        };
        promiseQueue.push(promise2);
        var promise3 = function promise3() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("Boss\u8bf4\u5b8c\u4e86,\u51c6\u5907\u66f4\u65b0\u53cc\u65b9\u72b6\u6001...");
            if (curLevel < maxLen - 1) {
              console.warn("\u91cd\u7f6e\u975e\u6c38\u4e45\u83b7\u5f97\u7684\u5c5e\u6027\uff0c\u89e6\u53d1\u76f8\u5173\u5361\u724c\u548c\u6297\u538b\u795e\u5668\uff08\u5982\u679c\u5f53\u524d\u4e3a\u6700\u540e\u4e00\u5173\u5219\u4e0d\u89e6\u53d1\uff09");
              console.warn("\u64ad\u6218\u6597\u7ed3\u675f\u7684UI\u52a8\u753b\uff0c\u65f6\u95f4\u4e3a1S\uff08\u5982\u679c\u5f53\u524d\u4e3a\u6700\u540e\u4e00\u5173\u5219\u4e0d\u89e6\u53d1\uff09");
            }
            resolve();
          });
        };
        result && promiseQueue.push(promise3);
        var promise4 = function promise4() {
          return new Promise(function(resolve, reject) {
            var couponPreb = Global.res.getRes(gameConfig.PRELOADCONFIG.coupon.path);
            if (couponPreb) {
              var couponNode = cc.instantiate(couponPreb);
              var fworldPos = _this4.autoRoleRootNode.convertToWorldSpaceAR(cc.v2(0, 0));
              var fnodePos = _this4.effectRootNode.convertToNodeSpaceAR(fworldPos);
              couponNode.setPosition(fnodePos);
              couponNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.MID;
              _this4.effectRootNode.addChild(couponNode);
              var spineBase = couponNode.getComponent("SpineBase");
              spineBase.animationCallBack = function() {
                couponNode.removeFromParent();
              };
              spineBase.trackEventCallBack = function(trackEntry, event) {
                var _this5 = this;
                if ("Clean" == event.data.name) ; else if ("Start" == event.data.name) {
                  var uiArgs = {
                    belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
                    type: gameConfig.ROGUE_PANEL_TYPE.SHENQI,
                    roleData: this._roleView._roleData
                  };
                  var uicallBack = {
                    onRemoved: function onRemoved(node, params) {
                      _this5.updateAllUI();
                      resolve();
                    }
                  };
                  Global.gui.open(gameConfig.UIID.RoguePanel, uiArgs, uicallBack);
                }
              }.bind(_this4);
              spineBase && spineBase.playAnimation("Coupon", false);
            }
          });
        };
        result && levelData.isBoss && curLevel < maxLen - 1 && promiseQueue.push(promise4);
        var promise5 = function promise5() {
          return new Promise(function(resolve, reject) {
            _this4._roleView._roleData.addMoney();
            if (curLevel == maxLen - 1) {
              Global.utils.logMessage("\u5f53\u524d\u5173\u662f\u672c\u7ae0\u8282\u7684\u6700\u540e\u4e00\u5173,\u76f4\u63a5\u5f39\u80dc\u5229\u7ed3\u7b97\u7a97\u53e3");
              var uiArgs = {
                gameResult: gameConfig.GAME_RESULT_TYPE.VICTORY,
                belongsToCT: gameConfig.CONTROLS.BATTLE_CT
              };
              var uicallBack = {
                onRemoved: function onRemoved(node, params) {
                  resolve();
                }
              };
              Global.gui.open(gameConfig.UIID.ResultPanel, uiArgs, uicallBack);
            } else {
              Global.utils.logMessage("\u5f53\u524d\u5173\u4e0d\u662f\u672c\u7ae0\u8282\u7684\u6700\u540e\u4e00\u5173,\u5148\u64ad\u653e\u98de\u5238\u52a8\u753b,\u7136\u540e\u64ad\u653e\u5f39\u4e09\u9009\u4e00\u754c\u9762");
              var couponPreb = Global.res.getRes(gameConfig.PRELOADCONFIG.coupon.path);
              if (couponPreb) {
                var couponNode = cc.instantiate(couponPreb);
                var fworldPos = _this4.autoRoleRootNode.convertToWorldSpaceAR(cc.v2(0, 0));
                var fnodePos = _this4.effectRootNode.convertToNodeSpaceAR(fworldPos);
                couponNode.setPosition(fnodePos);
                couponNode.zIndex = gameConfig.EFFECT_ZINDEX_TYPE.MID;
                _this4.effectRootNode.addChild(couponNode);
                var spineBase = couponNode.getComponent("SpineBase");
                spineBase.animationCallBack = function() {
                  couponNode.removeFromParent();
                };
                spineBase.trackEventCallBack = function(trackEntry, event) {
                  var _this6 = this;
                  if ("Clean" == event.data.name) {
                    if (result) {
                      cc.tween(this._autoRoleView.node).to(.5, {
                        opacity: 0
                      }).start();
                      this._autoRoleView.hideBar();
                    }
                  } else if ("Start" == event.data.name) {
                    var uiArgs = {
                      belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
                      type: gameConfig.ROGUE_PANEL_TYPE.ROGUE,
                      roleData: this._roleView._roleData
                    };
                    var uicallBack = {
                      onRemoved: function onRemoved(node, params) {
                        _this6.updateAllUI();
                        resolve();
                      }
                    };
                    Global.gui.open(gameConfig.UIID.RoguePanel, uiArgs, uicallBack);
                  }
                }.bind(_this4);
                spineBase && spineBase.playAnimation("Coupon", false);
              }
            }
          });
        };
        result && promiseQueue.push(promise5);
        var promise6 = function promise6() {
          return new Promise(function(resolve, reject) {
            if (levelData.process == gameConfig.BATTLE_EVENTS_ENUM.EVENT) {
              Global.utils.logMessage("\u672c\u5173\u5361\u6709\u6307\u5b9a\u4e8b\u4ef6\uff0c\u64ad\u653e\u624b\u673a\u52a8\u753b\uff0c\u7136\u540e\u5f39\u51fa\u4e8b\u4ef6\u7a97\u53e3");
              var smallPhonePreb = Global.res.getRes(gameConfig.PRELOADCONFIG.smallPhone.path);
              if (smallPhonePreb) {
                var smallPhoneNode = cc.instantiate(smallPhonePreb);
                Global.gui.effect.addChild(smallPhoneNode);
                var spineBase = smallPhoneNode.getComponent("SpineBase");
                spineBase.animationCallBack = function() {
                  smallPhoneNode.removeFromParent();
                };
                spineBase.trackEventCallBack = function(trackEntry, event) {
                  var _this7 = this;
                  if ("Start" == event.data.name) {
                    var uiArgs = {
                      belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
                      roleData: this._roleView._roleData
                    };
                    var uicallBack = {
                      onRemoved: function onRemoved(node, params) {
                        Global.utils.logMessage("EventsPanel onRemoved");
                        setTimeout(function() {
                          this.passTheLevel();
                        }.bind(_this7), 3e3);
                      }
                    };
                    Global.gui.open(gameConfig.UIID.EventsPanel, uiArgs, uicallBack);
                  }
                }.bind(_this4);
                spineBase && spineBase.playAnimation("S_Phone", false);
              }
            } else if (levelData.process == gameConfig.BATTLE_EVENTS_ENUM.MARKET) {
              Global.utils.logMessage("\u672c\u5173\u5361\u4e3a\u5546\u57ce\u4e8b\u4ef6,\u64ad\u653e\u5546\u57ce\u52a8\u753b\uff0c\u7136\u540e\u5f39\u51fa\u5546\u57ce\u7a97\u53e3");
              var carPreb = Global.res.getRes(gameConfig.PRELOADCONFIG.car.path);
              if (carPreb) {
                _this4._carNode && _this4._carNode.removeFromParent();
                var carNode = _this4._carNode = cc.instantiate(carPreb);
                _this4.carEffectRootNode.addChild(carNode);
                var _spineBase = carNode.getComponent("SpineBase");
                _spineBase.trackEventCallBack = function(trackEntry, event) {
                  var _this8 = this;
                  if ("Shop" == event.data.name) {
                    var uiArgs = {
                      belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
                      marketCount: this._marketTime++,
                      roleData: this._roleView._roleData
                    };
                    var uicallBack = {
                      onRemoved: function onRemoved(node, params) {
                        Global.utils.logMessage("MarketPanel onRemoved");
                        setTimeout(function() {
                          this.passTheLevel();
                        }.bind(_this8), 3e3);
                      }
                    };
                    Global.gui.open(gameConfig.UIID.MarketPanel, uiArgs, uicallBack);
                  }
                }.bind(_this4);
                _spineBase && _spineBase.playAnimation("animation", false);
              }
            } else {
              Global.utils.logMessage("\u672c\u5173\u5361\u65e0\u4e8b\u4ef6\uff0c\u8fd4\u56de\u5230\u6d41\u7a0b\u4e00");
              setTimeout(function() {
                this.passTheLevel();
              }.bind(_this4), 3e3);
            }
          });
        };
        result && promiseQueue.push(promise6);
        var promise7 = function promise7() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u4e3b\u89d2\u95ef\u5173\u5931\u8d25\uff0c\u5f39\u51fa\u590d\u6d3b\u7a97\u53e3");
            var roleView = _this4._roleView;
            var autoRoleView = _this4._autoRoleView;
            var uiArgs = {
              belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
              roleData: {
                roleId: autoRoleView._roleData.roleId,
                data: {
                  bullets: autoRoleView._roleData.data.bullets,
                  basic_hp: autoRoleView._roleData.data.basic_hp,
                  energy_max: autoRoleView._roleData.data.energy_max
                },
                currentHp: autoRoleView._roleData.currentHp,
                currentEnergy: autoRoleView._roleData.currentEnergy
              }
            };
            var uicallBack = {
              onRemoved: function onRemoved(node, params) {
                Global.utils.logMessage("RevivePanel onRemoved");
                if (params && params.result) {
                  roleView.rebornSpine.animationCallBack = function() {
                    Global.utils.logMessage("\u91cd\u7f6e\u73a9\u5bb6\u72b6\u6001\uff0c\u7ee7\u7eed\u6218\u6597");
                    this.keepFighting();
                  }.bind(_this4);
                  roleView.rebornSpine.playAnimation("Reborn", false);
                } else {
                  Global.utils.logMessage("\u653e\u5f03\u590d\u6d3b\uff0c\u8df3\u8f6c\u7ed3\u7b97\u754c\u9762");
                  var defeatUiArgs = {
                    gameResult: gameConfig.GAME_RESULT_TYPE.DEFEAT,
                    belongsToCT: gameConfig.CONTROLS.BATTLE_CT
                  };
                  var defeatUicallBack = {
                    onRemoved: function onRemoved(node, params) {
                      Global.utils.logMessage("ResultPanel onRemoved");
                      _this4.gotoHomePage();
                      resolve();
                    }
                  };
                  Global.gui.open(gameConfig.UIID.ResultPanel, defeatUiArgs, defeatUicallBack);
                }
                resolve();
              }
            };
            Global.gui.open(gameConfig.UIID.RevivePanel, uiArgs, uicallBack);
          });
        };
        !result && this._roleView._roleData.rebornCount > 0 && promiseQueue.push(promise7);
        var promise8 = function promise8() {
          return new Promise(function(resolve, reject) {
            Global.utils.logMessage("\u65e0\u590d\u6d3b\u6b21\u6570,\u76f4\u63a5\u5f39\u5931\u8d25");
            var defeatUiArgs = {
              gameResult: gameConfig.GAME_RESULT_TYPE.DEFEAT,
              belongsToCT: gameConfig.CONTROLS.BATTLE_CT
            };
            var defeatUicallBack = {
              onRemoved: function onRemoved(node, params) {
                Global.utils.logMessage("ResultPanel onRemoved");
                _this4.gotoHomePage();
                resolve();
              }
            };
            Global.gui.open(gameConfig.UIID.ResultPanel, defeatUiArgs, defeatUicallBack);
          });
        };
        !result && this._roleView._roleData.rebornCount <= 0 && promiseQueue.push(promise8);
        Global.utils.runPromiseQueue(promiseQueue);
      },
      passTheLevel: function passTheLevel() {
        this.debugNode.active = true;
        this.autoRoleRootNode.removeAllChildren();
        this._roleView.idle();
        this.onClickJumpToBtn();
        cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.BattleTime, {
          cleanTime: true
        });
      },
      gotoHomePage: function gotoHomePage() {
        Global.gui.remove(gameConfig.UIID.BattlePanel);
        Global.gui.remove(gameConfig.UIID.GuiPanel);
        Global.gui.open(gameConfig.UIID.HomePagePanel);
      },
      onClickJumpToBtn: function onClickJumpToBtn(event, step) {
        void 0 === step && (step = 1);
        var tempLevel = Global.levelManager.getCurrentLevel() + parseInt(step);
        if (tempLevel > Global.levelManager.levelData.length - 1) {
          var tempChapter = Global.chapterManager.curChapter + 1;
          if (tempChapter > Global.chapterManager.chapterData.length - 1) {
            Global.gui.toast("\u540e\u7eed\u7ae0\u8282\u5f00\u53d1\u4e2d...");
            Global.levelManager.curLevel = Global.levelManager.levelData.length - 1;
            Global.chapterManager.curChapter = Global.chapterManager.chapterData.length - 1;
          } else {
            Global.levelManager.curLevel = 0;
            Global.chapterManager.curChapter++;
          }
        } else if (tempLevel < 0) {
          var _tempChapter = Global.chapterManager.curChapter - 1;
          if (_tempChapter < 0) {
            Global.levelManager.curLevel = 0;
            Global.chapterManager.curChapter = 0;
          } else {
            Global.levelManager.curLevel = Global.levelManager.levelData.length - 1;
            Global.chapterManager.curChapter--;
          }
        } else Global.levelManager.curLevel = tempLevel;
        this.jumpTo(Global.chapterManager.curChapter, Global.levelManager.curLevel);
      },
      updateAllUI: function updateAllUI() {
        this._roleView._roleData.getCurrentProperties();
        this._autoRoleView._roleData.getCurrentProperties();
        this._roleView.updateAllUI();
        this._autoRoleView.updateAllUI();
      },
      onClickTestBtn: function onClickTestBtn() {
        var uiArgs = {
          belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
          roleData: this._roleView._roleData,
          autoRoleData: this._autoRoleView._roleData
        };
        var uicallBack = {
          onAdded: function onAdded(node, params) {
            Global.utils.logMessage("DebugView onAdded");
          }
        };
        Global.gui.open(gameConfig.UIID.DebugPanel, uiArgs, uicallBack);
      },
      reset: function reset() {
        this.roleRootNode.removeAllChildren();
        this.autoRoleRootNode.removeAllChildren();
        this.effectRootNode.removeAllChildren();
        this._roleView = null;
        this._autoRoleView = null;
        this._gameOver = false;
        this._marketTime = 0;
        this.debugNode.active = true;
        Global.levelManager.curLevel = 0;
      },
      updateRleInfo: function updateRleInfo(roleData, infoLab) {
        roleData || (infoLab.string = "Unknown");
        var info = "";
        for (var key in gameConfig.STATES_CONFIG) if (Object.hasOwnProperty.call(gameConfig.STATES_CONFIG, key)) {
          var stateConfig = gameConfig.STATES_CONFIG[key];
          if (stateConfig.hasOwnProperty("belongTo")) {
            var belongTo = stateConfig.belongTo;
            roleData[belongTo].hasOwnProperty(key) ? info += stateConfig.zh + ":" + (stateConfig.percent ? roleData[belongTo][key] + "%" : 1 * roleData[belongTo][key]) + "\n" : info += stateConfig.zh + ":Unknown\n";
          } else info += stateConfig.zh + ":" + (roleData.hasOwnProperty(key) ? roleData[key] : "Unknown") + "\n";
        }
        infoLab.string = info;
      },
      update: function update(dt) {
        this.updateRleInfo(this._roleView._roleData, this.roleInfoLab);
        this.updateRleInfo(this._autoRoleView._roleData, this.autoRoleInfoLab);
        if (this._isMoveCar) if (this._carNode) {
          this._carNode.x -= 5;
          if (this._carNode.x < -(cc.view.getVisibleSize().width / 2 + 200)) {
            this._carNode.removeFromParent();
            this._carNode = null;
            this._isMoveCar = false;
          }
        } else this._isMoveCar = false;
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  BossComingView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c300bTU0aVAAoFZUc+J6ZDr", "BossComingView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        spine: {
          type: sp.Skeleton,
          default: null
        }
      },
      onEnable: function onEnable() {
        this.spine.setCompleteListener(this.onComplete.bind(this));
        this.spine.setAnimation(0, "Boss_Comming", false);
      },
      onComplete: function onComplete() {
        Global.gui.remove(gameConfig.UIID.BossComing);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  BpEquipItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d41f2/9tL1M2I6tkalOO/xj", "BpEquipItem");
    "use strict";
    var EnumType = require("../../config/EnumType");
    var gameConfig = require("GameConfig");
    var DetailControl = require("DetailControl");
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLab: {
          type: cc.Label,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        groupItemPreb: {
          type: cc.Prefab,
          default: null
        },
        itemPreb: {
          type: cc.Prefab,
          default: null
        }
      },
      initUI: function initUI(name, data, skillType, roleData) {
        this.titleLab.string = name;
        this.content.removeAllChildren();
        var array = [];
        if (skillType == EnumType.SKILL_TYPE.BULLET) {
          if (!data.length) return;
          array = data;
        } else {
          true;
          if (!data.length) return;
          data = data.sort(function(a, b) {
            var rarity = 1 * b.config.rarity - 1 * a.config.rarity;
            return 0 == rarity ? 1 * b.id - 1 * a.id : rarity;
          });
          var tempObj = {};
          for (var index = 0; index < data.length; index++) {
            var skillData = data[index];
            var id = skillData.id;
            if (tempObj.hasOwnProperty(id)) tempObj[id].ownedCount++; else {
              tempObj[id] = {
                ownedCount: 1,
                bulletConfig: skillData.config
              };
              array.push(tempObj[id]);
            }
          }
          console.log("array:");
        }
        var nodeSize = skillType == EnumType.SKILL_TYPE.BULLET ? {
          width: 75,
          height: 110
        } : {
          width: 190,
          height: 190
        };
        var colNum = skillType == EnumType.SKILL_TYPE.BULLET ? 11 : 5;
        var groupItemHeight = skillType == EnumType.SKILL_TYPE.BULLET ? 120 : 190;
        var groupItem;
        for (var _index = 0; _index < array.length; _index++) {
          var tempData = array[_index];
          if (_index % colNum == 0) {
            groupItem = cc.instantiate(this.groupItemPreb);
            this.content.addChild(groupItem);
          }
          var bulletItem = cc.instantiate(this.itemPreb);
          groupItem.addChild(bulletItem);
          groupItem.height = groupItemHeight;
          var detailControl = bulletItem.addComponent(DetailControl);
          detailControl.targetScript = "Bullet";
          detailControl.UIID = gameConfig.UIID.DetailBullet;
          var bullet = bulletItem.getComponent("Bullet");
          bullet && bullet.initData(tempData, {
            roleData: roleData,
            skillType: skillType,
            needBg: skillType !== EnumType.SKILL_TYPE.BULLET,
            nodeSize: nodeSize
          });
        }
      }
    });
    cc._RF.pop();
  }, {
    "../../config/EnumType": "EnumType",
    DetailControl: "DetailControl",
    GameConfig: "GameConfig"
  } ],
  BpStateItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2f48elbhtBEnIeIpDCwit2y", "BpStateItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        icon: {
          type: cc.Sprite,
          default: null
        },
        nameLab: {
          type: cc.Label,
          default: null
        },
        valueLab: {
          type: cc.Label,
          default: null
        },
        _timer: 0,
        _data: null,
        _roleData: null
      },
      initData: function initData(roleData, data) {
        this._data = data;
        this._roleData = roleData;
        this.updateUI(true);
      },
      updateUI: function updateUI(isInit) {
        if (!this._data) return;
        var key = this._data.key;
        var stateConfig = this._data.stateConfig;
        if (stateConfig.hasOwnProperty("belongTo")) {
          var belongTo = stateConfig.belongTo;
          this._roleData[belongTo].hasOwnProperty(key) ? this.valueLab.string = stateConfig.percent ? this._roleData[belongTo][key] + "%" : 1 * this._roleData[belongTo][key] : this.valueLab.string = "Unknown";
        } else this.valueLab.string = this._roleData.hasOwnProperty(key) ? this._roleData[key] : "Unknown";
        if (isInit) {
          this.nameLab.string = stateConfig.name;
          var self = this;
          var pathIcon = "icons/skillIcons/skill_" + stateConfig.icon;
          Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
            res && (self.icon.spriteFrame = res);
          });
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  BpStatesItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "12c7a6uNxdPNLllqcX3u7d6", "BpStatesItem");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLab: {
          type: cc.Label,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        groupItemPreb: {
          type: cc.Prefab,
          default: null
        },
        itemPreb: {
          type: cc.Prefab,
          default: null
        },
        morePreb: {
          type: cc.Prefab,
          default: null
        },
        colNum: {
          default: 2,
          step: 1
        },
        _roleData: null,
        _moreNode: null,
        _groupItemList: []
      },
      initUI: function initUI(name, roleData) {
        this.titleLab.string = name;
        this.content.removeAllChildren();
        var keys = Object.keys(gameConfig.STATES_CONFIG);
        this._groupItemList = [];
        var groupItem;
        for (var index = 0; index < keys.length; index++) {
          var visibleFlag = true;
          if (index >= 8) {
            visibleFlag = (false, Global.tempData.backpack_isOpened_states);
            if (!visibleFlag && 8 == index) {
              this._moreNode = cc.instantiate(this.morePreb);
              this.content.addChild(this._moreNode);
              var buttonNode = this._moreNode.getChildByName("moreBtn");
              if (buttonNode) {
                var clickEventHandler = new cc.Component.EventHandler();
                clickEventHandler.target = this.node;
                clickEventHandler.component = "BpStatesItem";
                clickEventHandler.handler = "onClickMoreBtn";
                var button = buttonNode.getComponent(cc.Button);
                button.clickEvents.push(clickEventHandler);
              }
            }
          }
          var key = keys[index];
          var stateConfig = gameConfig.STATES_CONFIG[key];
          if (index % this.colNum == 0) {
            groupItem = cc.instantiate(this.groupItemPreb);
            this.content.addChild(groupItem);
          }
          var stateItemNode = cc.instantiate(this.itemPreb);
          groupItem.addChild(stateItemNode);
          var bpStateItem = stateItemNode.getComponent("BpStateItem");
          bpStateItem && bpStateItem.initData(roleData, {
            key: key,
            stateConfig: stateConfig
          });
          groupItem.active = visibleFlag;
          this._groupItemList.push(groupItem);
        }
      },
      onClickMoreBtn: function onClickMoreBtn() {
        Global.tempData.backpack_isOpened_states = true;
        this._moreNode.active = false;
        for (var index = 0; index < this._groupItemList.length; index++) this._groupItemList[index].active = true;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  BpTitleItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "968f5lVjvRN+YDfFbMXmn4c", "BpTitleItem");
    "use strict";
    var UI_TYPE = {
      STATES: "states",
      EQUIP: "equip"
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          type: cc.Sprite,
          default: null
        },
        bgSF: {
          type: [ cc.SpriteFrame ],
          default: []
        },
        titleLab: {
          type: cc.Label,
          default: null
        }
      },
      initUI: function initUI(isEnemy, type) {
        if (isEnemy) {
          this.bg.spriteFrame = this.bgSF[1];
          this.titleLab.string = type == UI_TYPE.EQUIP ? "ENEMY EQUIP" : "ENEMY STATES";
        } else {
          this.bg.spriteFrame = this.bgSF[0];
          this.titleLab.string = type == UI_TYPE.EQUIP ? "MY EQUIP" : "MY STATES";
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  BulletConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee9d2UQqcVLq4mfY34FojB+", "BulletConfig");
    "use strict";
    var BulletConfig = cc.Class({
      name: "BulletConfig",
      statics: {
        data: [ {
          id: "1001",
          name: "\u77f3\u5934",
          bullet_type: "1",
          damage_type: "1",
          value: "20",
          crit: "1",
          dodge: "1",
          iconIndex: "0",
          rarity: "1",
          laps: "3"
        }, {
          id: "1002",
          name: "\u53c9\u5b50",
          bullet_type: "2",
          damage_type: "1",
          value: "150",
          crit: "1",
          dodge: "1",
          iconIndex: "1",
          rarity: "1",
          laps: "3"
        }, {
          id: "1003",
          name: "\u624b\u67c4",
          bullet_type: "3",
          damage_type: "2",
          value: "20",
          crit: "0",
          dodge: "1",
          iconIndex: "3",
          rarity: "2",
          laps: "3"
        }, {
          id: "1004",
          name: "\u996e\u6599",
          bullet_type: "4",
          damage_type: "8",
          value: "3.34",
          crit: "0",
          dodge: "0",
          iconIndex: "5",
          rarity: "3",
          laps: "2"
        }, {
          id: "1005",
          name: "\u6cb9\u6f06\u5237",
          bullet_type: "5",
          damage_type: "16",
          value: "23.34",
          crit: "0",
          dodge: "1",
          iconIndex: "2",
          rarity: "1",
          laps: "3"
        }, {
          id: "1006",
          name: "\u51b0\u68d2",
          bullet_type: "6",
          damage_type: "32",
          value: "1",
          crit: "0",
          dodge: "1",
          iconIndex: "4",
          rarity: "2",
          laps: "3"
        }, {
          id: "1007",
          name: "\u53c9\u5b50P",
          bullet_type: "2",
          damage_type: "1",
          value: "150",
          crit: "1",
          dodge: "1",
          iconIndex: "1",
          rarity: "1",
          laps: "3"
        }, {
          id: "1008",
          name: "\u624b\u67c4P",
          bullet_type: "3",
          damage_type: "2",
          value: "20",
          crit: "0",
          dodge: "1",
          iconIndex: "3",
          rarity: "2",
          laps: "3"
        }, {
          id: "1009",
          name: "\u996e\u6599P",
          bullet_type: "4",
          damage_type: "8",
          value: "3.34",
          crit: "0",
          dodge: "0",
          iconIndex: "5",
          rarity: "3",
          laps: "2"
        }, {
          id: "1010",
          name: "\u6cb9\u6f06\u5237P",
          bullet_type: "5",
          damage_type: "16",
          value: "23.34",
          crit: "0",
          dodge: "1",
          iconIndex: "2",
          rarity: "1",
          laps: "3"
        }, {
          id: "1011",
          name: "\u51b0\u68d2P",
          bullet_type: "6",
          damage_type: "32",
          value: "1",
          crit: "0",
          dodge: "1",
          iconIndex: "4",
          rarity: "2",
          laps: "3"
        }, {
          id: "1012",
          name: "\u7eb8\u98de\u9556",
          bullet_type: "1",
          damage_type: "1",
          value: "30",
          crit: "1",
          dodge: "1",
          iconIndex: "1",
          rarity: "1",
          laps: "3"
        } ]
      }
    });
    module.exports = BulletConfig;
    cc._RF.pop();
  }, {} ],
  BulletData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ec734sbmDBH4LjvlPasAQpN", "BulletData");
    "use strict";
    var BulletConfig = require("BulletConfig");
    var EnumType = require("EnumType");
    var BulletData = cc.Class({
      extends: cc.Component,
      statics: {},
      properties: {},
      setData: function setData(_type, _roleData) {
        this.type = parseInt(_type);
        this.fromData = _roleData;
        this.mutiDamage = {};
        this.bulletConfig = this.getConfig(this.type);
        this.damageType = this.bulletConfig.damage_type;
      },
      updateTargetData: function updateTargetData(_targetData) {
        if (null == _targetData) return;
        this.targetData = _targetData;
      },
      setDamageType: function setDamageType(_damageType) {
        this.damageType |= _damageType;
      },
      getConfig: function getConfig(_id) {
        for (var i = 0; i < BulletConfig.data.length; i++) {
          var config = BulletConfig.data[i];
          if (config.id == _id) return config;
        }
      },
      resetDamage: function resetDamage() {
        this.mutiDamage = {};
      },
      addDamage: function addDamage(_type, _damageObj) {
        if (parseInt(_type) != this.type) return;
        false == this.mutiDamage.hasOwnProperty(_damageObj.key) ? this.mutiDamage[_damageObj.key] = [ _damageObj ] : this.mutiDamage[_damageObj.key].push(_damageObj);
      },
      getDamage: function getDamage() {
        var damageValue = 0;
        var damageType = 0;
        switch (this.type) {
         case EnumType.BULLET_TYPE.STONE:
          damageValue = this.fromData.data.strength;
          damageType = EnumType.BULLET_DAMAGE_TYPE.HP;
          break;

         case EnumType.BULLET_TYPE.AXE:
         case EnumType.BULLET_TYPE.AXE_P:
         case EnumType.BULLET_TYPE.BOOMERANG:
          damageValue = Math.floor(this.fromData.getStaticData().strength * parseInt(this.bulletConfig.value) * .01);
          damageValue = damageValue < 1 ? 1 : damageValue;
          damageType = EnumType.BULLET_DAMAGE_TYPE.HP;
          break;

         case EnumType.BULLET_TYPE.BRAIN:
         case EnumType.BULLET_TYPE.BRAIN_P:
          damageValue = Number(this.bulletConfig.value);
          damageType = EnumType.BULLET_DAMAGE_TYPE.ENERGY;
          break;

         case EnumType.BULLET_TYPE.MUSCLE:
         case EnumType.BULLET_TYPE.MUSCLE_P:
          damageValue = Math.floor(this.fromData.getStaticData().strength * this.bulletConfig.value * .01);
          damageValue = damageValue < 1 ? 1 : damageValue;
          damageType = EnumType.BULLET_DAMAGE_TYPE.STRENGTH;
          break;

         case EnumType.BULLET_TYPE.BLEED:
         case EnumType.BULLET_TYPE.BLEED_P:
          damageValue = Math.floor(this.fromData.getStaticData().strength * this.bulletConfig.value * .01);
          damageValue = damageValue < 1 ? 1 : damageValue;
          damageType = EnumType.BULLET_DAMAGE_TYPE.BLEED;
          break;

         case EnumType.BULLET_TYPE.ICE:
         case EnumType.BULLET_TYPE.ICE_P:
          damageValue = Number(this.bulletConfig.value);
          damageType = EnumType.BULLET_DAMAGE_TYPE.ATTACK_SPEED;
        }
        var damageArr = [];
        var basicDamage = {
          key: damageType,
          value: damageValue
        };
        damageArr[basicDamage.key] = 1 * basicDamage.value;
        var value;
        for (var _damageType2 in this.mutiDamage) {
          var itemArr = this.mutiDamage[_damageType2];
          for (var i = 0; i < itemArr.length; i++) {
            var item = itemArr[i];
            var roleData = item.dependOnEnemy ? this.targetData : this.fromData;
            value = item.valueType == EnumType.VALUE_TYPE.NUMBER ? item.value : true == roleData.data.hasOwnProperty(item.baseValue) ? "dynamic" != item.isDynamicValue ? roleData.getStaticData()[item.baseValue] * item.value : roleData.data[item.baseValue] * item.value : true == roleData.hasOwnProperty(item.baseValue) ? roleData[item.baseValue] * item.value : basicDamage.value * item.value;
            damageArr.hasOwnProperty(item.key) ? damageArr[item.key] = Math.floor(damageArr[item.key] + value) : damageArr[item.key] = Math.floor(value);
          }
        }
        return damageArr;
      }
    });
    module.exports = BulletData;
    cc._RF.pop();
  }, {
    BulletConfig: "BulletConfig",
    EnumType: "EnumType"
  } ],
  Bullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "85a42zqlClIpLf55TGKq3Vr", "Bullet");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("../config/EnumType");
    var MIN_SCALE = .6;
    var MAX_SCALE = .8;
    var DEFAULT_SIZE = {
      width: 146,
      height: 146
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: {
          type: cc.Sprite,
          default: null
        },
        icon: {
          type: cc.Sprite,
          default: null
        },
        numLab: {
          type: cc.Label,
          default: null
        },
        effectAnim: {
          type: cc.Animation,
          default: null
        },
        animation: {
          type: cc.Animation,
          default: null
        },
        _bulletData: null,
        _args: null,
        _effectObj: null,
        _animationCallBack: null
      },
      onLoad: function onLoad() {
        this.animation.on("finished", this.animationDone, this);
      },
      animationDone: function animationDone() {
        this._animationCallBack && this._animationCallBack();
      },
      playStorage: function playStorage() {
        this.animation.play("bullet_storage");
      },
      playLanch: function playLanch() {
        this.animation.play("bullet_launch");
      },
      initData: function initData(data, args) {
        var _args, _this$_args, _args2;
        void 0 === args && (args = null);
        this._bulletData = data;
        this._args = args;
        this._effectObj = {
          0: 0,
          1: []
        };
        this.effectAnim.node.active = false;
        if (null != (_args = args) && _args.hasEffect) {
          var skillEffects = this._bulletData.fromData.getSkillEffect();
          skillEffects = skillEffects.filter(function(effect) {
            return -1 != effect.indexOf("_" + data.bulletConfig.bullet_type);
          });
          for (var index = 0; index < skillEffects.length; index++) {
            var effectType = skillEffects[index].split("_")[0];
            if (effectType == gameConfig.BULLET_EFFECT_TYPE.ZOOM) this._effectObj[0] < 5 && (this._effectObj[0] += 1); else if (-1 == this._effectObj[1].indexOf(effectType)) {
              this._effectObj[1].push(effectType);
              var clips = this.effectAnim.getClips();
              if (clips[effectType]) {
                this.effectAnim.play(clips[effectType]._name, 0);
                this.effectAnim.node.active = true;
              }
            }
          }
        }
        var skillType = args && args.hasOwnProperty("skillType") ? args.skillType : EnumType.SKILL_TYPE.BULLET;
        if (args && args.needBg && args.hasOwnProperty("skillType")) {
          var rarityCtrl = this.node.getComponent("Rarity");
          var sfGroup = rarityCtrl.getSpriteFrames(skillType);
          this.bg.spriteFrame = sfGroup.sfList[data.bulletConfig.rarity] ? sfGroup.sfList[data.bulletConfig.rarity] : sfGroup.sfList[0];
        } else this.bg.spriteFrame = "";
        var self = this;
        var pathIcon = skillType == EnumType.SKILL_TYPE.BULLET ? "icons/bulletIcons/common_img_bullet_" + data.bulletConfig.id : "icons/skillIcons/skill_" + data.bulletConfig.id;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          res && (self.icon.spriteFrame = res);
        });
        null != (_this$_args = this._args) && _this$_args.needAnima && this.animation.play("bullet_storage");
        null != (_args2 = args) && _args2.hasSkew && (this.icon.node.angle = -30);
        var hideOwnedCount = false;
        args && args.hasOwnProperty("hideOwnedCount") && (hideOwnedCount = args.hideOwnedCount);
        data.hasOwnProperty("ownedCount") && !hideOwnedCount ? data.ownedCount > 1 && (this.numLab.string = "x" + data.ownedCount) : this.numLab.string = "";
        var nodeSize = args && args.nodeSize || DEFAULT_SIZE;
        this.bg.node.width = nodeSize.width;
        this.bg.node.height = nodeSize.height;
      },
      shoot: function shoot(args, callback) {
        var _this = this;
        var tempVec3 = new cc.Vec3();
        var quadraticCurve = function quadraticCurve(t, p1, cp, p2, out) {
          out.x = (1 - t) * (1 - t) * p1.x + 2 * t * (1 - t) * cp.x + t * t * p2.x;
          out.y = (1 - t) * (1 - t) * p1.y + 2 * t * (1 - t) * cp.y + t * t * p2.y;
          out.z = (1 - t) * (1 - t) * p1.z + 2 * t * (1 - t) * cp.z + t * t * p2.z;
        };
        var node = this.node;
        node.angle = 0;
        node.setScale(MIN_SCALE, MIN_SCALE);
        var maxScale = (1 + .25 * this._effectObj[0]) * MAX_SCALE;
        cc.tween(node).to(1, {
          position: args.endPos
        }, {
          onUpdate: function onUpdate(target, ratio) {
            var easedRatio = Math.pow(ratio, 1.8);
            quadraticCurve(easedRatio, args.startPos, args.controlPos, args.endPos, tempVec3);
            node.setPosition(tempVec3);
            var scale = 1 * (maxScale - 1 * Math.abs(.5 - easedRatio).toFixed(2)).toFixed(2);
            node.setScale(scale, scale);
            node.angle = (args.fromLeft ? -360 : 360) * easedRatio * args.laps;
          }
        }).call(function() {
          Global.poolManager.put(gameConfig.POOLMANAGER_TYPE.bullet.key, node);
          callback && callback(_this._bulletData);
        }).start();
      },
      getDataDetails: function getDataDetails() {
        return {
          data: this._bulletData,
          args: this._args,
          contentSize: this.node.getContentSize()
        };
      }
    });
    cc._RF.pop();
  }, {
    "../config/EnumType": "EnumType",
    GameConfig: "GameConfig"
  } ],
  ChapterBaseData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ff6b9PQQWdOir6VdHTNtVvy", "ChapterBaseData");
    "use strict";
    var ChapterBaseData = cc.Class({
      name: "ChapterBaseData",
      statics: {
        data: [ {
          id: "1001",
          defaultSbgName: "scrollbackground_1001",
          sbgName: "",
          rate: "1",
          roleId: "2|1005",
          levelEvents: "2|1005;6|1019;11|1011;16|1001;21|1012;26|1004",
          reward: "2003|3000_2003|1000"
        }, {
          id: "1002",
          defaultSbgName: "scrollbackground_1002",
          sbgName: "",
          rate: "1.5",
          roleId: "",
          levelEvents: "",
          reward: "2003|6000_2001|3,2003|1000"
        }, {
          id: "1003",
          defaultSbgName: "scrollbackground_1003",
          sbgName: "",
          rate: "2",
          roleId: "2|1030",
          levelEvents: "",
          reward: "2003|3000_2001|3,2003|1000"
        }, {
          id: "1004",
          defaultSbgName: "scrollbackground_1001",
          sbgName: "",
          rate: "2.5",
          roleId: "",
          levelEvents: "",
          reward: "2003|3000_2001|3,2003|1000"
        } ]
      }
    });
    module.exports = ChapterBaseData;
    cc._RF.pop();
  }, {} ],
  ChapterManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "059e8Iya9xNg5SLHoAqxj+s", "ChapterManager");
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var ChapterBaseData = require("ChapterBaseData");
    var ChapterModel = function() {
      function ChapterModel(data) {
        this._data = data;
        this._id = data.id;
        this._levelEvents = data.levelEvents;
        this._sbgNameList = [];
        var sbgNameConfig = data.sbgName.split(",");
        for (var index = 0; index < sbgNameConfig.length; index++) {
          var config = sbgNameConfig[index];
          var sbgList = config.split("|");
          if (!sbgList || 2 != sbgList.length) continue;
          var level = sbgList[0];
          var sbgName = sbgList[1];
          this._sbgNameList[level] = sbgName;
        }
      }
      _createClass(ChapterModel, [ {
        key: "id",
        get: function get() {
          return this._id;
        },
        set: function set(value) {
          this._id = value;
        }
      }, {
        key: "levelEvents",
        get: function get() {
          return this._levelEvents;
        },
        set: function set(value) {
          this._levelEvents = value;
        }
      }, {
        key: "sbgNameList",
        get: function get() {
          return this._sbgNameList;
        }
      }, {
        key: "defaultSbgName",
        get: function get() {
          return this._data.defaultSbgName;
        }
      }, {
        key: "rewardConfig",
        get: function get() {
          return this._data.reward;
        }
      } ]);
      return ChapterModel;
    }();
    var ChapterManager = function ChapterManager() {
      this.resetData();
    }, ChapterMG = ChapterManager.prototype, g_instance = null;
    ChapterMG.resetData = function() {
      this.curChapter = 0;
      this.chapterData = [];
      this.initData();
    };
    ChapterMG.initData = function() {
      for (var index = 0; index < ChapterBaseData.data.length; index++) {
        var data = ChapterBaseData.data[index];
        this.chapterData.push(new ChapterModel(data));
      }
    };
    ChapterMG.getCurrentChapter = function() {
      return this.curChapter;
    };
    ChapterMG.getChapterDataByLevel = function(chapter) {
      return this.chapterData[chapter];
    };
    ChapterMG.getDefaultSBG = function(chapter) {
      var curChapterBaseData = this.chapterData[chapter || this.curChapter];
      return curChapterBaseData ? curChapterBaseData.defaultSbgName : "scrollbackground_1001";
    };
    ChapterMG.getSBGByLevel = function(lvl, chapter) {
      var curChapterBaseData = this.chapterData[chapter || this.curChapter];
      var sbgName = curChapterBaseData.sbgNameList[lvl];
      return sbgName || this.getDefaultSBG();
    };
    module.exports = function() {
      g_instance || (g_instance = new ChapterManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    ChapterBaseData: "ChapterBaseData"
  } ],
  ChoiceItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "24c1egcOghKFLEdvQI9PXQq", "ChoiceItem");
    "use strict";
    var COLOR = [ new cc.Color(119, 254, 115), new cc.Color(103, 221, 99) ];
    cc.Class({
      extends: cc.Component,
      properties: {
        progressBar: {
          type: cc.ProgressBar,
          default: null
        },
        barNode: {
          type: cc.Node,
          default: null
        },
        descNode: {
          type: cc.Node,
          default: null
        },
        percentLab: {
          type: cc.Label,
          default: null
        },
        _data: null
      },
      updateData: function updateData(isSelected, data) {
        this._data = data;
        this.barNode.color = isSelected ? COLOR[0] : COLOR[1];
        this.descNode.getComponent("RichTextUpdater").setContent(data.msgId);
      },
      update: function update(dt) {
        if (!this._data) return;
        var process = 1 * (100 * this.progressBar.progress).toFixed(2);
        var targetPercent = 1 * this._data.percent;
        if (process < targetPercent) {
          process += .5;
          process = process > targetPercent ? targetPercent : process;
          this.progressBar.progress = process / 100;
          this.percentLab.string = process + "%";
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  ChoiceResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2783dGwQO9Feb8zWY2x+VzU", "ChoiceResult");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        titleNode: {
          type: cc.Node,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        choiceItemPreb: {
          type: cc.Prefab,
          default: null
        }
      },
      updateData: function updateData(optionList, data) {
        for (var index = 0; index < optionList.length; index++) {
          var option = optionList[index];
          var choiceItem = cc.instantiate(this.choiceItemPreb);
          choiceItem.getComponent("ChoiceItem").updateData(option.skillId == data.skillId, option);
          this.content.addChild(choiceItem);
        }
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  CommonPrompt: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "19da8GTXbtLb4PwozJNrUpI", "CommonPrompt");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var CommonPrompt = function(_super) {
      __extends(CommonPrompt, _super);
      function CommonPrompt() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.titleNode = null;
        _this.contentNode = null;
        _this.okNode = null;
        _this.cancelNode = null;
        _this.config = {};
        return _this;
      }
      CommonPrompt.prototype.onAdded = function(params) {
        this.config = params || {};
        this.setTitle();
        this.setContent();
        this.setBtnOkLabel();
        this.setBtnCancelLabel();
        this.node.active = true;
        return true;
      };
      CommonPrompt.prototype.setTitle = function() {
        this.titleNode.getComponent("RichTextUpdater").setContent(this.config.title);
      };
      CommonPrompt.prototype.setContent = function() {
        this.contentNode.getComponent("RichTextUpdater").setContent(this.config.content);
      };
      CommonPrompt.prototype.setBtnOkLabel = function() {
        this.okNode.getComponent("RichTextUpdater").setContent(this.config.okWord);
      };
      CommonPrompt.prototype.setBtnCancelLabel = function() {
        if (this.cancelNode) {
          this.cancelNode.getComponent("RichTextUpdater").setContent(this.config.cancelWord);
          this.cancelNode.parent.active = this.config.needCancel || false;
        }
      };
      CommonPrompt.prototype.onOk = function() {
        "function" == typeof this.config.okFunc && this.config.okFunc();
        this.close();
      };
      CommonPrompt.prototype.onClose = function() {
        "function" == typeof this.config.closeFunc && this.config.closeFunc();
        this.close();
      };
      CommonPrompt.prototype.onCancel = function() {
        "function" == typeof this.config.cancelFunc && this.config.cancelFunc();
        this.close();
      };
      CommonPrompt.prototype.close = function() {
        Global.audio.playEffect("audio/click");
        Global.gui.removeByNode(this.node);
      };
      CommonPrompt.prototype.onDestroy = function() {
        this.config = null;
      };
      __decorate([ property(cc.Node) ], CommonPrompt.prototype, "titleNode", void 0);
      __decorate([ property(cc.Node) ], CommonPrompt.prototype, "contentNode", void 0);
      __decorate([ property(cc.Node) ], CommonPrompt.prototype, "okNode", void 0);
      __decorate([ property(cc.Node) ], CommonPrompt.prototype, "cancelNode", void 0);
      CommonPrompt = __decorate([ ccclass ], CommonPrompt);
      return CommonPrompt;
    }(cc.Component);
    exports.default = CommonPrompt;
    cc._RF.pop();
  }, {} ],
  Config: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d4831Gs++1AEImatdw8TGBs", "Config");
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var Config = function() {
      function Config(_data) {
        this.data = Object.freeze(_data.json);
        Global.utils.logMessage("\u6e38\u620f\u57fa\u7840\u914d\u7f6e\uff1a" + JSON.stringify(this.data));
      }
      _createClass(Config, [ {
        key: "data",
        get: function get() {
          return this._data;
        },
        set: function set(value) {
          return this._data = value;
        }
      }, {
        key: "version",
        get: function get() {
          return this.data.config.version;
        }
      }, {
        key: "frameRate",
        get: function get() {
          return this.data.config.frameRate;
        }
      }, {
        key: "localDataKey",
        get: function get() {
          return this.data.config.localDataKey;
        }
      }, {
        key: "localDataIv",
        get: function get() {
          return this.data.config.localDataIv;
        }
      }, {
        key: "languages",
        get: function get() {
          return this.data.language.type || [ "zh" ];
        }
      }, {
        key: "languageDefault",
        get: function get() {
          return this.data.language["default"] || "zh";
        }
      } ]);
      return Config;
    }();
    module.exports = Config;
    cc._RF.pop();
  }, {} ],
  Debuff: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "20d1f/VTVBHxqVFNZ+1O7Na", "Debuff");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        numLab: {
          type: cc.Label,
          default: null
        },
        debuffType: ""
      },
      onLoad: function onLoad() {
        this.active = false;
      },
      updateData: function updateData(type, value) {
        if (type == this.debuffType) {
          this.numLab && (this.numLab.string = value);
          this.node.active = 0 != value;
        }
      },
      clean: function clean() {
        this.numLab.string = "";
        this.node.active = false;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  DebugView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6308bCGoBpPHaJii1RZL4j8", "DebugView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        roleLab: {
          type: cc.Label,
          default: null
        },
        roleEditBox: {
          type: cc.EditBox,
          default: null
        },
        skillEditBox: {
          type: cc.EditBox,
          default: null
        },
        bagEditBox: {
          type: cc.EditBox,
          default: null
        },
        equipEditBox: {
          type: cc.EditBox,
          default: null
        },
        rougueEditBox: {
          type: cc.EditBox,
          default: null
        },
        marketEditBox: {
          type: cc.EditBox,
          default: null
        },
        _roleData: null,
        _autoRoleData: null,
        _curIndex: 0,
        _belongsToCT: null
      },
      onAdded: function onAdded(args) {
        this._roleData = args.roleData;
        this._autoRoleData = args.autoRoleData;
        this._belongsToCT = args.belongsToCT;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: gameConfig.CONTROLS.DEBUG_CT
        });
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: this._belongsToCT
        });
      },
      onEditEnd: function onEditEnd(event) {},
      onClickRoleBtn: function onClickRoleBtn(event, data) {
        this.roleLab.string = "\u73a9\u5bb6" == this.roleLab.string ? "Boss" : "\u73a9\u5bb6";
      },
      onClickOkBtn: function onClickOkBtn() {
        var roleData = "\u73a9\u5bb6" == this.roleLab.string ? this._roleData : this._autoRoleData;
        if ("" != this.roleEditBox.string) {
          var attributes = this.roleEditBox.string.split(",");
          for (var index = 0; index < attributes.length; index++) {
            var attribute = attributes[index];
            if ("" === attribute) continue;
            var data = attribute.split("|");
            if (2 != data.length) {
              Global.gui.toast("\u683c\u5f0f\u9519\u8bef:", data);
              break;
            }
            var key = data[0];
            var value = data[1];
            if ("money" == key) {
              roleData.currentMoney = Number(value);
              return;
            }
            if ("magazine" == key || "skills" == key) {
              Global.gui.toast("\u6682\u4e0d\u652f\u6301\u4fee\u6539magazine/skills\u6570\u636e");
              continue;
            }
            if (roleData.basicConfig.hasOwnProperty(key)) {
              roleData.basicConfig[key] = Number(value);
              "basic_hp" == key && (roleData.currentHp = roleData.basicConfig[key]);
            }
          }
          roleData.resetAll();
        }
        if ("" != this.skillEditBox.string) {
          var skills = this.skillEditBox.string.split(",");
          for (var _index = 0; _index < skills.length; _index++) {
            var skillId = skills[_index];
            if ("" === skillId) {
              Global.gui.toast("\u8bf7\u68c0\u67e5\u6280\u80fd\u53c2\u6570\u662f\u5426\u6b63\u786e");
              continue;
            }
            Global.skillManager.addSkill(skillId, roleData);
          }
          roleData.getCurrentProperties();
        }
        roleData.updateUICallback && roleData.updateUICallback();
        if ("" != this.bagEditBox.string) {
          var bags = this.bagEditBox.string.split(",");
          for (var _index2 = 0; _index2 < bags.length; _index2++) {
            var bag = bags[_index2].split("|");
            if (2 != bag.length) {
              Global.gui.toast("\u8bf7\u68c0\u67e5\u9053\u5177\u53c2\u6570\u662f\u5426\u6b63\u786e");
              continue;
            }
            Global.bagManager.addItem(bag[0], bag[1], roleData);
          }
        }
        if ("" != this.equipEditBox.string) {
          var equipments = this.equipEditBox.string.split(",");
          for (var _index3 = 0; _index3 < equipments.length; _index3++) {
            var equipmentId = equipments[_index3];
            if ("" === equipmentId) {
              Global.gui.toast("\u8bf7\u68c0\u67e5\u88c5\u5907\u53c2\u6570\u662f\u5426\u6b63\u786e");
              continue;
            }
            Global.equipmentManager.addEquipment(equipmentId, roleData);
          }
        }
        var rogueTempList = [];
        var rogue_skillIds = this.rougueEditBox.string.split(",");
        for (var j = 0; j < rogue_skillIds.length; j++) {
          var _skillId = rogue_skillIds[j];
          if ("" == _skillId) continue;
          var skillData = Global.skillManager.getSkillConfig(_skillId);
          if (!skillData) {
            Global.gui.toast("\u8bf7\u68c0\u67e5Rogue\u6280\u80fd\u914d\u7f6e");
            break;
          }
          rogueTempList.push(skillData);
        }
        globalThis.temp_rogue_list = rogueTempList;
        var marketTempList = [];
        var market_skillIds = this.marketEditBox.string.split(",");
        for (var _j = 0; _j < market_skillIds.length; _j++) {
          var _skillId2 = market_skillIds[_j];
          if ("" == _skillId2) continue;
          var _skillData = Global.skillManager.getSkillConfig(_skillId2);
          if (!_skillData) {
            Global.gui.toast("\u8bf7\u68c0\u67e5\u5546\u57ce\u6280\u80fd\u914d\u7f6e");
            break;
          }
          marketTempList.push(_skillData);
        }
        globalThis.temp_market_list = marketTempList;
      },
      onCloseUI: function onCloseUI() {
        Global.gui.remove(gameConfig.UIID.DebugPanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  Defines: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c8389g4141NIYBT+dnvCcl4", "Defines");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ViewParams = void 0;
    var ViewParams = function() {
      function ViewParams() {
        this.config = null;
        this.params = null;
        this.callbacks = null;
        this.valid = true;
        this.node = null;
      }
      return ViewParams;
    }();
    exports.ViewParams = ViewParams;
    cc._RF.pop();
  }, {} ],
  DelegateComponent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "296f9pp+4NK/IXYtJ3Z5HkD", "DelegateComponent");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DelegateComponent = void 0;
    var EventOnAdded = "onAdded";
    var EventOnBeforeRemove = "onBeforeRemove";
    var EventOnRemoved = "onRemoved";
    var DelegateComponent = function(_super) {
      __extends(DelegateComponent, _super);
      function DelegateComponent() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.vp = null;
        _this.onCloseWindow = null;
        return _this;
      }
      DelegateComponent.prototype.add = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
          return __awaiter(_this, void 0, void 0, function() {
            var i, component, func;
            return __generator(this, function(_a) {
              switch (_a.label) {
               case 0:
                i = 0;
                _a.label = 1;

               case 1:
                if (!(i < this.node._components.length)) return [ 3, 4 ];
                component = this.node._components[i];
                func = component[EventOnAdded];
                if (!func) return [ 3, 3 ];
                return [ 4, func.call(component, this.vp.params) ];

               case 2:
                if (false == _a.sent()) {
                  resolve(false);
                  return [ 2 ];
                }
                _a.label = 3;

               case 3:
                i++;
                return [ 3, 1 ];

               case 4:
                "function" === typeof this.vp.callbacks.onAdded && this.vp.callbacks.onAdded(this.node, this.vp.params);
                resolve(true);
                return [ 2 ];
              }
            });
          });
        });
      };
      DelegateComponent.prototype.remove = function(isDestroy) {
        if (this.vp.valid) {
          this.applyComponentsFunction(this.node, EventOnBeforeRemove, this.vp.params);
          "function" === typeof this.vp.callbacks.onBeforeRemove ? this.vp.callbacks.onBeforeRemove(this.node, this.onBeforeRemoveNext.bind(this, isDestroy)) : this.removed(this.vp, isDestroy);
        }
      };
      DelegateComponent.prototype.onBeforeRemoveNext = function(isDestroy) {
        this.removed(this.vp, isDestroy);
      };
      DelegateComponent.prototype.removed = function(vp, isDestroy) {
        vp.valid = false;
        vp.callbacks && "function" === typeof vp.callbacks.onRemoved && vp.callbacks.onRemoved(this.node, vp.params);
        this.onCloseWindow && this.onCloseWindow(vp);
        if (isDestroy) {
          this.node.destroy();
          Global.res.release(vp.config.prefab);
          Global.utils.logMessage("\u3010\u754c\u9762\u7ba1\u7406\u3011\u91ca\u653e\u3010" + vp.config.prefab + "\u3011\u754c\u9762\u8d44\u6e90");
        } else this.node.parent.removeChild(this.node, false);
      };
      DelegateComponent.prototype.onDestroy = function() {
        this.applyComponentsFunction(this.node, EventOnRemoved, this.vp.params);
        this.vp = null;
      };
      DelegateComponent.prototype.applyComponentsFunction = function(node, funName, params) {
        for (var i = 0; i < node._components.length; i++) {
          var component = node._components[i];
          var func = component[funName];
          func && func.call(component, params);
        }
      };
      return DelegateComponent;
    }(cc.Component);
    exports.DelegateComponent = DelegateComponent;
    cc._RF.pop();
  }, {} ],
  DetailBullet: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3de3cLaMNVPBpLhYqS5hg8i", "DetailBullet");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: {
          type: cc.Node,
          default: null
        },
        bg: {
          type: cc.Sprite,
          default: null
        },
        bulletRootNode: {
          type: cc.Node,
          default: null
        },
        nameNode: {
          type: cc.Node,
          default: null
        },
        typeNode: {
          type: cc.Node,
          default: null
        },
        descNode: {
          type: cc.Node,
          default: null
        },
        _config: null
      },
      onAdded: function onAdded(args) {
        Global.utils.logMessage("\u521d\u59cb\u5316GUI\u9762\u677f");
        this._config = args;
        return true;
      },
      onEnable: function onEnable() {
        this._config.hasOwnProperty("removeButton") && this._config.removeButton && this.node.removeComponent(cc.Button);
        var skillType = this._config.data.args && this._config.data.args.hasOwnProperty("skillType") ? this._config.data.args.skillType : EnumType.SKILL_TYPE.BULLET;
        var nodeSize = skillType == EnumType.SKILL_TYPE.BULLET ? {
          width: 146,
          height: 146
        } : {
          width: 190,
          height: 190
        };
        if (this._config.data.args && this._config.data.args.hasOwnProperty("skillType")) {
          var rarityCtrl = this.node.getComponent("Rarity");
          var sfGroup = rarityCtrl.getSpriteFrames(skillType);
          this.bg.spriteFrame = sfGroup.sfList[this._config.data.data.bulletConfig.rarity];
        } else this.bg.spriteFrame = "";
        this.bulletRootNode.removeAllChildren();
        var bulletPreb = Global.res.getRes(gameConfig.POOLMANAGER_TYPE.bullet.path);
        if (bulletPreb) {
          var bulletItem = cc.instantiate(bulletPreb);
          this.bulletRootNode.addChild(bulletItem);
          var bullet = bulletItem.getComponent("Bullet");
          bullet.initData(this._config.data.data, {
            hideOwnedCount: true,
            skillType: skillType,
            needBg: true,
            nodeSize: nodeSize
          });
        }
        this.nameNode.getComponent("RichTextUpdater").setContent("skill_" + this._config.data.data.bulletConfig.id + "_name");
        this.typeNode.getComponent("RichTextUpdater").setContent("skillType_" + skillType);
        var valueListStr = Global.languageManager.i18nData["skill_" + this._config.data.data.bulletConfig.id + "_desc"].valueList;
        var valueList = null;
        var result = [];
        if ("" != valueListStr) {
          valueList = valueListStr.split(",");
          for (var i = 0; i < valueList.length; i++) {
            var item = valueList[i];
            item = item.split("|");
            var value = Math.floor(this._config.data.args.roleData.getStaticData()[item[1]] * Number(item[0]) * .01);
            result.push(value);
          }
          this.descNode.getComponent("RichTextUpdater").setContent("skill_" + this._config.data.data.bulletConfig.id + "_desc", result);
        } else this.descNode.getComponent("RichTextUpdater").setContent("skill_" + this._config.data.data.bulletConfig.id + "_desc");
        if (this._config.hasOwnProperty("worldPos")) {
          var localPos = this.node.convertToNodeSpaceAR(this._config.worldPos);
          var _nodeSize = this.content.getContentSize();
          var winSize = cc.winSize;
          var contentSize = this._config.data.contentSize;
          localPos.x - _nodeSize.width / 2 < -winSize.width / 2 ? localPos.x = -winSize.width / 2 + _nodeSize.width / 2 : localPos.x + _nodeSize.width / 2 > winSize.width / 2 && (localPos.x = winSize.width / 2 - _nodeSize.width / 2);
          localPos.y < 0 ? localPos.y = localPos.y + _nodeSize.height / 2 + contentSize.height / 2 : localPos.y = localPos.y - _nodeSize.height / 2 - contentSize.height / 2;
          this.content.setPosition(localPos);
        }
      },
      onCloseUI: function onCloseUI() {
        Global.gui.remove(gameConfig.UIID.DetailBullet);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  DetailControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "34dd9lCzhNGSIr77PAh2HIR", "DetailControl");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        targetScript: {
          default: "",
          tooltip: "\u76ee\u6807\u811a\u672c\u540d\u79f0"
        },
        UIID: {
          type: cc.Enum(gameConfig.UIID),
          default: gameConfig.UIID.BulletDetail,
          tooltip: "\u8be6\u60c5\u754c\u9762\u9884\u5236\u4f53"
        },
        checkTime: {
          default: 0,
          min: 0,
          step: 1,
          visible: function visible() {
            return this.touch || this.mouse;
          },
          tooltip: "\u68c0\u6d4b\u65f6\u95f4"
        },
        touch: {
          default: true,
          tooltip: "\u52fe\u9009\u540e\u5f00\u542f\u89e6\u6478\u76d1\u542c"
        },
        mouse: {
          default: true,
          tooltip: "\u52fe\u9009\u540e\u5f00\u542f\u89e6\u6478\u76d1\u542c"
        },
        _touchTimer: null,
        _mouseTimer: null
      },
      onEnable: function onEnable() {
        this.regEvents();
      },
      onDisable: function onDisable() {
        this.unRegEvents();
      },
      regEvents: function regEvents() {
        if (this.touch) {
          this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        }
        if (this.mouse) {
          this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onMouseEnter, this);
          this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onMouseLeave, this);
        }
      },
      unRegEvents: function unRegEvents() {
        this.node.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);
        this.node.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);
        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onMouseEnter, this);
        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onMouseLeave, this);
      },
      clearTouchTimeout: function clearTouchTimeout() {
        if (this._touchTimer) {
          clearTimeout(this._touchTimer);
          this._touchTimer = null;
        }
      },
      onTouchStart: function onTouchStart(EventTouch) {
        var _this = this;
        var worldPos = this.node.convertToWorldSpaceAR(cc.v2(0, 0));
        this.clearTouchTimeout();
        this._touchTimer = setTimeout(function() {
          Global.utils.logMessage("\u89e6\u53d1\u957f\u6309\u4e8b\u4ef6");
          _this.clearTouchTimeout();
          _this.openDetailPanel(worldPos);
        }, this.checkTime);
        this.closeDetailPanel();
      },
      onTouchEnd: function onTouchEnd(EventTouch) {
        this.clearTouchTimeout();
      },
      onTouchCancel: function onTouchCancel(EventTouch) {
        this.clearTouchTimeout();
      },
      clearMouseTimeout: function clearMouseTimeout() {
        if (this._mouseTimer) {
          clearTimeout(this._mouseTimer);
          this._mouseTimer = null;
        }
      },
      onMouseEnter: function onMouseEnter(eventTouch) {
        var _this2 = this;
        this.clearMouseTimeout();
        this._mouseTimer = setTimeout(function() {
          Global.utils.logMessage("\u89e6\u53d1MouseEnter\u4e8b\u4ef6");
          _this2.clearMouseTimeout();
          var worldPos = _this2.node.convertToWorldSpaceAR(cc.v2(0, 0));
          _this2.openDetailPanel(worldPos, true);
        }, this.checkTime);
      },
      onMouseLeave: function onMouseLeave(eventTouch) {
        this.clearMouseTimeout();
        this.closeDetailPanel();
      },
      openDetailPanel: function openDetailPanel(worldPos, removeButton) {
        void 0 === worldPos && (worldPos = null);
        void 0 === removeButton && (removeButton = false);
        if (!worldPos || !(worldPos instanceof cc.Vec2)) throw new Error("Invalid position parameter");
        var name = "" == this.targetScript ? this.node.name : this.targetScript;
        var targetJS = this.node.getComponent(name);
        if (!targetJS) throw new Error("Not found <" + this.node.name + ">");
        if (!(targetJS.getDataDetails instanceof Function)) throw new Error("getDataDetails is not a function");
        if (!Global.gui.has(this.UIID)) {
          var data = targetJS.getDataDetails();
          Global.gui.open(this.UIID, {
            worldPos: new cc.Vec3(worldPos.x, worldPos.y, 0),
            removeButton: removeButton,
            data: data
          });
        }
      },
      closeDetailPanel: function closeDetailPanel() {
        if (!Global.gui.get(this.UIID)) return;
        Global.gui.remove(this.UIID);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  DetailPanelView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4f5c4NJyi5MUpss7Mx0hgzS", "DetailPanelView");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("../config/EnumType");
    var HpProgressBar = require("HpProgressBar");
    var DetailControl = require("DetailControl");
    cc.Class({
      extends: cc.Component,
      properties: {
        hpProgressBar: {
          type: HpProgressBar,
          default: null
        },
        strengthLab: {
          type: cc.Label,
          default: null
        },
        armorLab: {
          type: cc.Label,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        magLab: {
          type: cc.Label,
          default: null
        },
        cardsNumLab: {
          type: cc.Label,
          default: null
        },
        _roleData: null,
        _curBulletList: []
      },
      initData: function initData(roleData) {
        Global.utils.logMessage("\u66f4\u65b0\u4fe1\u606f\u9762\u677f\u6570\u636e");
        this._roleData = roleData;
        this.hpProgressBar.initData(this._roleData);
        this.updateUI();
        this.updateMagLayout();
      },
      reduceHp: function reduceHp(_value) {
        this.hpProgressBar.reduceHp(_value);
      },
      updateUI: function updateUI() {
        this.strengthLab.string = this._roleData.data.strength;
        this.armorLab.string = this._roleData.data.armor;
        var total = 0;
        for (var key in this._roleData.ownSkills) if (Object.hasOwnProperty.call(this._roleData.ownSkills, key)) {
          var ownSkills = this._roleData.ownSkills[key].filter(function(SkillData, index) {
            return SkillData.config.ownership == EnumType.SKILL_TYPE.SKILL || SkillData.config.ownership == EnumType.SKILL_TYPE.MAGIC;
          });
          total += ownSkills.length;
        }
        this.cardsNumLab.string = total;
        this.hpProgressBar.updateUI();
      },
      updateMagLayout: function updateMagLayout() {
        this.content.removeAllChildren();
        var bullets = this._roleData.data.bullets;
        this.magLab.string = "X" + bullets.length;
        this.createBullets(false);
      },
      createBullets: function createBullets(_needAnima) {
        var bullets = this._roleData.data.bullets;
        this._curBulletList = [];
        this.content.removeAllChildren();
        for (var index = 0; index < bullets.length; index++) {
          var obj = new Object();
          var bulletData = bullets[index];
          var bulletPreb = Global.res.getRes(gameConfig.POOLMANAGER_TYPE.bullet.path);
          if (bulletPreb) {
            var bulletItem = cc.instantiate(bulletPreb);
            this.content.addChild(bulletItem);
            var detailControl = bulletItem.addComponent(DetailControl);
            detailControl.targetScript = "Bullet";
            detailControl.UIID = gameConfig.UIID.DetailBullet;
            var bullet = bulletItem.getComponent("Bullet");
            bullet.initData(bulletData, {
              roleData: this._roleData,
              skillType: EnumType.SKILL_TYPE.BULLET,
              needAnima: _needAnima,
              hasSkew: true,
              needBg: false,
              nodeSize: {
                width: 75,
                height: 110
              }
            });
            obj.ctrl = bullet;
            obj.node = bulletItem;
            this._curBulletList.push(obj);
          }
        }
      },
      getNextBullet: function getNextBullet(_index) {
        if (this.content.children.length) {
          var firstObj = this._curBulletList.shift();
          firstObj ? firstObj.ctrl.playLanch() : this.createBullets(true);
        } else this.createBullets(true);
      }
    });
    cc._RF.pop();
  }, {
    "../config/EnumType": "EnumType",
    DetailControl: "DetailControl",
    GameConfig: "GameConfig",
    HpProgressBar: "HpProgressBar"
  } ],
  DialogueBaseData_en: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc8626dmCxCwZdpnnTCgT7v", "DialogueBaseData_en");
    "use strict";
    var DialogueBaseData_en = cc.Class({
      name: "DialogueBaseData_en",
      statics: {
        data: [ {
          id: "2000",
          message: "Say something 2000",
          duration: "3000"
        }, {
          id: "2001",
          message: "Say something 2001",
          duration: "3000"
        }, {
          id: "2002",
          message: "Say something 2002",
          duration: "3000"
        }, {
          id: "2003",
          message: "Say something 2003",
          duration: "3000"
        }, {
          id: "2004",
          message: "Say something 2004",
          duration: "3000"
        }, {
          id: "2005",
          message: "Say something 2005",
          duration: "3000"
        }, {
          id: "2006",
          message: "Say something 2006",
          duration: "3000"
        }, {
          id: "2007",
          message: "Say something 2007",
          duration: "3000"
        }, {
          id: "2008",
          message: "Say something 2008",
          duration: "3000"
        }, {
          id: "2009",
          message: "Say something 2009",
          duration: "3000"
        }, {
          id: "2010",
          message: "Say something 2010",
          duration: "3000"
        }, {
          id: "2011",
          message: "Say something 2011",
          duration: "3000"
        } ]
      }
    });
    module.exports = DialogueBaseData_en;
    cc._RF.pop();
  }, {} ],
  DialogueBaseData_zh: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3ef7Lbc4FLkJWkYh5kdDE7", "DialogueBaseData_zh");
    "use strict";
    var DialogueBaseData_zh = cc.Class({
      name: "DialogueBaseData_zh",
      statics: {
        data: [ {
          id: "2000",
          message: "\u672b\u65e5\u5df2\u7ecf\u5230\u6765\u5566!\u8ba9\u8fd9\u4e2a\u4e16\u754c\u5c31\u6b64\u652f\u79bb\u7834\u788e\u5427!",
          duration: "3000"
        }, {
          id: "2001",
          message: "\u543e\u4e43\u96f7\u795e\uff0c\u5f11\u541b\u4e4b\u541b\uff0c\u8bdb\u795e\u4e4b\u795e!",
          duration: "3000"
        }, {
          id: "2002",
          message: "\u66ae\u5149\u5ba1\u5224\u964d\u4e34\u4e86\uff0c\u6211\u5373\u662f\u672b\u65e5\u7684\u5f00\u7aef\uff01",
          duration: "3000"
        }, {
          id: "2003",
          message: "\u6211\u5b58\u5728\u7684\u610f\u4e49\u5c31\u662f\u4e3a\u4e86\u8fd9\u4e2a\u65f6\u523b\u3002",
          duration: "3000"
        }, {
          id: "2004",
          message: "\u89c1\u8bc1\u4f60\u4eec\u7684\u6b7b\u4ea1\u548c\u7edd\u671b\u5427\uff0c\u51e1\u4eba!",
          duration: "3000"
        }, {
          id: "2005",
          message: "\u5728\u6b7b\u4ea1\u4e4b\u795e\u9762\u524d\u5c48\u670d\u5427!",
          duration: "3000"
        }, {
          id: "2006",
          message: "\u4e16\u754c\u56e0\u6211\u7684\u6298\u78e8\u800c\u98a4\u6296\uff0c\u53ef\u60b2\u7684\u738b\u56fd\u5728\u6211\u7684\u6012\u706b\u4e2d\u5d29\u6e83!",
          duration: "3000"
        }, {
          id: "2007",
          message: "\u6211\u5df2\u4e0d\u80fd\u518d\u76f2\u4fe1\u81ea\u5df1\u7684\u8ba1\u7b97\u4e86\u3002",
          duration: "3000"
        }, {
          id: "2008",
          message: "\u4f60\u4eec\u7684\u661f\u7403\u5c06\u4f1a\u5e78\u514d\u3002",
          duration: "3000"
        }, {
          id: "2009",
          message: "\u6211\u662f\u4f60\u4eec\u5669\u68a6\u4e2d\u7684\u602a\u7269",
          duration: "3000"
        }, {
          id: "2010",
          message: "\u4f60\u5728\u5730\u4e0a\u65e0\u77e5\u5730\u722c\u884c\uff0c\u50cf\u4e00\u53ea\u778e\u773c\u7684\u722c\u866b\uff0c\u5411\u7740\u65e0\u5c3d\u7684\u75af\u72c2\u4e0e\u7edd\u671b\u8815\u52a8\u3002",
          duration: "3000"
        }, {
          id: "2011",
          message: "\u6216\u8bb8\u4f60\u662f\u7684\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u4f60\u62e5\u6709\u81ea\u7531\u610f\u5fd7\u3002",
          duration: "3000"
        } ]
      }
    });
    module.exports = DialogueBaseData_zh;
    cc._RF.pop();
  }, {} ],
  DialogueItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ded51ZYdMJLGot9U2/Oa4Pt", "DialogueItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var PADDING = {
      WIDTH: 70
    };
    var MAX_WIDTH = 360;
    cc.Class({
      extends: cc.Component,
      properties: {
        dialogueNode: {
          type: cc.Node,
          default: null
        },
        msgLab: {
          type: cc.Label,
          default: null
        }
      },
      show: function show(delay, msgId, roleId, callback) {
        var basicData = Global.basicAttributesManager.getConfigByID(roleId);
        this.msgLab.string = Global.languageManager.i18nData["msg_" + msgId].content;
        this.msgLab._forceUpdateRenderData();
        var contentSize = this.msgLab.node.getContentSize();
        if (contentSize.width > MAX_WIDTH) {
          this.msgLab.overflow = cc.Label.Overflow.SHRINK;
          this.msgLab.node.width = MAX_WIDTH;
          contentSize = this.msgLab.node.getContentSize();
        }
        this.node.width = contentSize.width + PADDING.WIDTH;
        var msgDuration = basicData.dialogueDuration || 3e3;
        var node = this.node;
        node.active = false;
        node.setScale(0, 0);
        var duration = msgDuration / 1e3 - .2;
        cc.tween(node).delay(delay).call(function() {
          node.active = true;
        }).to(.1, {
          scale: 1
        }).delay(duration).to(.1, {
          scale: 0
        }).call(function() {
          node.active = false;
          Global.poolManager.put(gameConfig.POOLMANAGER_TYPE.dialogueItem.key, node);
        }).call(callback).start();
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  DialogueManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "afc53ZkCTdL96TU8bjRkWTJ", "DialogueManager");
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var DialogueModel = function() {
      function DialogueModel(data) {
        this.id = data.id;
        this.message = data.message;
        this.duration = data.duration;
      }
      _createClass(DialogueModel, [ {
        key: "id",
        get: function get() {
          return this._id;
        },
        set: function set(value) {
          this._id = value;
        }
      }, {
        key: "message",
        get: function get() {
          return this._message;
        },
        set: function set(value) {
          this._message = value;
        }
      }, {
        key: "duration",
        get: function get() {
          return this._duration;
        },
        set: function set(value) {
          this._duration = value;
        }
      } ]);
      return DialogueModel;
    }();
    var DialogueManager = function DialogueManager() {
      this.resetData();
    }, DialogueMG = DialogueManager.prototype, g_instance = null;
    DialogueMG.resetData = function(lang) {
      void 0 === lang && (lang = "zh");
      this.dialogueData = {};
      this.initData(lang);
    };
    DialogueMG.initData = function(lang) {
      var DialogueBaseData = require("DialogueBaseData_" + lang);
      if (!DialogueBaseData) throw "\u672a\u627e\u5230\u5bf9\u5e94\u591a\u8bed\u8a00\u6587\u4ef6";
      for (var index = 0; index < DialogueBaseData.data.length; index++) {
        var data = DialogueBaseData.data[index];
        this.dialogueData[data.id] = new DialogueModel(data);
      }
    };
    DialogueMG.getDialogueDataById = function(_id) {
      return this.dialogueData[_id];
    };
    module.exports = function() {
      g_instance || (g_instance = new DialogueManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {} ],
  EnhancementPointsConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b9d7X2uMtL8rPjttE1zDTw", "EnhancementPointsConfig");
    "use strict";
    var EnhancementPointsConfig = cc.Class({
      name: "EnhancementPointsConfig",
      statics: {
        data: [ {
          level: "1",
          materials: "",
          rarity_0: "4",
          rarity_1: "6",
          rarity_2: "8",
          rarity_3: "10",
          rarity_4: "12",
          rarity_5: "14",
          rarity_6: "20",
          rarity_7: "24",
          rarity_8: "28",
          rarity_9: "40"
        }, {
          level: "2",
          materials: "1001|2",
          rarity_0: "5",
          rarity_1: "7",
          rarity_2: "10",
          rarity_3: "12",
          rarity_4: "15",
          rarity_5: "17",
          rarity_6: "25",
          rarity_7: "30",
          rarity_8: "35",
          rarity_9: "50"
        }, {
          level: "3",
          materials: "1001|4",
          rarity_0: "6",
          rarity_1: "9",
          rarity_2: "12",
          rarity_3: "15",
          rarity_4: "18",
          rarity_5: "21",
          rarity_6: "30",
          rarity_7: "36",
          rarity_8: "42",
          rarity_9: "60"
        }, {
          level: "4",
          materials: "1001|6",
          rarity_0: "7",
          rarity_1: "10",
          rarity_2: "14",
          rarity_3: "17",
          rarity_4: "21",
          rarity_5: "24",
          rarity_6: "35",
          rarity_7: "42",
          rarity_8: "49",
          rarity_9: "70"
        }, {
          level: "5",
          materials: "1001|8",
          rarity_0: "8",
          rarity_1: "12",
          rarity_2: "16",
          rarity_3: "20",
          rarity_4: "24",
          rarity_5: "28",
          rarity_6: "40",
          rarity_7: "48",
          rarity_8: "56",
          rarity_9: "80"
        }, {
          level: "6",
          materials: "1001|10",
          rarity_0: "9",
          rarity_1: "13",
          rarity_2: "18",
          rarity_3: "22",
          rarity_4: "27",
          rarity_5: "31",
          rarity_6: "45",
          rarity_7: "54",
          rarity_8: "63",
          rarity_9: "90"
        }, {
          level: "7",
          materials: "1001|12",
          rarity_0: "10",
          rarity_1: "15",
          rarity_2: "20",
          rarity_3: "25",
          rarity_4: "30",
          rarity_5: "35",
          rarity_6: "50",
          rarity_7: "60",
          rarity_8: "70",
          rarity_9: "100"
        }, {
          level: "8",
          materials: "1001|14",
          rarity_0: "11",
          rarity_1: "16",
          rarity_2: "22",
          rarity_3: "27",
          rarity_4: "33",
          rarity_5: "38",
          rarity_6: "55",
          rarity_7: "66",
          rarity_8: "77",
          rarity_9: "110"
        }, {
          level: "9",
          materials: "1001|16",
          rarity_0: "12",
          rarity_1: "18",
          rarity_2: "24",
          rarity_3: "30",
          rarity_4: "36",
          rarity_5: "42",
          rarity_6: "60",
          rarity_7: "72",
          rarity_8: "84",
          rarity_9: "120"
        }, {
          level: "10",
          materials: "1001|18",
          rarity_0: "13",
          rarity_1: "19",
          rarity_2: "26",
          rarity_3: "32",
          rarity_4: "39",
          rarity_5: "45",
          rarity_6: "65",
          rarity_7: "78",
          rarity_8: "91",
          rarity_9: "130"
        }, {
          level: "10+",
          materials: "1002|15",
          rarity_0: "15",
          rarity_1: "22",
          rarity_2: "30",
          rarity_3: "37",
          rarity_4: "45",
          rarity_5: "52",
          rarity_6: "75",
          rarity_7: "90",
          rarity_8: "105",
          rarity_9: "150"
        }, {
          level: "11",
          materials: "1001|30",
          rarity_0: "17",
          rarity_1: "25",
          rarity_2: "34",
          rarity_3: "42",
          rarity_4: "51",
          rarity_5: "59",
          rarity_6: "85",
          rarity_7: "102",
          rarity_8: "119",
          rarity_9: "170"
        }, {
          level: "12",
          materials: "1001|33",
          rarity_0: "19",
          rarity_1: "28",
          rarity_2: "38",
          rarity_3: "47",
          rarity_4: "57",
          rarity_5: "66",
          rarity_6: "95",
          rarity_7: "114",
          rarity_8: "133",
          rarity_9: "190"
        }, {
          level: "13",
          materials: "1001|36",
          rarity_0: "21",
          rarity_1: "31",
          rarity_2: "42",
          rarity_3: "52",
          rarity_4: "63",
          rarity_5: "73",
          rarity_6: "105",
          rarity_7: "126",
          rarity_8: "147",
          rarity_9: "210"
        }, {
          level: "14",
          materials: "1001|39",
          rarity_0: "23",
          rarity_1: "34",
          rarity_2: "46",
          rarity_3: "57",
          rarity_4: "69",
          rarity_5: "80",
          rarity_6: "115",
          rarity_7: "138",
          rarity_8: "161",
          rarity_9: "230"
        }, {
          level: "15",
          materials: "1001|42",
          rarity_0: "25",
          rarity_1: "37",
          rarity_2: "50",
          rarity_3: "62",
          rarity_4: "75",
          rarity_5: "87",
          rarity_6: "125",
          rarity_7: "150",
          rarity_8: "175",
          rarity_9: "250"
        }, {
          level: "16",
          materials: "1001|45",
          rarity_0: "27",
          rarity_1: "40",
          rarity_2: "54",
          rarity_3: "67",
          rarity_4: "81",
          rarity_5: "94",
          rarity_6: "135",
          rarity_7: "162",
          rarity_8: "189",
          rarity_9: "270"
        }, {
          level: "17",
          materials: "1001|48",
          rarity_0: "29",
          rarity_1: "43",
          rarity_2: "58",
          rarity_3: "72",
          rarity_4: "87",
          rarity_5: "101",
          rarity_6: "145",
          rarity_7: "174",
          rarity_8: "203",
          rarity_9: "290"
        }, {
          level: "18",
          materials: "1001|51",
          rarity_0: "31",
          rarity_1: "46",
          rarity_2: "62",
          rarity_3: "77",
          rarity_4: "93",
          rarity_5: "108",
          rarity_6: "155",
          rarity_7: "186",
          rarity_8: "217",
          rarity_9: "310"
        }, {
          level: "19",
          materials: "1001|54",
          rarity_0: "33",
          rarity_1: "49",
          rarity_2: "66",
          rarity_3: "82",
          rarity_4: "99",
          rarity_5: "115",
          rarity_6: "165",
          rarity_7: "198",
          rarity_8: "231",
          rarity_9: "330"
        }, {
          level: "20",
          materials: "1001|57",
          rarity_0: "35",
          rarity_1: "52",
          rarity_2: "70",
          rarity_3: "87",
          rarity_4: "105",
          rarity_5: "122",
          rarity_6: "175",
          rarity_7: "210",
          rarity_8: "245",
          rarity_9: "350"
        }, {
          level: "20+",
          materials: "1002|35",
          rarity_0: "42",
          rarity_1: "63",
          rarity_2: "84",
          rarity_3: "105",
          rarity_4: "126",
          rarity_5: "147",
          rarity_6: "210",
          rarity_7: "252",
          rarity_8: "294",
          rarity_9: "420"
        }, {
          level: "21",
          materials: "1001|60",
          rarity_0: "49",
          rarity_1: "74",
          rarity_2: "98",
          rarity_3: "123",
          rarity_4: "147",
          rarity_5: "172",
          rarity_6: "245",
          rarity_7: "294",
          rarity_8: "343",
          rarity_9: "490"
        }, {
          level: "22",
          materials: "1001|63",
          rarity_0: "56",
          rarity_1: "84",
          rarity_2: "112",
          rarity_3: "140",
          rarity_4: "168",
          rarity_5: "196",
          rarity_6: "280",
          rarity_7: "336",
          rarity_8: "392",
          rarity_9: "560"
        }, {
          level: "23",
          materials: "1001|66",
          rarity_0: "63",
          rarity_1: "95",
          rarity_2: "126",
          rarity_3: "158",
          rarity_4: "189",
          rarity_5: "221",
          rarity_6: "315",
          rarity_7: "378",
          rarity_8: "441",
          rarity_9: "630"
        }, {
          level: "24",
          materials: "1001|69",
          rarity_0: "70",
          rarity_1: "105",
          rarity_2: "140",
          rarity_3: "175",
          rarity_4: "210",
          rarity_5: "245",
          rarity_6: "350",
          rarity_7: "420",
          rarity_8: "490",
          rarity_9: "700"
        }, {
          level: "25",
          materials: "1001|72",
          rarity_0: "77",
          rarity_1: "116",
          rarity_2: "154",
          rarity_3: "193",
          rarity_4: "231",
          rarity_5: "270",
          rarity_6: "385",
          rarity_7: "462",
          rarity_8: "539",
          rarity_9: "770"
        }, {
          level: "26",
          materials: "1001|75",
          rarity_0: "84",
          rarity_1: "126",
          rarity_2: "168",
          rarity_3: "210",
          rarity_4: "252",
          rarity_5: "294",
          rarity_6: "420",
          rarity_7: "504",
          rarity_8: "588",
          rarity_9: "840"
        }, {
          level: "27",
          materials: "1001|78",
          rarity_0: "91",
          rarity_1: "137",
          rarity_2: "182",
          rarity_3: "228",
          rarity_4: "273",
          rarity_5: "319",
          rarity_6: "455",
          rarity_7: "546",
          rarity_8: "637",
          rarity_9: "910"
        }, {
          level: "28",
          materials: "1001|81",
          rarity_0: "98",
          rarity_1: "147",
          rarity_2: "196",
          rarity_3: "245",
          rarity_4: "294",
          rarity_5: "343",
          rarity_6: "490",
          rarity_7: "588",
          rarity_8: "686",
          rarity_9: "980"
        }, {
          level: "29",
          materials: "1001|84",
          rarity_0: "105",
          rarity_1: "158",
          rarity_2: "210",
          rarity_3: "263",
          rarity_4: "315",
          rarity_5: "368",
          rarity_6: "525",
          rarity_7: "630",
          rarity_8: "735",
          rarity_9: "1050"
        }, {
          level: "30",
          materials: "1001|87",
          rarity_0: "112",
          rarity_1: "168",
          rarity_2: "224",
          rarity_3: "280",
          rarity_4: "336",
          rarity_5: "392",
          rarity_6: "560",
          rarity_7: "672",
          rarity_8: "784",
          rarity_9: "1120"
        }, {
          level: "30+",
          materials: "1002|60",
          rarity_0: "127",
          rarity_1: "191",
          rarity_2: "254",
          rarity_3: "318",
          rarity_4: "381",
          rarity_5: "445",
          rarity_6: "635",
          rarity_7: "762",
          rarity_8: "889",
          rarity_9: "1270"
        }, {
          level: "31",
          materials: "1001|90",
          rarity_0: "142",
          rarity_1: "214",
          rarity_2: "284",
          rarity_3: "356",
          rarity_4: "426",
          rarity_5: "498",
          rarity_6: "710",
          rarity_7: "852",
          rarity_8: "994",
          rarity_9: "1420"
        }, {
          level: "32",
          materials: "1001|93",
          rarity_0: "157",
          rarity_1: "236",
          rarity_2: "314",
          rarity_3: "393",
          rarity_4: "471",
          rarity_5: "550",
          rarity_6: "785",
          rarity_7: "942",
          rarity_8: "1099",
          rarity_9: "1570"
        }, {
          level: "33",
          materials: "1001|96",
          rarity_0: "172",
          rarity_1: "259",
          rarity_2: "344",
          rarity_3: "431",
          rarity_4: "516",
          rarity_5: "603",
          rarity_6: "860",
          rarity_7: "1032",
          rarity_8: "1204",
          rarity_9: "1720"
        }, {
          level: "34",
          materials: "1001|99",
          rarity_0: "187",
          rarity_1: "281",
          rarity_2: "374",
          rarity_3: "468",
          rarity_4: "561",
          rarity_5: "655",
          rarity_6: "935",
          rarity_7: "1122",
          rarity_8: "1309",
          rarity_9: "1870"
        }, {
          level: "35",
          materials: "1001|102",
          rarity_0: "202",
          rarity_1: "304",
          rarity_2: "404",
          rarity_3: "506",
          rarity_4: "606",
          rarity_5: "708",
          rarity_6: "1010",
          rarity_7: "1212",
          rarity_8: "1414",
          rarity_9: "2020"
        }, {
          level: "36",
          materials: "1001|105",
          rarity_0: "217",
          rarity_1: "326",
          rarity_2: "434",
          rarity_3: "543",
          rarity_4: "651",
          rarity_5: "760",
          rarity_6: "1085",
          rarity_7: "1302",
          rarity_8: "1519",
          rarity_9: "2170"
        }, {
          level: "37",
          materials: "1001|108",
          rarity_0: "232",
          rarity_1: "349",
          rarity_2: "464",
          rarity_3: "581",
          rarity_4: "696",
          rarity_5: "813",
          rarity_6: "1160",
          rarity_7: "1392",
          rarity_8: "1624",
          rarity_9: "2320"
        }, {
          level: "38",
          materials: "1001|111",
          rarity_0: "247",
          rarity_1: "371",
          rarity_2: "494",
          rarity_3: "618",
          rarity_4: "741",
          rarity_5: "865",
          rarity_6: "1235",
          rarity_7: "1482",
          rarity_8: "1729",
          rarity_9: "2470"
        }, {
          level: "39",
          materials: "1001|114",
          rarity_0: "262",
          rarity_1: "394",
          rarity_2: "524",
          rarity_3: "656",
          rarity_4: "786",
          rarity_5: "918",
          rarity_6: "1310",
          rarity_7: "1572",
          rarity_8: "1834",
          rarity_9: "2620"
        }, {
          level: "40",
          materials: "1001|117",
          rarity_0: "277",
          rarity_1: "416",
          rarity_2: "554",
          rarity_3: "693",
          rarity_4: "831",
          rarity_5: "970",
          rarity_6: "1385",
          rarity_7: "1662",
          rarity_8: "1939",
          rarity_9: "2770"
        }, {
          level: "40+",
          materials: "1002|150",
          rarity_0: "315",
          rarity_1: "473",
          rarity_2: "630",
          rarity_3: "788",
          rarity_4: "945",
          rarity_5: "1103",
          rarity_6: "1575",
          rarity_7: "1890",
          rarity_8: "2205",
          rarity_9: "3150"
        }, {
          level: "41",
          materials: "1001|120",
          rarity_0: "353",
          rarity_1: "530",
          rarity_2: "706",
          rarity_3: "883",
          rarity_4: "1059",
          rarity_5: "1236",
          rarity_6: "1765",
          rarity_7: "2118",
          rarity_8: "2471",
          rarity_9: "3530"
        }, {
          level: "42",
          materials: "1001|123",
          rarity_0: "391",
          rarity_1: "587",
          rarity_2: "782",
          rarity_3: "978",
          rarity_4: "1173",
          rarity_5: "1369",
          rarity_6: "1955",
          rarity_7: "2346",
          rarity_8: "2737",
          rarity_9: "3910"
        }, {
          level: "43",
          materials: "1001|126",
          rarity_0: "429",
          rarity_1: "644",
          rarity_2: "858",
          rarity_3: "1073",
          rarity_4: "1287",
          rarity_5: "1502",
          rarity_6: "2145",
          rarity_7: "2574",
          rarity_8: "3003",
          rarity_9: "4290"
        }, {
          level: "44",
          materials: "1001|129",
          rarity_0: "467",
          rarity_1: "701",
          rarity_2: "934",
          rarity_3: "1168",
          rarity_4: "1401",
          rarity_5: "1635",
          rarity_6: "2335",
          rarity_7: "2802",
          rarity_8: "3269",
          rarity_9: "4670"
        }, {
          level: "45",
          materials: "1001|132",
          rarity_0: "505",
          rarity_1: "758",
          rarity_2: "1010",
          rarity_3: "1263",
          rarity_4: "1515",
          rarity_5: "1768",
          rarity_6: "2525",
          rarity_7: "3030",
          rarity_8: "3535",
          rarity_9: "5050"
        }, {
          level: "46",
          materials: "1001|135",
          rarity_0: "543",
          rarity_1: "815",
          rarity_2: "1086",
          rarity_3: "1358",
          rarity_4: "1629",
          rarity_5: "1901",
          rarity_6: "2715",
          rarity_7: "3258",
          rarity_8: "3801",
          rarity_9: "5430"
        }, {
          level: "47",
          materials: "1001|138",
          rarity_0: "581",
          rarity_1: "872",
          rarity_2: "1162",
          rarity_3: "1453",
          rarity_4: "1743",
          rarity_5: "2034",
          rarity_6: "2905",
          rarity_7: "3486",
          rarity_8: "4067",
          rarity_9: "5810"
        }, {
          level: "48",
          materials: "1001|141",
          rarity_0: "619",
          rarity_1: "929",
          rarity_2: "1238",
          rarity_3: "1548",
          rarity_4: "1857",
          rarity_5: "2167",
          rarity_6: "3095",
          rarity_7: "3714",
          rarity_8: "4333",
          rarity_9: "6190"
        }, {
          level: "49",
          materials: "1001|144",
          rarity_0: "657",
          rarity_1: "986",
          rarity_2: "1314",
          rarity_3: "1643",
          rarity_4: "1971",
          rarity_5: "2300",
          rarity_6: "3285",
          rarity_7: "3942",
          rarity_8: "4599",
          rarity_9: "6570"
        }, {
          level: "50",
          materials: "1001|147",
          rarity_0: "695",
          rarity_1: "1043",
          rarity_2: "1390",
          rarity_3: "1738",
          rarity_4: "2085",
          rarity_5: "2433",
          rarity_6: "3475",
          rarity_7: "4170",
          rarity_8: "4865",
          rarity_9: "6950"
        }, {
          level: "50+",
          materials: "1002|300",
          rarity_0: "760",
          rarity_1: "1140",
          rarity_2: "1520",
          rarity_3: "1900",
          rarity_4: "2280",
          rarity_5: "2660",
          rarity_6: "3800",
          rarity_7: "4560",
          rarity_8: "5320",
          rarity_9: "7600"
        }, {
          level: "51",
          materials: "1001|150",
          rarity_0: "824",
          rarity_1: "1236",
          rarity_2: "1648",
          rarity_3: "2060",
          rarity_4: "2472",
          rarity_5: "2884",
          rarity_6: "4120",
          rarity_7: "4944",
          rarity_8: "5768",
          rarity_9: "8240"
        }, {
          level: "52",
          materials: "1001|153",
          rarity_0: "888",
          rarity_1: "1332",
          rarity_2: "1776",
          rarity_3: "2220",
          rarity_4: "2664",
          rarity_5: "3108",
          rarity_6: "4440",
          rarity_7: "5328",
          rarity_8: "6216",
          rarity_9: "8880"
        }, {
          level: "53",
          materials: "1001|156",
          rarity_0: "952",
          rarity_1: "1428",
          rarity_2: "1904",
          rarity_3: "2380",
          rarity_4: "2856",
          rarity_5: "3332",
          rarity_6: "4760",
          rarity_7: "5712",
          rarity_8: "6664",
          rarity_9: "9520"
        }, {
          level: "54",
          materials: "1001|159",
          rarity_0: "1016",
          rarity_1: "1524",
          rarity_2: "2032",
          rarity_3: "2540",
          rarity_4: "3048",
          rarity_5: "3556",
          rarity_6: "5080",
          rarity_7: "6096",
          rarity_8: "7112",
          rarity_9: "10160"
        }, {
          level: "55",
          materials: "1001|162",
          rarity_0: "1080",
          rarity_1: "1620",
          rarity_2: "2160",
          rarity_3: "2700",
          rarity_4: "3240",
          rarity_5: "3780",
          rarity_6: "5400",
          rarity_7: "6480",
          rarity_8: "7560",
          rarity_9: "10800"
        }, {
          level: "56",
          materials: "1001|165",
          rarity_0: "1144",
          rarity_1: "1716",
          rarity_2: "2288",
          rarity_3: "2860",
          rarity_4: "3432",
          rarity_5: "4004",
          rarity_6: "5720",
          rarity_7: "6864",
          rarity_8: "8008",
          rarity_9: "11440"
        }, {
          level: "57",
          materials: "1001|168",
          rarity_0: "1208",
          rarity_1: "1812",
          rarity_2: "2416",
          rarity_3: "3020",
          rarity_4: "3624",
          rarity_5: "4228",
          rarity_6: "6040",
          rarity_7: "7248",
          rarity_8: "8456",
          rarity_9: "12080"
        }, {
          level: "58",
          materials: "1001|171",
          rarity_0: "1272",
          rarity_1: "1908",
          rarity_2: "2544",
          rarity_3: "3180",
          rarity_4: "3816",
          rarity_5: "4452",
          rarity_6: "6360",
          rarity_7: "7632",
          rarity_8: "8904",
          rarity_9: "12720"
        }, {
          level: "59",
          materials: "1001|174",
          rarity_0: "1336",
          rarity_1: "2004",
          rarity_2: "2672",
          rarity_3: "3340",
          rarity_4: "4008",
          rarity_5: "4676",
          rarity_6: "6680",
          rarity_7: "8016",
          rarity_8: "9352",
          rarity_9: "13360"
        }, {
          level: "60",
          materials: "1001|177",
          rarity_0: "1400",
          rarity_1: "2100",
          rarity_2: "2800",
          rarity_3: "3500",
          rarity_4: "4200",
          rarity_5: "4900",
          rarity_6: "7000",
          rarity_7: "8400",
          rarity_8: "9800",
          rarity_9: "14000"
        }, {
          level: "60+",
          materials: "1002|500",
          rarity_0: "1500",
          rarity_1: "2250",
          rarity_2: "3000",
          rarity_3: "3750",
          rarity_4: "4500",
          rarity_5: "5250",
          rarity_6: "7500",
          rarity_7: "9000",
          rarity_8: "10500",
          rarity_9: "15000"
        }, {
          level: "61",
          materials: "1001|180",
          rarity_0: "1600",
          rarity_1: "2400",
          rarity_2: "3200",
          rarity_3: "4000",
          rarity_4: "4800",
          rarity_5: "5600",
          rarity_6: "8000",
          rarity_7: "9600",
          rarity_8: "11200",
          rarity_9: "16000"
        }, {
          level: "62",
          materials: "1001|183",
          rarity_0: "1700",
          rarity_1: "2550",
          rarity_2: "3400",
          rarity_3: "4250",
          rarity_4: "5100",
          rarity_5: "5950",
          rarity_6: "8500",
          rarity_7: "10200",
          rarity_8: "11900",
          rarity_9: "17000"
        }, {
          level: "63",
          materials: "1001|186",
          rarity_0: "1800",
          rarity_1: "2700",
          rarity_2: "3600",
          rarity_3: "4500",
          rarity_4: "5400",
          rarity_5: "6300",
          rarity_6: "9000",
          rarity_7: "10800",
          rarity_8: "12600",
          rarity_9: "18000"
        }, {
          level: "64",
          materials: "1001|189",
          rarity_0: "1900",
          rarity_1: "2850",
          rarity_2: "3800",
          rarity_3: "4750",
          rarity_4: "5700",
          rarity_5: "6650",
          rarity_6: "9500",
          rarity_7: "11400",
          rarity_8: "13300",
          rarity_9: "19000"
        }, {
          level: "65",
          materials: "1001|192",
          rarity_0: "2000",
          rarity_1: "3000",
          rarity_2: "4000",
          rarity_3: "5000",
          rarity_4: "6000",
          rarity_5: "7000",
          rarity_6: "10000",
          rarity_7: "12000",
          rarity_8: "14000",
          rarity_9: "20000"
        }, {
          level: "66",
          materials: "1001|195",
          rarity_0: "2100",
          rarity_1: "3150",
          rarity_2: "4200",
          rarity_3: "5250",
          rarity_4: "6300",
          rarity_5: "7350",
          rarity_6: "10500",
          rarity_7: "12600",
          rarity_8: "14700",
          rarity_9: "21000"
        }, {
          level: "67",
          materials: "1001|198",
          rarity_0: "2200",
          rarity_1: "3300",
          rarity_2: "4400",
          rarity_3: "5500",
          rarity_4: "6600",
          rarity_5: "7700",
          rarity_6: "11000",
          rarity_7: "13200",
          rarity_8: "15400",
          rarity_9: "22000"
        }, {
          level: "68",
          materials: "1001|201",
          rarity_0: "2300",
          rarity_1: "3450",
          rarity_2: "4600",
          rarity_3: "5750",
          rarity_4: "6900",
          rarity_5: "8050",
          rarity_6: "11500",
          rarity_7: "13800",
          rarity_8: "16100",
          rarity_9: "23000"
        }, {
          level: "69",
          materials: "1001|204",
          rarity_0: "2400",
          rarity_1: "3600",
          rarity_2: "4800",
          rarity_3: "6000",
          rarity_4: "7200",
          rarity_5: "8400",
          rarity_6: "12000",
          rarity_7: "14400",
          rarity_8: "16800",
          rarity_9: "24000"
        }, {
          level: "70",
          materials: "1001|207",
          rarity_0: "2500",
          rarity_1: "3750",
          rarity_2: "5000",
          rarity_3: "6250",
          rarity_4: "7500",
          rarity_5: "8750",
          rarity_6: "12500",
          rarity_7: "15000",
          rarity_8: "17500",
          rarity_9: "25000"
        } ]
      }
    });
    module.exports = EnhancementPointsConfig;
    cc._RF.pop();
  }, {} ],
  EnumType: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8041ed2zTBHMKAcElJdXmIE", "EnumType");
    "use strict";
    var EnumType = cc.Class({
      extends: cc.Component,
      statics: {
        BAG_TYPE: {
          SKILL: 0,
          MAGIC: 1,
          EQUIPMENT: 2,
          ITEM: 3
        },
        PROPERTY_TYPE: {
          BASIC: 0,
          BULLET_COUNT: 1,
          BULLET_DAMAGE: 2,
          BULLET_FIRE: 3,
          ENHANCEMENT_EFFECT: 4,
          BULLET_HIT_COUNT: 5,
          CURRENT_ENERGY: 6,
          DAMAGE: 7,
          STUN: 8,
          DEBUFF: 9,
          ULTIMATE_ABILITY: 10,
          CURRENT_HP: 11,
          MONEY: 12,
          EVENT: 13,
          SUB_SKILL: 14,
          OVERDRAW: 15,
          REMOVE_RANDOM_BULLET: 16,
          STEAL_RANDOM_BULLET: 17,
          STEAL_COPY_RANDOM_BULLET: 18,
          ENHANCED_DAMAGE: 19,
          ENHANCED_CRIT: 20,
          REBORN_COUNT: 21,
          REBORN_HP_RATE: 22,
          FINAL_BASIC: 23,
          DAMAGE_REDUCTION: 24,
          ULTIMATEABILITY: 25,
          BOTH_SIDE: 26
        },
        TALENT_TYPE: {
          HP: 0,
          ATTACK: 1,
          ARMOR: 2
        },
        RARE_TYPE: {
          COMMON: 0,
          RARE: 1,
          EPIC: 2,
          LEGENDARY: 3,
          MYTHIC: 4,
          GIFT: 5,
          EVENT: 6
        },
        RARE_ITEM: {
          COMMON: 0,
          UNCOMMON: 1,
          RARE: 2,
          EPIC: 3,
          LEGENDARY: 4,
          MYTHIC: 5
        },
        RARE_TYPE_EQUIPMENT: {
          COMMON: 0,
          UNCOMMON: 1,
          RARE: 2,
          EPIC: 3,
          EPIC_1: 4,
          EPIC_2: 5,
          LEGENDARY: 6,
          LEGENDARY_1: 7,
          LEGENDARY_2: 8,
          MYTHIC: 9
        },
        EVENT_TRIGGER_TYPE: {
          HP_REGENERATION: 0,
          BY_BULLET_HIT: 1,
          BULLET_HIT: 2,
          HP_REDUCTION: 3,
          DEFEAT_ENEMY: 4,
          BATTLE_START: 5,
          FIRE_ULTIMATE_ABILITY: 6,
          INSTANT: 7,
          DODGE: 8,
          BY_ULTIMATE_ABILITY_HIT: 9,
          CHANGE_PROPERTY: 10,
          REFLECT_DAMAGE: 11,
          GET_SKILL: 12,
          SPEND_MONEY: 13,
          BULLET_ULTIMATE_ABILITY_DAMAGE: 14,
          FEND: 15,
          BLOOD: 16,
          DEBUFF_COUNT: 17,
          REBORN: 18,
          ULTIMATE_ABILITY_HIT: 19
        },
        EVENT_TRIGGER_SUB_TYPE: {
          TIME: 0,
          EVERY_SECOND: 1,
          CHARGE: 2,
          BOSS: 3,
          NOT_BOSS: 4
        },
        DURATION_TYPE: {
          STAGE: 0,
          ROUND: 1,
          SECOND: 2,
          COUNT: 3
        },
        CONDITION_TYPE: {
          GET: 0,
          CONDITION: 1
        },
        BULLET_TYPE: {
          STONE: 1001,
          AXE: 1002,
          BRAIN: 1003,
          MUSCLE: 1004,
          BLEED: 1005,
          ICE: 1006,
          AXE_P: 1007,
          BRAIN_P: 1008,
          MUSCLE_P: 1009,
          BLEED_P: 1010,
          ICE_P: 1011,
          BOOMERANG: 1012
        },
        BULLET_DAMAGE_TYPE: {
          NONE: 0,
          HP: 1,
          ENERGY: 2,
          ENERGY_BACK: 4,
          STRENGTH: 8,
          BLEED: 16,
          ATTACK_SPEED: 32,
          CRIT: 64
        },
        ULTIMATE_ABILITY_TYPE: {
          TYPE_1: 1001,
          TYPE_2: 1002,
          TYPE_3: 1003,
          TYPE_4: 1004,
          TYPE_5: 1005,
          TYPE_6: 1006,
          TYPE_7: 1007,
          TYPE_8: 1008,
          TYPE_9: 1009,
          TYPE_10: 1010,
          TYPE_11: 1011,
          TYPE_12: 1012,
          TYPE_13: 1013,
          TYPE_14: 1014,
          TYPE_15: 1015,
          TYPE_16: 1016,
          TYPE_17: 1017,
          TYPE_18: 1018,
          TYPE_19: 1019,
          TYPE_20: 1020,
          TYPE_21: 1021,
          TYPE_22: 1022,
          TYPE_23: 2001,
          TYPE_24: 2002,
          TYPE_25: 2003,
          TYPE_26: 3001,
          TYPE_27: 3002,
          TYPE_28: 3003,
          TYPE_29: 3004,
          TYPE_30: 3005,
          TYPE_31: 3006,
          TYPE_32: 3007,
          TYPE_33: 3009,
          TYPE_34: 3011,
          TYPE_35: 3013
        },
        VALUE_TYPE: {
          RATE: 1,
          NUMBER: 2
        },
        ENHANCEMENT_EFFECT: {
          CHARGE: "charge",
          EMERGENCY: "emergency",
          VALUE: "value",
          RATE: "rate"
        },
        ENHANCEMENT_EFFECT_TYPE: {
          TIME: "time",
          EFFECT: "effect",
          LIMIT: "limit"
        },
        SKILL_TYPE: {
          SKILL: 0,
          MAGIC: 1,
          COMPLEX_MAGIC: 2,
          BULLET: 3
        },
        MAGIC_RATE: {
          RARE: 58,
          EPIC: 36,
          LEGENDARY: 6
        },
        SKILL_RATE: {
          COMMON: 55,
          RARE: 26,
          EPIC: 13,
          LEGENDARY: 6
        },
        BOOST_CHANCE_COEFFICIENT: {
          COMMON: 2,
          RARE: 2,
          EPIC: 2,
          LEGENDARY: 2
        },
        EQUIPMENT_TYPE: {
          WEAPON: 0,
          BACKPACK: 1,
          RING: 2,
          NECKLACE: 3
        },
        EQUIPMENT_SLOT_POS: {
          NONE: -1,
          WEAPON: 0,
          RING: 1,
          NECKLACE: 2,
          BACKPACK: 3,
          RING_2: 4,
          NECKLACE_2: 5
        },
        BAG_ITEM_TYPE: {
          LEVEL_UP: 0,
          MERGE: 1
        },
        EQUIPMENT_ITEM_SHOW_TYPE: {
          NONE: 0,
          EQUIPED_FLAG: 1,
          PROB_FLAG: 2,
          SELECTED_FLAG: 4
        },
        ITEM_SHOW_TYPE: {
          NONE: 0,
          SELECTED_FLAG: 1,
          PROB_FLAG: 2,
          COUNT_FONT_SCALE_1: 4,
          COUNT_FONT_SCALE_2: 8
        },
        ITEM_OWNER_TYPE: {
          NONE: 0,
          MERGE: 1,
          MERGE_SLOT: 2,
          TASK_REWARD: 3,
          OPEN_BOX_RESULT: 4,
          EQUIP: 5
        },
        EQUIPMENT_ITEM_OWNER_TYPE: {
          NONE: 0,
          EQUIP: 1,
          SLOT: 2,
          MERGE: 3,
          MERGE_SLOT: 4,
          SELECT_EQUIPMENT: 5,
          OPEN_BOX_RESULT: 6
        },
        REWARD_TYPE: {
          ITEM: 0,
          SKILL: 1,
          COIN: 2,
          CLERK: 3
        },
        TALENT_PROPERTY_TYPE: {
          WORLD: 1,
          BATTLE: 2
        },
        SORT_TYPE: {
          RARITY: 0,
          LEVEL: 1,
          TYPE: 2
        },
        TASK_TYPE: {
          LOGIN: 1001,
          COST_STAMINA: 1002,
          UPGRADE_EQUIPMENT: 1003,
          FACTORY_DUNGEON: 1004,
          BUY_COIN: 1005,
          BUY_STAMINA: 1006,
          OPEN_BOX: 1007,
          SIGNIN: 1008,
          STAMINA_DUNGEON: 1009,
          PLAY_TIME_15: 1010,
          PASSIVE_HARVESTING_REWARD: 1011,
          LEVEL_UP_TALENT: 1012,
          PLAY_TIME_30: 1013
        }
      },
      properties: {},
      start: function start() {}
    });
    module.exports = EnumType;
    cc._RF.pop();
  }, {} ],
  EquipMerge: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9b9aaWA3p1Kroh+sE7YNDis", "EquipMerge");
    "use strict";
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        resultEquipmentItem: cc.Node,
        currentEquipmentItem: cc.Node,
        materialItem: cc.Node,
        materialItem_2: cc.Node,
        materialEquipmentItem: cc.Node,
        materialEquipmentItem_2: cc.Node,
        materialsContainer: cc.Node,
        materialItemContainer: cc.Node,
        materialItemContainer_2: cc.Node,
        infoNode: cc.Node,
        equipmentName: cc.Node,
        equipmentHp: cc.Node,
        equipmentStr: cc.Node,
        equipmentArmor: cc.Node,
        lineNode: cc.Node,
        lineNode_2: cc.Node,
        lineNode_3: cc.Node,
        skillDesc: cc.Node,
        materialsDesc: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        container: cc.Node,
        mergeBtn: cc.Button
      },
      start: function start() {},
      hideItems: function hideItems() {
        this.materialsContainer.active = false;
        this.infoNode.active = false;
        this.materialsDesc.active = false;
        this.resultEquipmentItem.active = false;
        this.currentEquipmentItem.active = false;
        this.materialEquipmentItem.active = false;
        this.materialEquipmentItem_2.active = false;
        this.materialItem.active = false;
        this.materialItem_2.active = false;
        this.mergeBtn.interactable = false;
      },
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        if (!this.labelColorList) {
          this.labelColorList = [];
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.COMMON] = "#FFFFFF";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.UNCOMMON] = "#61C525";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.RARE] = "#367DBB";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC] = "#893CD6";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC_1] = "#893CD6";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC_2] = "#893CD6";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY] = "#E5881D";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1] = "#E5881D";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2] = "#E5881D";
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.MYTHIC] = "#E8204A";
        }
        this.hideItems();
        this.updateEquipmentsAndMaterials(null);
      },
      onClickMerge: function onClickMerge() {
        var materials = [];
        var currentEquipmentItemCom = this.currentEquipmentItem.getComponent("EquipmentItem");
        var conditionList = Global.equipmentManager.getUpgradeCondition(currentEquipmentItemCom.equipmentData);
        var materialCom;
        var materialData;
        if (true == this.materialEquipmentItem.active) {
          materialCom = this.materialEquipmentItem.getComponent("EquipmentItem");
          materialData = materialCom.equipmentData;
        } else {
          materialCom = this.materialItem.getComponent("BagItem");
          materialData = materialCom.itemData;
        }
        materials.push(materialData);
        if (2 == conditionList.length) {
          var materialCom_2;
          var materialData_2;
          if (true == this.materialEquipmentItem_2.active) {
            materialCom_2 = this.materialEquipmentItem_2.getComponent("EquipmentItem");
            materialData_2 = materialCom_2.equipmentData;
          } else {
            materialCom_2 = this.materialItem_2.getComponent("BagItem");
            materialData_2 = materialCom_2.itemData;
          }
          materials.push(materialData_2);
        }
        Global.equipmentManager.upgrade(currentEquipmentItemCom.equipmentData, materials, this.roleData);
        var equipmentItemCom = this.currentEquipmentItem.getComponent("EquipmentItem");
        var equipmentData = equipmentItemCom.equipmentData;
        equipmentData.selected = false;
        this.hideItems();
        this.updateEquipmentsAndMaterials();
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateEquipments();
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateSlotEquipment();
        var args = {};
        args.equipmentData = equipmentData;
        args.roleData = this.roleData;
        Global.gui.open(gameConfig.UIID.EquipmentMergeResult, args);
      },
      onClickItem2Cancel: function onClickItem2Cancel(_item) {
        _item.active = false;
        var itemCom = _item.getComponent("BagItem");
        var itemData = itemCom.itemData;
        itemData.selected = false;
        this.updateEquipmentsAndMaterials(itemData);
        this.updateItemsStatus(itemData);
      },
      onClickEquipmentItem2Cancel: function onClickEquipmentItem2Cancel(_equipmentItem) {
        _equipmentItem.active = false;
        var equipmentItemCom = _equipmentItem.getComponent("EquipmentItem");
        var equipmentData = equipmentItemCom.equipmentData;
        equipmentData.selected = false;
        if (_equipmentItem == this.currentEquipmentItem) {
          if (true == this.materialEquipmentItem.active) {
            var _equipmentItemCom = this.materialEquipmentItem.getComponent("EquipmentItem");
            var _equipmentData2 = _equipmentItemCom.equipmentData;
            _equipmentData2 && (_equipmentData2.selected = false);
          }
          if (true == this.materialEquipmentItem_2.active) {
            var equipmentItemCom_2 = this.materialEquipmentItem_2.getComponent("EquipmentItem");
            var equipmentData_2 = equipmentItemCom_2.equipmentData;
            equipmentData_2 && (equipmentData_2.selected = false);
          }
          if (true == this.materialItem.active) {
            var itemCom = this.materialItem.getComponent("BagItem");
            var itemData = itemCom.itemData;
            itemData && (itemData.selected = false);
          }
          if (true == this.materialItem_2.active) {
            var itemCom_2 = this.materialItem_2.getComponent("BagItem");
            var itemData_2 = itemCom_2.itemData;
            itemData_2 && (itemData_2.selected = false);
          }
          this.hideItems();
          this.updateEquipmentsAndMaterials(null);
          this.updateItemsStatus(null);
        } else {
          if (true == this.materialEquipmentItem.active) {
            var _equipmentItemCom2 = this.materialEquipmentItem.getComponent("EquipmentItem");
            var _equipmentData3 = _equipmentItemCom2.equipmentData;
            _equipmentData3 && (_equipmentData3.selected = false);
          }
          if (true == this.materialEquipmentItem_2.active) {
            var _equipmentItemCom_ = this.materialEquipmentItem_2.getComponent("EquipmentItem");
            var _equipmentData_ = _equipmentItemCom_.equipmentData;
            _equipmentData_ && (_equipmentData_.selected = false);
          }
          this.updateEquipmentsAndMaterials(equipmentData);
          this.updateItemsStatus(equipmentData);
        }
      },
      onClickItem2Merge: function onClickItem2Merge(_item) {
        var itemCom = _item.getComponent("BagItem");
        var itemData = itemCom.itemData;
        if (false == this.currentEquipmentItem.active) return;
        var currentEquipmentItemCom = this.currentEquipmentItem.getComponent("EquipmentItem");
        var conditionList = Global.equipmentManager.getUpgradeCondition(currentEquipmentItemCom.equipmentData);
        if (true == this.materialItem.active) {
          if (1 == conditionList.length) return;
          if (false == this.materialItem_2.active) {
            itemData.selected = true;
            this.materialItem_2.active = true;
            this.materialItem_2.getComponent("BagItem").setData(itemData, this.roleData, EnumType.ITEM_OWNER_TYPE.MERGE_SLOT);
            this.updateEquipmentsAndMaterials(currentEquipmentItemCom.equipmentData);
            this.updateItemsStatus(currentEquipmentItemCom.equipmentData);
            this.mergeBtn.interactable = true;
            return;
          }
        } else if (false == this.materialItem.active) {
          itemData.selected = true;
          this.materialItem.active = true;
          this.materialItem.getComponent("BagItem").setData(itemData, this.roleData, EnumType.ITEM_OWNER_TYPE.MERGE_SLOT);
          this.updateEquipmentsAndMaterials(currentEquipmentItemCom.equipmentData);
          this.updateItemsStatus(currentEquipmentItemCom.equipmentData);
          this.mergeBtn.interactable = 1 == conditionList.length;
          return;
        }
      },
      onClickEquipmentItem2Merge: function onClickEquipmentItem2Merge(_equipmentItem) {
        var equipmentItemCom = _equipmentItem.getComponent("EquipmentItem");
        var equipmentData = equipmentItemCom.equipmentData;
        if (equipmentData.rarity >= EnumType.RARE_TYPE_EQUIPMENT.MYTHIC) return;
        if (true == this.currentEquipmentItem.active) {
          var currentEquipmentItemCom = this.currentEquipmentItem.getComponent("EquipmentItem");
          var _conditionList = Global.equipmentManager.getUpgradeCondition(currentEquipmentItemCom.equipmentData);
          if (true == this.materialEquipmentItem.active) {
            if (false == this.materialEquipmentItem_2.active && _conditionList.length > 1) {
              equipmentData.selected = true;
              this.materialEquipmentItem_2.active = true;
              this.materialEquipmentItem_2.getComponent("EquipmentItem").setData(equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE_SLOT, EnumType.EQUIPMENT_ITEM_SHOW_TYPE.EQUIPED_FLAG);
              this.updateEquipmentsAndMaterials(currentEquipmentItemCom.equipmentData);
              this.updateItemsStatus(currentEquipmentItemCom.equipmentData);
              this.mergeBtn.interactable = true;
              return;
            }
          } else if (false == this.materialEquipmentItem.active) {
            equipmentData.selected = true;
            this.materialEquipmentItem.active = true;
            this.materialEquipmentItem.getComponent("EquipmentItem").setData(equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE_SLOT, EnumType.EQUIPMENT_ITEM_SHOW_TYPE.EQUIPED_FLAG);
            this.updateEquipmentsAndMaterials(currentEquipmentItemCom.equipmentData);
            this.updateItemsStatus(currentEquipmentItemCom.equipmentData);
            this.mergeBtn.interactable = 1 == _conditionList.length;
            return;
          }
          return;
        }
        equipmentData.selected = true;
        this.currentEquipmentItem.active = true;
        this.currentEquipmentItem.getComponent("EquipmentItem").setData(equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE_SLOT, EnumType.EQUIPMENT_ITEM_SHOW_TYPE.EQUIPED_FLAG);
        this.updateEquipmentsAndMaterials(equipmentData);
        this.updateItemsStatus(equipmentData);
        var resultEquipmentItemData = Global.equipmentManager.generateEquipmentData(equipmentData.equipmentConfig, 1, equipmentData.rarity + 1);
        resultEquipmentItemData.level = equipmentData.level;
        this.resultEquipmentItem.getComponent("EquipmentItem").setData(resultEquipmentItemData, this.roleData);
        this.resultEquipmentItem.active = true;
        this.materialsContainer.active = true;
        var conditionList = Global.equipmentManager.getUpgradeCondition(equipmentData);
        this.materialItemContainer.active = true;
        this.materialItemContainer_2.active = conditionList.length > 1;
        this.infoNode.active = true;
        this.equipmentName.getComponent("LabelUpdater").setString(resultEquipmentItemData.equipmentConfig.name);
        var enhancementPointItem = Global.equipmentManager.enhancementPointsConfigDict[resultEquipmentItemData.level];
        var baseValue = parseInt(enhancementPointItem["rarity_" + equipmentData.rarity]);
        var nextValue = parseInt(enhancementPointItem["rarity_" + resultEquipmentItemData.rarity]);
        var rate = "+" + (nextValue - baseValue) / 4 * 100;
        this.lineNode.active = false;
        this.lineNode_2.active = false;
        this.lineNode_3.active = false;
        for (var i = 0; i < equipmentData.baseProperty.length; i++) {
          var property = equipmentData.baseProperty[i];
          if ("basic_hp" == property.key) {
            this.equipmentHp.getComponent("LabelUpdater").setString(rate + "%");
            this.lineNode.active = true;
          }
          if ("strength" == property.key) {
            this.equipmentStr.getComponent("LabelUpdater").setString(rate + "%");
            this.lineNode_2.active = true;
          } else if ("armor" == property.key) {
            this.equipmentArmor.getComponent("LabelUpdater").setString(rate + "%");
            this.lineNode_3.active = true;
          }
        }
        this.skillDesc.getComponent("LabelUpdater").setContent("equipmentMerge_upgrade_rarity_tip", [ Global.languageManager.t("level") + resultEquipmentItemData.rarity ]);
        var conditionStr = "";
        for (var _i = 0; _i < conditionList.length; _i++) {
          var conditionData = conditionList[_i];
          if (null != conditionData.key) {
            var equipmentConfig = Global.equipmentManager.getEquipmentConfig(conditionData.key);
            conditionStr += "<color=" + this.labelColorList[equipmentConfig.rarity] + ">" + Global.languageManager.t("equipmentName_" + equipmentConfig.id) + "</color>,";
          } else conditionStr += "<color=" + this.labelColorList[conditionData.rarity] + ">" + Global.languageManager.t("anything") + Global.languageManager.t("equipment_rarity_" + conditionData.rarity) + Global.languageManager.t("equipment_slot_" + conditionData.slot) + "</color>,";
        }
        conditionStr = conditionStr.substring(0, conditionStr.length - 1);
        this.materialsDesc.getComponent("RichTextUpdater").setContent("equipmentMerge_upgrade_materials_tip", [ conditionStr ]);
        this.materialsDesc.active = true;
      },
      updateItemsStatus: function updateItemsStatus(_equipmentData) {
        if (null == _equipmentData) return;
        var conditionList = Global.equipmentManager.getUpgradeCondition(_equipmentData);
        for (var i = 0; i < this.equipmentItemList.length; i++) {
          var equipmentItem = this.equipmentItemList[i];
          var equipmentItemCom = equipmentItem.getComponent("EquipmentItem");
          var result = false;
          for (var j = 0; j < conditionList.length; j++) {
            var condition = conditionList[j];
            condition.rarity == equipmentItemCom.equipmentData.rarity && (null != condition.key ? condition.key == equipmentItemCom.equipmentData.equipmentId && (result = true) : condition.slot == equipmentItemCom.equipmentData.slot && (result = true));
          }
          false == result && equipmentItemCom.showLock(true);
        }
        for (var k = 0; k < this.bagItemList.length; k++) {
          var bagItem = this.bagItemList[k];
          var bagItemCom = bagItem.getComponent("BagItem");
          var _result = false;
          for (var l = 0; l < conditionList.length; l++) {
            var _condition = conditionList[l];
            _condition.materialRarity == bagItemCom.itemData.rarity && null == _condition.key && _condition.slot == bagItemCom.itemData.slot && (_result = true);
          }
          false == _result && bagItemCom.showLock(true);
        }
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.container.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item2 = this.bagItemList.pop();
          this.container.removeChild(_item2, false);
          this.bagItemPool.push(_item2);
        }
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData, _index) {
        var startX = -420;
        var startY = -120;
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE, EnumType.EQUIPMENT_ITEM_SHOW_TYPE.SELECTED_FLAG);
        this.container.addChild(equipmentItem);
        equipmentItem.x = startX + 210 * Math.floor(_index % 5);
        equipmentItem.y = startY + -1 * Math.floor(_index / 5) * 210;
      },
      generateBagItem: function generateBagItem(_itemData, _index) {
        var startX = -420;
        var startY = -120;
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.getComponent("BagItem").setData(_itemData, this.roleData, EnumType.ITEM_OWNER_TYPE.MERGE, EnumType.ITEM_SHOW_TYPE.SELECTED_FLAG);
        this.container.addChild(bagItem);
        bagItem.x = startX + 210 * Math.floor(_index % 5);
        bagItem.y = startY + -1 * Math.floor(_index / 5) * 210;
      },
      getSortList: function getSortList(_equipmentData) {
        var _this = this;
        var resultList = [];
        for (var rarity in this.roleData.bag[EnumType.BAG_TYPE.EQUIPMENT]) {
          var rarityList = this.roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][rarity];
          for (var i = 0; i < rarityList.length; i++) {
            var equipmentData = rarityList[i];
            resultList.push(equipmentData);
          }
        }
        for (var _i2 = 0; _i2 < this.roleData.equipmentList.length; _i2++) {
          var _equipmentData4 = this.roleData.equipmentList[_i2];
          resultList.push(_equipmentData4);
        }
        for (var _rarity in this.roleData.bag[EnumType.BAG_TYPE.ITEM]) {
          var _rarityList = this.roleData.bag[EnumType.BAG_TYPE.ITEM][_rarity];
          for (var _i3 = 0; _i3 < _rarityList.length; _i3++) {
            var itemData = _rarityList[_i3];
            if (itemData.type != EnumType.BAG_ITEM_TYPE.MERGE) continue;
            resultList.push(itemData);
          }
        }
        resultList.sort(function(a, b) {
          var pointA = _this.getSortPoints(_equipmentData, a);
          var pointB = _this.getSortPoints(_equipmentData, b);
          return pointB - pointA;
        });
        return resultList;
      },
      getSortPoints: function getSortPoints(_equipmentData, _currentItemData) {
        var result = _currentItemData.equipmentConfig ? 100 : 0;
        result += _currentItemData.slotPos == EnumType.EQUIPMENT_SLOT_POS.NONE ? 0 : 10;
        result += _currentItemData.rarity;
        if (null != _equipmentData) {
          var conditionList = Global.equipmentManager.getUpgradeCondition(_equipmentData);
          for (var i = 0; i < conditionList.length; i++) {
            var condition = conditionList[i];
            if (_currentItemData.equipmentConfig) {
              if (_currentItemData.rarity == condition.rarity) if (null != condition.key) {
                if (condition.key == _currentItemData.equipmentId) {
                  result += 1e3;
                  break;
                }
              } else if (condition.slot == _currentItemData.slot) {
                result += 1e3;
                break;
              }
            } else if (_currentItemData.rarity == condition.materialRarity && condition.slot == _currentItemData.slot) {
              result += 1e3;
              break;
            }
          }
        }
        return result;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        this.reset();
      },
      reset: function reset() {
        for (var i = 0; i < this.itemList.length; i++) {
          var item = this.itemList[i];
          item.selected = false;
        }
      },
      updateEquipmentsAndMaterials: function updateEquipmentsAndMaterials(_equipmentData) {
        this.clearItems();
        this.itemList = this.getSortList(_equipmentData);
        for (var i = 0; i < this.itemList.length; i++) {
          var item = this.itemList[i];
          item.equipmentConfig ? this.generateEquipmentItem(item, i) : this.generateBagItem(item, i);
        }
        this.container.height = 210 * Math.ceil(this.itemList.length / 5) + 30;
      },
      onClickClose: function onClickClose() {
        Global.gui.remove(gameConfig.UIID.EquipMerge);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  EquipmentConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "22fbax2ioFPrppFXPhSiNPz", "EquipmentConfig");
    "use strict";
    var EquipmentConfig = cc.Class({
      name: "EquipmentConfig",
      statics: {
        data: [ {
          id: "1001",
          name: "S\u7eb8\u56e2S-\u7d2b",
          skinName: "Weapon_1",
          img: "equip_1001",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1011",
          skills: "0,1214,1215,1202,0,0,1237,0,0,1178"
        }, {
          id: "1002",
          name: "S\u65a7\u5934S-\u7d2b",
          skinName: "Weapon_3",
          img: "equip_1002",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1003",
          skills: "1229,1238,1215,1202,0,0,1230,0,0,1239"
        }, {
          id: "1003",
          name: "S\u5237\u5b50S-\u7d2b",
          skinName: "Weapon_5",
          img: "equip_1003",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1009",
          skills: "1216,1167,1215,1202,0,0,1168,0,0,1169"
        }, {
          id: "1004",
          name: "S\u53cd\u51fbS-\u7d2b",
          skinName: "Weapon_7",
          img: "equip_1004",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1021",
          skills: "0,1218,1215,1202,0,0,1240,0,0,1231"
        }, {
          id: "1005",
          name: "S\u51b0\u68d2S-\u7d2b",
          skinName: "Weapon_9",
          img: "equip_1005",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1100&energy_max",
          ultimate_type: "1022",
          skills: "0,1217,1215,1203,0,0,1241,0,0,1166"
        }, {
          id: "1006",
          name: "S\u53cd\u4f24S-\u7d2b",
          skinName: "Weapon_11",
          img: "equip_1006",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1200&energy_max",
          ultimate_type: "1004",
          skills: "1179,1172,1215,1207,0,0,1173,0,0,1219"
        }, {
          id: "1007",
          name: "S\u624b\u67c4S-\u7d2b",
          skinName: "Weapon_14",
          img: "equip_1007",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1007",
          skills: "0,1187,1215,1202,0,0,1188,0,0,1182"
        }, {
          id: "1008",
          name: "S\u996e\u6599S-\u7d2b",
          skinName: "Weapon_16",
          img: "equip_1008",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1100&energy_max",
          ultimate_type: "1015",
          skills: "0,1184,1215,1202,0,0,1242,0,0,1242"
        }, {
          id: "1009",
          name: "S\u5927\u62dbS-\u7d2b",
          skinName: "Weapon_18",
          img: "equip_1009",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "800&energy_max",
          ultimate_type: "1010",
          skills: "1180,1244,1215,1202,0,0,1180,0,0,1245"
        }, {
          id: "1010",
          name: "S\u51b2\u950bS-\u7d2b",
          skinName: "Weapon_20",
          img: "equip_1010",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1006",
          skills: "0,1246,1215,1202,0,0,1247,0,0,1186"
        }, {
          id: "1101",
          name: "S\u6062\u590d\u80cc\u5305-\u7d2b",
          skinName: "Lanzi03",
          img: "equip_1101",
          slot: "1",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "2400&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1204,1248,1205,0,0,1224,0,0,1249"
        }, {
          id: "1102",
          name: "S\u590d\u6d3b\u80cc\u5305-\u7d2b",
          skinName: "Lanzi05",
          img: "equip_1102",
          slot: "1",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "2400&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1204,1196,1205,0,0,1198,0,0,1199"
        }, {
          id: "1103",
          name: "S\u7d27\u6025\u80cc\u5305-\u7d2b",
          skinName: "Lanzi04",
          img: "equip_1103",
          slot: "1",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "2400&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1204,1250,1205,0,0,1251,0,0,1252"
        }, {
          id: "1201",
          name: "S\u91cd\u4f24\u6212\u6307-\u7d2b",
          skinName: "",
          img: "equip_1201",
          slot: "2",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "30&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1201,1253,1202,0,0,1193,0,0,1195"
        }, {
          id: "1202",
          name: "S\u51b0\u51bb\u6212\u6307-\u7d2b",
          skinName: "",
          img: "equip_1202",
          slot: "2",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "30&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1201,1254,1202,0,0,1194,0,0,1256"
        }, {
          id: "1203",
          name: "S\u4e2d\u6bd2\u6212\u6307-\u7d2b",
          skinName: "",
          img: "equip_1203",
          slot: "2",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "30&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1201,1225,1202,0,0,1170,0,0,1171"
        }, {
          id: "1301",
          name: "S\u51cf\u4f24\u9970\u54c1-\u7d2b",
          skinName: "",
          img: "equip_1301",
          slot: "3",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "1200&basic_hp,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1206,1213,1207,0,0,1213,0,0,1211"
        }, {
          id: "1302",
          name: "S\u589e\u4f24\u9970\u54c1-\u7d2b",
          skinName: "",
          img: "equip_1302",
          slot: "3",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "1200&basic_hp,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1206,1257,1207,0,0,1258,0,0,1212"
        }, {
          id: "1303",
          name: "S\u63a7\u5236\u9970\u54c1-\u7d2b",
          skinName: "",
          img: "equip_1303",
          slot: "3",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "1200&basic_hp,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,1206,1259,1207,0,0,1190,0,0,1191"
        }, {
          id: "2001",
          name: "\u7eb8\u56e2-\u767d",
          skinName: "Weapon_2",
          img: "equip_2001",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1002",
          skills: "1183,0,1200,1260,0,0,1261,0,0,1237"
        }, {
          id: "2002",
          name: "\u7eb8\u56e2-\u7eff",
          skinName: "Weapon_2",
          img: "equip_2001",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1002",
          skills: "1183,0,1200,1260,0,0,1261,0,0,1237"
        }, {
          id: "2003",
          name: "\u7eb8\u56e2-\u84dd",
          skinName: "Weapon_2",
          img: "equip_2001",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1002",
          skills: "1183,0,1200,1260,0,0,1261,0,0,1237"
        }, {
          id: "2004",
          name: "\u7eb8\u56e2-\u7d2b",
          skinName: "Weapon_2",
          img: "equip_2001",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1002",
          skills: "1183,0,1200,1260,0,0,1261,0,0,1237"
        }, {
          id: "2005",
          name: "\u65a7\u5934-\u767d",
          skinName: "Weapon_4",
          img: "equip_2005",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1014",
          skills: "0,0,1200,1262,0,0,1263,0,0,1264"
        }, {
          id: "2006",
          name: "\u65a7\u5934-\u7eff",
          skinName: "Weapon_4",
          img: "equip_2005",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1014",
          skills: "0,0,1200,1262,0,0,1263,0,0,1264"
        }, {
          id: "2007",
          name: "\u65a7\u5934-\u84dd",
          skinName: "Weapon_4",
          img: "equip_2005",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1014",
          skills: "0,0,1200,1262,0,0,1263,0,0,1264"
        }, {
          id: "2008",
          name: "\u65a7\u5934-\u7d2b",
          skinName: "Weapon_4",
          img: "equip_2005",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1014",
          skills: "0,0,1200,1262,0,0,1263,0,0,1264"
        }, {
          id: "2009",
          name: "\u5237\u5b50-\u767d",
          skinName: "Weapon_6",
          img: "equip_2009",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1008",
          skills: "0,0,1200,1265,0,0,1253,0,0,1266"
        }, {
          id: "2010",
          name: "\u5237\u5b50-\u7eff",
          skinName: "Weapon_6",
          img: "equip_2009",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1008",
          skills: "0,0,1200,1265,0,0,1253,0,0,1266"
        }, {
          id: "2011",
          name: "\u5237\u5b50-\u84dd",
          skinName: "Weapon_6",
          img: "equip_2009",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1008",
          skills: "0,0,1200,1265,0,0,1253,0,0,1266"
        }, {
          id: "2012",
          name: "\u5237\u5b50-\u7d2b",
          skinName: "Weapon_6",
          img: "equip_2009",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1008",
          skills: "0,0,1200,1265,0,0,1253,0,0,1266"
        }, {
          id: "2013",
          name: "\u53cd\u51fb-\u767d",
          skinName: "Weapon_8",
          img: "equip_2013",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1016",
          skills: "0,0,1200,1218,0,0,1220,0,0,1261"
        }, {
          id: "2014",
          name: "\u53cd\u51fb-\u7eff",
          skinName: "Weapon_8",
          img: "equip_2013",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1016",
          skills: "0,0,1200,1218,0,0,1220,0,0,1261"
        }, {
          id: "2015",
          name: "\u53cd\u51fb-\u84dd",
          skinName: "Weapon_8",
          img: "equip_2013",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1016",
          skills: "0,0,1200,1218,0,0,1220,0,0,1261"
        }, {
          id: "2016",
          name: "\u53cd\u51fb-\u7d2b",
          skinName: "Weapon_8",
          img: "equip_2013",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1016",
          skills: "0,0,1200,1218,0,0,1220,0,0,1261"
        }, {
          id: "2017",
          name: "\u51b0\u68d2-\u767d",
          skinName: "Weapon_10",
          img: "equip_2017",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1013",
          skills: "0,0,1200,1267,0,0,1254,0,0,1221"
        }, {
          id: "2018",
          name: "\u51b0\u68d2-\u7eff",
          skinName: "Weapon_10",
          img: "equip_2017",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1013",
          skills: "0,0,1200,1267,0,0,1254,0,0,1221"
        }, {
          id: "2019",
          name: "\u51b0\u68d2-\u84dd",
          skinName: "Weapon_10",
          img: "equip_2017",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1013",
          skills: "0,0,1200,1267,0,0,1254,0,0,1221"
        }, {
          id: "2020",
          name: "\u51b0\u68d2-\u7d2b",
          skinName: "Weapon_10",
          img: "equip_2017",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1013",
          skills: "0,0,1200,1267,0,0,1254,0,0,1221"
        }, {
          id: "2021",
          name: "\u53cd\u4f24-\u767d",
          skinName: "Weapon_12",
          img: "equip_2021",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1017",
          skills: "0,0,1200,1268,0,0,1222,0,0,1223"
        }, {
          id: "2022",
          name: "\u53cd\u4f24-\u7eff",
          skinName: "Weapon_12",
          img: "equip_2021",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1017",
          skills: "0,0,1200,1268,0,0,1222,0,0,1223"
        }, {
          id: "2023",
          name: "\u53cd\u4f24-\u84dd",
          skinName: "Weapon_12",
          img: "equip_2021",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1017",
          skills: "0,0,1200,1268,0,0,1222,0,0,1223"
        }, {
          id: "2024",
          name: "\u53cd\u4f24-\u7d2b",
          skinName: "Weapon_12",
          img: "equip_2021",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1017",
          skills: "0,0,1200,1268,0,0,1222,0,0,1223"
        }, {
          id: "2025",
          name: "\u624b\u67c4-\u767d",
          skinName: "Weapon_13",
          img: "equip_2025",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1018",
          skills: "0,0,1200,1269,0,0,1270,0,0,1271"
        }, {
          id: "2026",
          name: "\u624b\u67c4-\u7eff",
          skinName: "Weapon_13",
          img: "equip_2025",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1018",
          skills: "0,0,1200,1269,0,0,1270,0,0,1271"
        }, {
          id: "2027",
          name: "\u624b\u67c4-\u84dd",
          skinName: "Weapon_13",
          img: "equip_2025",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1018",
          skills: "0,0,1200,1269,0,0,1270,0,0,1271"
        }, {
          id: "2028",
          name: "\u624b\u67c4-\u7d2b",
          skinName: "Weapon_13",
          img: "equip_2025",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1018",
          skills: "0,0,1200,1269,0,0,1270,0,0,1271"
        }, {
          id: "2029",
          name: "\u996e\u6599-\u767d",
          skinName: "Weapon_15",
          img: "equip_2029",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1019",
          skills: "0,0,1200,1272,0,0,1253,0,0,1221"
        }, {
          id: "2030",
          name: "\u996e\u6599-\u7eff",
          skinName: "Weapon_15",
          img: "equip_2029",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1019",
          skills: "0,0,1200,1272,0,0,1253,0,0,1221"
        }, {
          id: "2031",
          name: "\u996e\u6599-\u84dd",
          skinName: "Weapon_15",
          img: "equip_2029",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1019",
          skills: "0,0,1200,1272,0,0,1253,0,0,1221"
        }, {
          id: "2032",
          name: "\u996e\u6599-\u7d2b",
          skinName: "Weapon_15",
          img: "equip_2029",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1019",
          skills: "0,0,1200,1272,0,0,1253,0,0,1221"
        }, {
          id: "2033",
          name: "\u5927\u62db-\u767d",
          skinName: "Weapon_17",
          img: "equip_2033",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1300&energy_max",
          ultimate_type: "1005",
          skills: "1185,0,1200,1181,0,0,1273,0,0,1274"
        }, {
          id: "2034",
          name: "\u5927\u62db-\u7eff",
          skinName: "Weapon_17",
          img: "equip_2033",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1300&energy_max",
          ultimate_type: "1005",
          skills: "1185,0,1200,1181,0,0,1273,0,0,1274"
        }, {
          id: "2035",
          name: "\u5927\u62db-\u84dd",
          skinName: "Weapon_17",
          img: "equip_2033",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1300&energy_max",
          ultimate_type: "1005",
          skills: "1185,0,1200,1181,0,0,1273,0,0,1274"
        }, {
          id: "2036",
          name: "\u5927\u62db-\u7d2b",
          skinName: "Weapon_17",
          img: "equip_2033",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1300&energy_max",
          ultimate_type: "1005",
          skills: "1185,0,1200,1181,0,0,1273,0,0,1274"
        }, {
          id: "2037",
          name: "\u51b2\u950b-\u767d",
          skinName: "Weapon_19",
          img: "equip_2037",
          slot: "0",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1020",
          skills: "0,0,1200,1246,0,0,1275,0,0,1247"
        }, {
          id: "2038",
          name: "\u51b2\u950b-\u7eff",
          skinName: "Weapon_19",
          img: "equip_2037",
          slot: "0",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "36&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1020",
          skills: "0,0,1200,1246,0,0,1275,0,0,1247"
        }, {
          id: "2039",
          name: "\u51b2\u950b-\u84dd",
          skinName: "Weapon_19",
          img: "equip_2037",
          slot: "0",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "48&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1020",
          skills: "0,0,1200,1246,0,0,1275,0,0,1247"
        }, {
          id: "2040",
          name: "\u51b2\u950b-\u7d2b",
          skinName: "Weapon_19",
          img: "equip_2037",
          slot: "0",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "60&strength",
          constant_property: "1000&energy_max",
          ultimate_type: "1020",
          skills: "0,0,1200,1246,0,0,1275,0,0,1247"
        }, {
          id: "2101",
          name: "\u95ea\u907f\u80cc\u5305-\u767d",
          skinName: "Lanzi02",
          img: "equip_2101",
          slot: "1",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "960&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1276,0,0,1276,0,0,1277"
        }, {
          id: "2102",
          name: "\u95ea\u907f\u80cc\u5305-\u7eff",
          skinName: "Lanzi02",
          img: "equip_2101",
          slot: "1",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "1440&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1276,0,0,1276,0,0,1277"
        }, {
          id: "2103",
          name: "\u95ea\u907f\u80cc\u5305-\u84dd",
          skinName: "Lanzi02",
          img: "equip_2101",
          slot: "1",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "1920&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1276,0,0,1276,0,0,1277"
        }, {
          id: "2104",
          name: "\u95ea\u907f\u80cc\u5305-\u7d2b",
          skinName: "Lanzi02",
          img: "equip_2101",
          slot: "1",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "2400&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1276,0,0,1276,0,0,1277"
        }, {
          id: "2105",
          name: "\u6025\u6551\u80cc\u5305-\u767d",
          skinName: "",
          img: "equip_2105",
          slot: "1",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "960&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1278,0,0,1279,0,0,1174"
        }, {
          id: "2106",
          name: "\u6025\u6551\u80cc\u5305-\u7eff",
          skinName: "",
          img: "equip_2105",
          slot: "1",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "1440&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1278,0,0,1279,0,0,1174"
        }, {
          id: "2107",
          name: "\u6025\u6551\u80cc\u5305-\u84dd",
          skinName: "",
          img: "equip_2105",
          slot: "1",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "1920&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1278,0,0,1279,0,0,1174"
        }, {
          id: "2108",
          name: "\u6025\u6551\u80cc\u5305-\u7d2b",
          skinName: "",
          img: "equip_2105",
          slot: "1",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "2400&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1278,0,0,1279,0,0,1174"
        }, {
          id: "2109",
          name: "\u51b0\u51bb\u80cc\u5305-\u767d",
          skinName: "Lanzi01",
          img: "equip_2109",
          slot: "1",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "960&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1254,0,0,1255,0,0,1280"
        }, {
          id: "2110",
          name: "\u51b0\u51bb\u80cc\u5305-\u7eff",
          skinName: "Lanzi01",
          img: "equip_2109",
          slot: "1",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "1440&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1254,0,0,1255,0,0,1280"
        }, {
          id: "2111",
          name: "\u51b0\u51bb\u80cc\u5305-\u84dd",
          skinName: "Lanzi01",
          img: "equip_2109",
          slot: "1",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "1920&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1254,0,0,1255,0,0,1280"
        }, {
          id: "2112",
          name: "\u51b0\u51bb\u80cc\u5305-\u7d2b",
          skinName: "Lanzi01",
          img: "equip_2109",
          slot: "1",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "2400&basic_hp",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1204,1254,0,0,1255,0,0,1280"
        }, {
          id: "2201",
          name: "\u751f\u547d\u6212\u6307-\u767d",
          skinName: "",
          img: "equip_2201",
          slot: "2",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "12&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1175,0,0,1176,0,0,1177"
        }, {
          id: "2202",
          name: "\u751f\u547d\u6212\u6307-\u7eff",
          skinName: "",
          img: "equip_2201",
          slot: "2",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "18&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1175,0,0,1176,0,0,1177"
        }, {
          id: "2203",
          name: "\u751f\u547d\u6212\u6307-\u84dd",
          skinName: "",
          img: "equip_2201",
          slot: "2",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1175,0,0,1176,0,0,1177"
        }, {
          id: "2204",
          name: "\u751f\u547d\u6212\u6307-\u7d2b",
          skinName: "",
          img: "equip_2201",
          slot: "2",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "30&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1175,0,0,1176,0,0,1177"
        }, {
          id: "2205",
          name: "\u66b4\u51fb\u6212\u6307-\u767d",
          skinName: "",
          img: "equip_2205",
          slot: "2",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "12&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1263,0,0,1281,0,0,1210"
        }, {
          id: "2206",
          name: "\u66b4\u51fb\u6212\u6307-\u7eff",
          skinName: "",
          img: "equip_2205",
          slot: "2",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "18&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1263,0,0,1281,0,0,1210"
        }, {
          id: "2207",
          name: "\u66b4\u51fb\u6212\u6307-\u84dd",
          skinName: "",
          img: "equip_2205",
          slot: "2",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1263,0,0,1281,0,0,1210"
        }, {
          id: "2208",
          name: "\u66b4\u51fb\u6212\u6307-\u7d2b",
          skinName: "",
          img: "equip_2205",
          slot: "2",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "30&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1263,0,0,1281,0,0,1210"
        }, {
          id: "2209",
          name: "\u80fd\u91cf\u6212\u6307-\u767d",
          skinName: "",
          img: "equip_2209",
          slot: "2",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "12&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1244,0,0,1282,0,0,1227"
        }, {
          id: "2210",
          name: "\u80fd\u91cf\u6212\u6307-\u7eff",
          skinName: "",
          img: "equip_2209",
          slot: "2",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "18&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1244,0,0,1282,0,0,1227"
        }, {
          id: "2211",
          name: "\u80fd\u91cf\u6212\u6307-\u84dd",
          skinName: "",
          img: "equip_2209",
          slot: "2",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "24&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1244,0,0,1282,0,0,1227"
        }, {
          id: "2212",
          name: "\u80fd\u91cf\u6212\u6307-\u7d2b",
          skinName: "",
          img: "equip_2209",
          slot: "2",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "30&strength,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1201,1244,0,0,1282,0,0,1227"
        }, {
          id: "2301",
          name: "\u9501\u5b50\u5f39\u9970\u54c1-\u767d",
          skinName: "",
          img: "equip_2301",
          slot: "3",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "600&basic_hp,4&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1276,0,0,1189,0,0,1228"
        }, {
          id: "2302",
          name: "\u9501\u5b50\u5f39\u9970\u54c1-\u7eff",
          skinName: "",
          img: "equip_2301",
          slot: "3",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "720&basic_hp,6&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1276,0,0,1189,0,0,1228"
        }, {
          id: "2303",
          name: "\u9501\u5b50\u5f39\u9970\u54c1-\u84dd",
          skinName: "",
          img: "equip_2301",
          slot: "3",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "960&basic_hp,8&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1276,0,0,1189,0,0,1228"
        }, {
          id: "2304",
          name: "\u9501\u5b50\u5f39\u9970\u54c1-\u7d2b",
          skinName: "",
          img: "equip_2301",
          slot: "3",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "1200&basic_hp,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1276,0,0,1189,0,0,1228"
        }, {
          id: "2305",
          name: "BOSS\u9970\u54c1-\u767d",
          skinName: "",
          img: "equip_2305",
          slot: "3",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "600&basic_hp,4&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1208,0,0,1209,0,0,1192"
        }, {
          id: "2306",
          name: "BOSS\u9970\u54c1-\u7eff",
          skinName: "",
          img: "equip_2305",
          slot: "3",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "720&basic_hp,6&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1208,0,0,1209,0,0,1192"
        }, {
          id: "2307",
          name: "BOSS\u9970\u54c1-\u84dd",
          skinName: "",
          img: "equip_2305",
          slot: "3",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "960&basic_hp,8&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1208,0,0,1209,0,0,1192"
        }, {
          id: "2308",
          name: "BOSS\u9970\u54c1-\u7d2b",
          skinName: "",
          img: "equip_2305",
          slot: "3",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "1200&basic_hp,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1208,0,0,1209,0,0,1192"
        }, {
          id: "2309",
          name: "\u80fd\u91cf\u9970\u54c1-\u767d",
          skinName: "",
          img: "equip_2309",
          slot: "3",
          rarity: "0",
          level: "1",
          breakthrough: "0",
          base_property: "600&basic_hp,4&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1283,0,0,1284,0,0,1227"
        }, {
          id: "2310",
          name: "\u80fd\u91cf\u9970\u54c1-\u7eff",
          skinName: "",
          img: "equip_2309",
          slot: "3",
          rarity: "1",
          level: "1",
          breakthrough: "0",
          base_property: "720&basic_hp,6&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1283,0,0,1284,0,0,1227"
        }, {
          id: "2311",
          name: "\u80fd\u91cf\u9970\u54c1-\u84dd",
          skinName: "",
          img: "equip_2309",
          slot: "3",
          rarity: "2",
          level: "1",
          breakthrough: "0",
          base_property: "960&basic_hp,8&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1283,0,0,1284,0,0,1227"
        }, {
          id: "2312",
          name: "\u80fd\u91cf\u9970\u54c1-\u7d2b",
          skinName: "",
          img: "equip_2309",
          slot: "3",
          rarity: "3",
          level: "1",
          breakthrough: "0",
          base_property: "1200&basic_hp,10&armor",
          constant_property: "",
          ultimate_type: "",
          skills: "0,0,1206,1283,0,0,1284,0,0,1227"
        } ]
      }
    });
    module.exports = EquipmentConfig;
    cc._RF.pop();
  }, {} ],
  EquipmentData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6d4dbns6n1D059hgUEcawHX", "EquipmentData");
    "use strict";
    var EnumType = require("EnumType");
    var EquipmentData = cc.Class({
      extends: cc.Component,
      properties: {
        equipmentConfig: null,
        equipmentId: null,
        roleData: null,
        baseProperty: null,
        rarity: null,
        level: null,
        slot: null
      },
      setData: function setData(_roleData, _equipmentConfig) {
        this.equipmentConfig = _equipmentConfig;
        this.equipmentId = _equipmentConfig.id;
        this.roleData = _roleData;
        this.slotPos = EnumType.EQUIPMENT_SLOT_POS.NONE;
        this.skillsConfigArr = this.equipmentConfig.skills.split(",");
        this.resetAll();
        this.slot = this.equipmentConfig.slot;
      },
      resetAll: function resetAll() {
        this.reset();
        this.rarity = parseInt(this.equipmentConfig.rarity);
        this.updateSkills();
      },
      updateSkills: function updateSkills() {
        this.skills = [];
        for (var i = 0; i < this.skillsConfigArr.length; i++) {
          var skillId = this.skillsConfigArr[i];
          this.rarity >= i && 0 != skillId && this.skills.push(skillId);
        }
      },
      reset: function reset() {
        this.baseProperty = [];
        var basePropertyArr = this.equipmentConfig.base_property.split(",");
        for (var i = 0; i < basePropertyArr.length; i++) {
          var basePropertyStr = basePropertyArr[i];
          var propertyArr = basePropertyStr.split("&");
          this.baseProperty.push({
            key: propertyArr[1],
            value: parseInt(propertyArr[0])
          });
        }
        this.constantProperty = [];
        if ("" != this.equipmentConfig.constant_property) {
          var constantPropertyArr = this.equipmentConfig.constant_property.split(",");
          for (var _i = 0; _i < constantPropertyArr.length; _i++) {
            var constantPropertyStr = constantPropertyArr[_i];
            var _propertyArr = constantPropertyStr.split("&");
            this.constantProperty.push({
              key: _propertyArr[1],
              value: parseInt(_propertyArr[0])
            });
          }
        }
        this.level = parseInt(this.equipmentConfig.level);
      }
    });
    module.exports = EquipmentData;
    cc._RF.pop();
  }, {
    EnumType: "EnumType"
  } ],
  EquipmentDecompose: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbdf2RlNmJMuLEud+vrwSRW", "EquipmentDecompose");
    "use strict";
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        levelDownBtn: cc.Node,
        downgradeBtn: cc.Node,
        equipmentItem: cc.Node,
        toggleLevelDown: cc.Button,
        toggleDowngrade: cc.Button,
        levelDownButtonSprite: cc.Sprite,
        downgradeButtonSprite: cc.Sprite,
        blueSpriteFrame: cc.SpriteFrame,
        purpleSpriteFrame: cc.SpriteFrame,
        equipmentItemPrefab: cc.Prefab,
        bagItemPrefab: cc.Prefab,
        equipmentItemList: [ cc.Node ],
        equipmentItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        bagItemPool: [ cc.Node ],
        itemsContainer: cc.Node,
        title: cc.Node,
        desc: cc.Node
      },
      start: function start() {},
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.itemsContainer.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.itemsContainer.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
      },
      onAdded: function onAdded(_args) {
        this.equipmentData = _args.equipmentData;
        this.roleData = _args.roleData;
        this.showIndex = "string" == typeof this.equipmentData.level && this.equipmentData.level.indexOf("+") >= 0 || this.equipmentData.level > 1 ? 0 : 1;
        if ("string" == typeof this.equipmentData.level && this.equipmentData.level.indexOf("+") >= 0 || this.equipmentData.level > 1) {
          this.levelDownButtonSprite.spriteFrame = this.blueSpriteFrame;
          this.downgradeButtonSprite.spriteFrame = this.purpleSpriteFrame;
        } else {
          this.levelDownButtonSprite.spriteFrame = this.purpleSpriteFrame;
          this.downgradeButtonSprite.spriteFrame = this.blueSpriteFrame;
        }
        this.toggleLevelDown.interactable = "string" == typeof this.equipmentData.level && this.equipmentData.level.indexOf("+") >= 0 || this.equipmentData.level > 1;
        this.toggleDowngrade.interactable = this.equipmentData.rarity >= EnumType.RARE_TYPE_EQUIPMENT.EPIC_1;
        this.updateUI();
      },
      onClickLevelDown: function onClickLevelDown() {
        Global.equipmentManager.levelDown2Min(this.equipmentData, this.roleData);
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateEquipments(false);
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateSlotEquipment();
        var args = {};
        args.items = this.materials;
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        this.onClickClose();
        Global.gui.remove(gameConfig.UIID.EquipmentItemTip);
      },
      onClickDowngrade: function onClickDowngrade() {
        Global.equipmentManager.downgrade(this.equipmentData, this.roleData);
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateEquipments(false);
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateSlotEquipment();
        var args = {};
        args.items = this.materials;
        args.roleData = this.roleData;
        args.fromDecompose = true;
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        this.onClickClose();
        Global.gui.remove(gameConfig.UIID.EquipmentItemTip);
      },
      onClickToggleLevelDown: function onClickToggleLevelDown() {
        if (0 == this.showIndex) return;
        this.levelDownButtonSprite.spriteFrame = this.blueSpriteFrame;
        this.downgradeButtonSprite.spriteFrame = this.purpleSpriteFrame;
        this.showIndex = 0;
        this.updateUI();
      },
      onClickToggleDowngrade: function onClickToggleDowngrade() {
        if (1 == this.showIndex) return;
        this.levelDownButtonSprite.spriteFrame = this.purpleSpriteFrame;
        this.downgradeButtonSprite.spriteFrame = this.blueSpriteFrame;
        this.showIndex = 1;
        this.updateUI();
      },
      updateUI: function updateUI() {
        this.equipmentItem.getComponent("EquipmentItem").setData(this.equipmentData, this.roleData);
        this.clearItems();
        this.levelDownBtn.active = 0 == this.showIndex;
        this.downgradeBtn.active = 0 != this.showIndex;
        var equipmentItem;
        var bagItem;
        if (0 == this.showIndex) {
          this.materials = Global.equipmentManager.getLevelDown2MaxMaterials(this.equipmentData);
          equipmentItem = this.equipmentItemPool.length < 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
          this.equipmentItemList.push(equipmentItem);
          this.itemsContainer.addChild(equipmentItem);
          var equipmentDataLevel1 = Global.equipmentManager.generateEquipmentData(this.equipmentData.equipmentConfig, 1, this.equipmentData.rarity);
          equipmentItem.getComponent("EquipmentItem").setData(equipmentDataLevel1, this.roleData);
          for (var i = 0; i < this.materials.length; i++) {
            var itemData = this.materials[i];
            bagItem = this.bagItemPool.length < 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
            this.bagItemList.push(bagItem);
            this.itemsContainer.addChild(bagItem);
            bagItem.getComponent("BagItem").setData(itemData);
          }
          this.materials.push(equipmentDataLevel1);
          this.title.getComponent("LabelUpdater").setContent("equipment_decompose_downlevel_title");
          this.desc.getComponent("LabelUpdater").setContent("equipment_decompose_downlevel_tip");
        } else {
          this.materials = Global.equipmentManager.getDowngradeMaterials(this.equipmentData);
          for (var j = 0; j < this.materials.length; j++) {
            var item = this.materials[j];
            if (item.equipmentConfig) {
              equipmentItem = this.equipmentItemPool.length < 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
              this.equipmentItemList.push(equipmentItem);
              this.itemsContainer.addChild(equipmentItem);
              equipmentItem.getComponent("EquipmentItem").setData(item, this.roleData);
            } else {
              bagItem = this.bagItemPool.length < 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
              this.bagItemList.push(bagItem);
              this.itemsContainer.addChild(bagItem);
              bagItem.getComponent("BagItem").setData(item, this.roleData);
            }
          }
          this.title.getComponent("LabelUpdater").setContent("equipment_decompose_downgrade_title");
          this.desc.getComponent("LabelUpdater").setContent("equipment_decompose_downgrade_tip");
        }
      },
      onClickClose: function onClickClose() {
        Global.gui.remove(gameConfig.UIID.EquipmentDecompose);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  EquipmentItemTipText: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f0bce1wXH5F9qKE09elfi73", "EquipmentItemTipText");
    "use strict";
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        bgList: [ cc.SpriteFrame ],
        bg: cc.Sprite,
        richText: cc.RichText,
        rarityIconList: [ cc.SpriteFrame ],
        rarityIconLockList: [ cc.SpriteFrame ],
        rarityIcon: cc.Sprite
      },
      start: function start() {},
      setContent: function setContent(_string, _maxCount, _index, _isProperty, _availableColor, _isLock, _skillRarity) {
        this.richText.string = _string;
        this.bg.spriteFrame = 1 == _maxCount ? _isProperty ? this.bgList[2] : this.bgList[5] : 0 == _index ? _isProperty ? this.bgList[1] : this.bgList[0] : _index == _maxCount - 1 ? (_index + 1) % 2 == 0 ? this.bgList[4] : this.bgList[2] : (_index + 1) % 2 == 0 ? this.bgList[3] : this.bgList[1];
        if (_isProperty) {
          this.rarityIcon.node.active = false;
          this.richText.node.setPosition(-390, 0);
        } else {
          this.richText.node.color = _availableColor;
          this.richText.node.setPosition(-350, 0);
          this.rarityIcon.node.active = true;
          this.rarityIcon.spriteFrame = _isLock ? this.rarityIconLockList[_skillRarity] : this.rarityIconList[_skillRarity];
        }
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType"
  } ],
  EquipmentItemTip: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "42b9fxWgkhH4qGR0aOEAfiS", "EquipmentItemTip");
    "use strict";
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    var UltimateAbilityConfig = require("UltimateAbilityConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        equipmentItem: cc.Node,
        nameLabel: cc.Node,
        typeLabel: cc.Node,
        rarityLabel: cc.Node,
        levelLabel: cc.Node,
        materialsNode: cc.Node,
        materialsCount: cc.Node,
        materialsNeededCount: cc.Node,
        powerLabel: cc.Node,
        equipmentItemTextPool: [ cc.Node ],
        equipmentItemTextList: [ cc.Node ],
        equipmentItemTextPrefab: cc.Prefab,
        desc1Container: cc.Node,
        desc2Container: cc.Node,
        skillsContainer: cc.Node,
        maxEnergyLabel: cc.Node,
        equipBtn: cc.Node,
        takeOffBtn: cc.Node,
        levelUpBtn: cc.Button,
        levelUp2MaxBtn: cc.Button,
        breakthroughBtn: cc.Button,
        levelDownBtn: cc.Button
      },
      onLoad: function onLoad() {},
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.equipmentData = _args.equipmentData;
        this.roleData = _args.roleData;
        this.currentEquipmentItem = _args.currentEquipmentItem;
        if (!this.skillLabelColorList) {
          this.skillLabelColorList = [];
          this.skillLabelColorList[EnumType.RARE_TYPE.COMMON] = new cc.color(97, 197, 37, 255);
          this.skillLabelColorList[EnumType.RARE_TYPE.RARE] = new cc.color(54, 125, 187, 255);
          this.skillLabelColorList[EnumType.RARE_TYPE.EPIC] = new cc.color(137, 60, 214, 255);
          this.skillLabelColorList[EnumType.RARE_TYPE.LEGENDARY] = new cc.color(229, 136, 29, 255);
          this.skillLabelColorList[EnumType.RARE_TYPE.MYTHIC] = new cc.color(232, 32, 74, 255);
          this.unAvailableColor = new cc.color(157, 138, 106, 255);
        }
        this.updateData();
      },
      getNextTen: function getNextTen(num) {
        return num % 10 === 0 ? num : num - num % 10 + 10;
      },
      clearItems: function clearItems() {
        while (this.equipmentItemTextList.length > 0) {
          var item = this.equipmentItemTextList.pop();
          item.removeFromParent();
          this.equipmentItemTextPool.push(item);
        }
      },
      setLevelLabel: function setLevelLabel() {
        if (this.equipmentData.level >= 70) this.levelLabel.string = "70"; else {
          var nextTen;
          if ("string" === typeof this.equipmentData.level && this.equipmentData.level.indexOf("+") >= 0) {
            var levelArr = this.equipmentData.level.split("+");
            var level = parseInt(levelArr[0]);
            nextTen = this.getNextTen(level + 1);
            this.levelLabel.getComponent("LabelUpdater").setString(level + "/" + nextTen);
          } else {
            nextTen = this.getNextTen(this.equipmentData.level);
            this.levelLabel.getComponent("LabelUpdater").setString(this.equipmentData.level + "/" + nextTen);
          }
        }
      },
      getBaseDamage: function getBaseDamage(_config) {
        var damageArr = _config.value.split("|");
        if (1 == damageArr.length) return Number(damageArr[0]);
        var weapon = this.equipmentData;
        if (null != weapon) {
          var enhancementPointItem = Global.equipmentManager.enhancementPointsConfigDict[weapon.level];
          var rarityValue = parseInt(enhancementPointItem["rarity_" + weapon.rarity]);
          return Number(damageArr[0]) + Number(damageArr[1]) * rarityValue;
        }
        return 0;
      },
      updateData: function updateData() {
        this.clearItems();
        this.equipmentItem.getComponent("EquipmentItem").setData(this.equipmentData, this.roleData);
        this.nameLabel.getComponent("LabelUpdater").setString(this.equipmentData.equipmentConfig.name);
        this.nameLabel.getComponent("LabelUpdater").setColor(Global.utils.getEquipmentLabelColor(this.equipmentData.rarity));
        this.typeLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("equipment_slot_" + this.equipmentData.slot) + "(");
        this.rarityLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("equipment_rarity_" + this.equipmentData.rarity));
        this.rarityLabel.getComponent("LabelUpdater").setColor(Global.utils.getEquipmentLabelColor(this.equipmentData.rarity));
        this.setLevelLabel();
        this.setBasicPropertiesLabel();
        this.desc2Container.active = this.equipmentData.slot == EnumType.EQUIPMENT_TYPE.WEAPON;
        this.desc2Container.active && this.maxEnergyLabel.getComponent("LabelUpdater").setString(this.equipmentData.constantProperty[0].value);
        if (this.desc2Container.active) {
          var textItem;
          textItem = this.equipmentItemTextPool.length > 0 ? this.equipmentItemTextPool.pop() : cc.instantiate(this.equipmentItemTextPrefab);
          this.equipmentItemTextList.push(textItem);
          this.desc2Container.addChild(textItem);
          var ultimateConfig = null;
          for (var i = 0; i < UltimateAbilityConfig.data.length; i++) {
            var item = UltimateAbilityConfig.data[i];
            if (item.id == this.equipmentData.equipmentConfig.ultimate_type) {
              ultimateConfig = item;
              break;
            }
          }
          var baseDamage = this.getBaseDamage(ultimateConfig);
          var coefficientArr = ultimateConfig.coefficient.split("|");
          var coefficient = 100 * coefficientArr[0] + "%";
          var valueStr = baseDamage > 0 ? Global.utils.formatNumberWithUnit(baseDamage) + " + " + coefficient : coefficient;
          textItem.getComponent("EquipmentItemTipText").setContent(Global.languageManager.t("equipment_ultimate_" + this.equipmentData.equipmentConfig.ultimate_type, [ valueStr ]), 1, 0, true);
        }
        var skillMaxCount = 0;
        var skillId;
        var isS;
        for (var _i = 0; _i < this.equipmentData.skillsConfigArr.length; _i++) {
          skillId = this.equipmentData.skillsConfigArr[_i];
          isS = this.equipmentData.equipmentId < 2e3;
          0 != skillId && (isS && _i >= 1 || _i >= 2) && skillMaxCount++;
        }
        var curIndex = 0;
        for (var j = 0; j < this.equipmentData.skillsConfigArr.length; j++) {
          skillId = this.equipmentData.skillsConfigArr[j];
          isS = this.equipmentData.equipmentId < 2e3;
          if (0 != skillId && (isS && j >= 1 || j >= 2)) {
            var _textItem = void 0;
            _textItem = this.equipmentItemTextPool.length > 0 ? this.equipmentItemTextPool.pop() : cc.instantiate(this.equipmentItemTextPrefab);
            this.equipmentItemTextList.push(_textItem);
            this.skillsContainer.addChild(_textItem);
            var skillStr = void 0;
            var skillLang = Global.languageManager.i18nData["equipment_skill_" + skillId];
            var skillLangKey = void 0;
            skillLangKey = null == skillLang ? "skill_" + skillId + "_desc" : "equipment_skill_" + skillId;
            var valueListStr = Global.languageManager.i18nData[skillLangKey].valueList;
            var valueList = null;
            var result = [];
            if ("" != valueListStr) {
              valueList = valueListStr.split(",");
              for (var k = 0; k < valueList.length; k++) {
                var _item = valueList[k];
                _item = _item.split("|");
                var value = Math.floor(this.roleData.getStaticData()[_item[1]] * Number(_item[0]) * .01);
                result.push(value);
              }
              skillStr = Global.languageManager.t(skillLangKey, result, false);
            } else skillStr = Global.languageManager.t(skillLangKey, null, false);
            var availableColor = this.equipmentData.rarity >= j ? Global.utils.getEquipmentLabelColor(j) : this.unAvailableColor;
            _textItem.getComponent("EquipmentItemTipText").setContent(skillStr, skillMaxCount, curIndex, false, availableColor, this.equipmentData.rarity < j, j);
            curIndex++;
          }
        }
        this.equipBtn.active = this.equipmentData.slotPos == EnumType.EQUIPMENT_SLOT_POS.NONE;
        this.takeOffBtn.active = this.equipmentData.slotPos != EnumType.EQUIPMENT_SLOT_POS.NONE;
        this.powerLabel.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(Global.equipmentManager.getEquipmentPower(this.equipmentData)));
        this.setMaterialsLabel();
      },
      setBasicPropertiesLabel: function setBasicPropertiesLabel() {
        for (var i = 0; i < this.equipmentData.baseProperty.length; i++) {
          var property = this.equipmentData.baseProperty[i];
          var textItem = void 0;
          textItem = this.equipmentItemTextPool.length > 0 ? this.equipmentItemTextPool.pop() : cc.instantiate(this.equipmentItemTextPrefab);
          this.equipmentItemTextList.push(textItem);
          this.desc1Container.addChild(textItem);
          var key_i18n = Global.languageManager.t("property_" + property.key);
          textItem.getComponent("EquipmentItemTipText").setContent("<color=#59372e>" + key_i18n + "</color><color=#3aa417> + " + Global.utils.formatNumberWithUnit(property.value) + "</color>", this.equipmentData.baseProperty.length, i, true);
        }
      },
      setMaterialsLabel: function setMaterialsLabel() {
        if (70 == this.equipmentData.level) {
          this.materialsNode.active = false;
          this.levelUp2MaxBtn.node.active = this.levelUpBtn.node.active = this.breakthroughBtn.node.active = false;
        } else {
          this.materialsNode.active = true;
          var materials = Global.equipmentManager.getNextLevelMaterials(this.equipmentData);
          var materialsCount = parseInt(Global.bagManager.checkItemCount(materials.ids[0], this.roleData));
          this.materialsCount.string = null == materialsCount ? "" : materialsCount;
          this.materialsNeededCount.string = null == materialsCount ? "" : "/" + materials.counts[0];
          var nextLevel = Global.equipmentManager.getNextLevel(this.equipmentData.level);
          this.levelUp2MaxBtn.interactable = this.breakthroughBtn.interactable = this.levelUpBtn.interactable = null != nextLevel && null != materialsCount && materialsCount >= parseInt(materials.counts[0]);
          if ("string" === typeof nextLevel && nextLevel.indexOf("+") >= 0) {
            this.levelUpBtn.node.active = false;
            this.levelUp2MaxBtn.node.active = false;
            this.breakthroughBtn.node.active = true;
          } else {
            this.levelUpBtn.node.active = true;
            this.levelUp2MaxBtn.node.active = true;
            this.breakthroughBtn.node.active = false;
          }
        }
        this.levelDownBtn.interactable = "string" == typeof this.equipmentData.level && this.equipmentData.level.indexOf("+") >= 0 || this.equipmentData.level > 1 || this.equipmentData.rarity >= EnumType.RARE_TYPE_EQUIPMENT.EPIC_1;
      },
      onClickLevelDown: function onClickLevelDown() {
        Global.gui.open(gameConfig.UIID.EquipmentDecompose, {
          equipmentData: this.equipmentData,
          roleData: this.roleData
        });
      },
      onClickBreakThrough: function onClickBreakThrough() {
        Global.equipmentManager.levelUp(this.equipmentData, this.roleData, true);
        this.currentEquipmentItem.getComponent("EquipmentItem").levelLabel.getComponent("LabelUpdater").setString("Lv." + this.equipmentData.level);
        this.updateData();
      },
      onClickLevelUp2Max: function onClickLevelUp2Max() {
        Global.equipmentManager.levelUp2Max(this.equipmentData, this.roleData);
        this.currentEquipmentItem.getComponent("EquipmentItem").levelLabel.getComponent("LabelUpdater").setString("Lv." + this.equipmentData.level);
        this.updateData();
      },
      onClickLevelUp: function onClickLevelUp() {
        Global.equipmentManager.levelUp(this.equipmentData, this.roleData, false);
        this.currentEquipmentItem.getComponent("EquipmentItem").levelLabel.getComponent("LabelUpdater").setString("Lv." + this.equipmentData.level);
        this.updateData();
      },
      onClickTakeOff: function onClickTakeOff() {
        this.currentEquipmentItem.active = false;
        Global.equipmentManager.takeOff(this.equipmentData, this.roleData);
        var equipmentView = Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView");
        equipmentView.updateEquipments();
        this.onClickClose();
      },
      onClickEquip: function onClickEquip() {
        Global.equipmentManager.setCurrentEquipment(this.equipmentData);
        var equipmentView = Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView");
        if (this.equipmentData.slot == EnumType.EQUIPMENT_TYPE.WEAPON || this.equipmentData.slot == EnumType.EQUIPMENT_TYPE.BACKPACK) {
          var currentEquipmentData = Global.equipmentManager.getCurrentEquipment();
          var currentSlot;
          currentSlot = this.equipmentData.slot == EnumType.EQUIPMENT_TYPE.WEAPON ? equipmentView.slots[0] : equipmentView.slots[3];
          var currentSlotComponent = currentSlot.getComponent("SlotPos");
          Global.equipmentManager.setEquipment(currentEquipmentData, currentSlotComponent.equipmentItem.active ? currentSlotComponent.equipmentItem.getComponent("EquipmentItem").equipmentData : null, currentSlotComponent.index, this.roleData);
          equipmentView.updateEquipments();
          currentSlotComponent.equipmentItem.getComponent("EquipmentItem").setData(currentEquipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.SLOT);
          currentSlotComponent.equipmentItem.active = true;
          Global.equipmentManager.setCurrentEquipment(null);
        } else equipmentView.updateSlot(this.equipmentData.slot);
        this.onClickClose();
      },
      onClickClose: function onClickClose() {
        Global.gui.remove(gameConfig.UIID.EquipmentItemTip);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    UltimateAbilityConfig: "UltimateAbilityConfig"
  } ],
  EquipmentItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3d895rj9YpKhabCY0BEuOu7", "EquipmentItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        rareBgList: [ cc.SpriteFrame ],
        currentBg: cc.Sprite,
        leftTopList: [ cc.SpriteFrame ],
        leftTop: cc.Sprite,
        typeList: [ cc.SpriteFrame ],
        currentType: cc.Sprite,
        rarityNumList: [ cc.SpriteFrame ],
        currentRarityNum: cc.Sprite,
        levelLabel: cc.Node,
        itemMask: cc.Node,
        countLabel: cc.Node,
        lockIcon: cc.Node,
        selectedIcon: cc.Node,
        equipedNode: cc.Node,
        iconSprite: cc.Sprite,
        sIcon: cc.Node,
        probLabel: cc.Node,
        container: cc.Node,
        flash: sp.Skeleton
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd.bind(this), this);
      },
      onEnable: function onEnable() {
        var _this = this;
        if (this.ownerType == EnumType.EQUIPMENT_ITEM_OWNER_TYPE.OPEN_BOX_RESULT) {
          this.container.setScale(0, 0);
          this.flash.clearTracks();
          this.flash.setToSetupPose();
          this.flash.updateWorldTransform();
          var aniName = this.equipmentData.rarity >= EnumType.RARE_TYPE_EQUIPMENT.EPIC ? "Purple" : "Blue";
          this.flash.setAnimation(0, aniName, false);
          this.flash.node.active = true;
          this.flash.setEventListener(function(trackEntry, event) {
            "Start" === event.data.name && cc.tween(_this.container).to(.2, {
              scale: 1
            }).start();
          });
          this.flash.setCompleteListener(function(trackEntry) {
            _this.flash.node.active = false;
          });
        } else {
          this.container.setScale(1, 1);
          this.flash.node.active = false;
        }
      },
      setMask: function setMask(_mask) {
        this.itemMask.active = _mask;
      },
      onTouchEnd: function onTouchEnd() {
        if (this.ownerType == EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE_SLOT) {
          var equipMergeNode = Global.gui.get(gameConfig.UIID.EquipMerge);
          equipMergeNode && equipMergeNode.getComponent("EquipMerge").onClickEquipmentItem2Cancel(this.node);
        } else if (this.ownerType == EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE) {
          var _equipMergeNode = Global.gui.get(gameConfig.UIID.EquipMerge);
          _equipMergeNode && _equipMergeNode.getComponent("EquipMerge").onClickEquipmentItem2Merge(this.node);
        } else if (this.ownerType == EnumType.EQUIPMENT_ITEM_OWNER_TYPE.EQUIP || this.ownerType == EnumType.EQUIPMENT_ITEM_OWNER_TYPE.SLOT) {
          var currentEquipmentData = Global.equipmentManager.getCurrentEquipment();
          if (currentEquipmentData) return;
          Global.gui.open(gameConfig.UIID.EquipmentItemTip, {
            equipmentData: this.equipmentData,
            roleData: this.roleData,
            currentEquipmentItem: this.node
          });
        } else if (this.ownerType == EnumType.EQUIPMENT_ITEM_OWNER_TYPE.SELECT_EQUIPMENT) {
          var selectNode = Global.gui.get(gameConfig.UIID.ShopSelectEquipment);
          selectNode && selectNode.getComponent("ShopSelectEquipment").onSelectEquipment(this.node);
        }
      },
      showLock: function showLock(_lock) {
        this.setMask(_lock);
        this.lockIcon.active = _lock;
      },
      showSelect: function showSelect(_select) {
        this.setMask(_select);
        this.selectedIcon.active = _select;
      },
      showEquiped: function showEquiped(_isShow) {
        this.equipedNode.active = _isShow;
      },
      setData: function setData(_equipmentData, _roleData, _ownerType, _showType, _prob) {
        void 0 === _ownerType && (_ownerType = EnumType.EQUIPMENT_ITEM_OWNER_TYPE.NONE);
        void 0 === _showType && (_showType = EnumType.EQUIPMENT_ITEM_SHOW_TYPE.NONE);
        this.equipmentData = _equipmentData;
        if (null == _equipmentData) return;
        this.roleData = _roleData;
        this.currentBg.spriteFrame = this.rareBgList[_equipmentData.rarity];
        this.leftTop.spriteFrame = this.leftTopList[_equipmentData.rarity];
        this.currentType.spriteFrame = this.typeList[_equipmentData.slot];
        var spriteFrame = this.rarityNumList[_equipmentData.rarity];
        if (null != spriteFrame) {
          this.currentRarityNum.node.active = true;
          this.currentRarityNum.spriteFrame = spriteFrame;
        } else this.currentRarityNum.node.active = false;
        this.levelLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("level") + _equipmentData.level);
        this.setMask(false);
        if (_equipmentData.count) {
          this.countLabel.active = true;
          this.countLabel.getComponent("LabelUpdater").setString("X" + _equipmentData.count);
        } else this.countLabel.active = false;
        this.selectedIcon.active = false;
        _showType & EnumType.EQUIPMENT_ITEM_SHOW_TYPE.SELECTED_FLAG && this.showSelect(this.equipmentData.selected);
        this.lockIcon.active = false;
        this.equipedNode.active = !!(_showType & EnumType.EQUIPMENT_ITEM_SHOW_TYPE.EQUIPED_FLAG) && this.equipmentData.slotPos != EnumType.EQUIPMENT_SLOT_POS.NONE;
        this.probLabel.active = _showType & EnumType.EQUIPMENT_ITEM_SHOW_TYPE.PROB_FLAG;
        _showType & EnumType.EQUIPMENT_ITEM_SHOW_TYPE.PROB_FLAG && this.probLabel.getComponent("LabelUpdater").setString(_prob);
        var self = this;
        var pathIcon = "icons/equipIcons/" + this.equipmentData.equipmentConfig.img;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          if (res) {
            self.iconSprite.spriteFrame = res;
            self.iconSprite.node.width = self.iconSprite.node.height = 170;
          }
        });
        this.ownerType = _ownerType;
        this.sIcon.active = parseInt(this.equipmentData.equipmentId) < 2e3;
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  EquipmentManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e07d5i8JtpEmap15WCJTo00", "EquipmentManager");
    "use strict";
    var EquipmentConfig = require("EquipmentConfig");
    var EquipmentData = require("EquipmentData");
    var EnumType = require("EnumType");
    var EnhancementPointsConfig = require("EnhancementPointsConfig");
    var ItemData = require("ItemData");
    var gameConfig = require("GameConfig");
    var EquipmentManager = cc.Class({
      extends: cc.Component,
      properties: {},
      ctor: function ctor() {
        this.equipmentConfigDict = {};
        for (var i = 0; i < EquipmentConfig.data.length; i++) {
          var equipment = EquipmentConfig.data[i];
          this.equipmentConfigDict[equipment.id] = equipment;
        }
        this.enhancementPointsConfigDict = {};
        for (var j = 0; j < EnhancementPointsConfig.data.length; j++) {
          var enhancementPointsConfig = EnhancementPointsConfig.data[j];
          this.enhancementPointsConfigDict[enhancementPointsConfig.level] = enhancementPointsConfig;
        }
      },
      getEquipmentPower: function getEquipmentPower(_equipment) {
        var result = 0;
        for (var i = 0; i < _equipment.baseProperty.length; i++) {
          var property = _equipment.baseProperty[i];
          "basic_hp" == property.key ? result += 2 * parseInt(property.value) : "strength" == property.key ? result += 80 * parseInt(property.value) : "armor" == property.key && (result += 240 * parseInt(property.value));
        }
        switch (_equipment.rarity) {
         case EnumType.RARE_TYPE_EQUIPMENT.COMMON:
          result += 3e3;
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.UNCOMMON:
          result += 9e3;
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.RARE:
          result += 27e3;
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.EPIC:
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_1:
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_2:
          result += 81e3;
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY:
         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1:
         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2:
          result += 972e3;
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.MYTHIC:
          result += 6804e3;
        }
        return result;
      },
      addEquipment2Bag: function addEquipment2Bag(_equipment, _roleData) {
        _equipment.roleData = _roleData;
        _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT].hasOwnProperty(_equipment.rarity) ? _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_equipment.rarity].push(_equipment) : _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_equipment.rarity] = [ _equipment ];
      },
      removeEquipment: function removeEquipment(_equipment, _roleData) {
        for (var key in _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT]) {
          var rarityList = _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][key];
          var index = rarityList.indexOf(_equipment);
          if (index >= 0) {
            rarityList.splice(index, 1);
            break;
          }
        }
      },
      getEquipmentConfig: function getEquipmentConfig(_id) {
        return this.equipmentConfigDict[_id];
      },
      addEquipment: function addEquipment(_id, _roleData, _rarity, _level, _dontAdd2Bag, _dontSaveData) {
        var equipmentConfig = this.getEquipmentConfig(_id);
        if (null == equipmentConfig) return;
        var equipmentData = new EquipmentData();
        equipmentData.setData(_roleData, equipmentConfig);
        if (null != _rarity) {
          equipmentData.rarity = _rarity;
          this.updateEquipmentProperty(equipmentData);
          equipmentData.updateSkills();
        }
        if (null != _level) {
          equipmentData.level = _level;
          this.updateEquipmentProperty(equipmentData);
        }
        true != _dontAdd2Bag && this.addEquipment2Bag(equipmentData, _roleData);
        if (true != _dontSaveData) {
          var storageData = _roleData.getEquipmentStorageData();
          Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
        }
        return equipmentData;
      },
      setCurrentEquipment: function setCurrentEquipment(_equipmentData) {
        this.currentEquipmentData = _equipmentData;
      },
      getCurrentEquipment: function getCurrentEquipment() {
        return this.currentEquipmentData;
      },
      takeOff: function takeOff(_equipmentData, _roleData) {
        var index = _roleData.equipmentList.indexOf(_equipmentData);
        _roleData.equipmentList.splice(index, 1);
        _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT].hasOwnProperty(_equipmentData.rarity) ? _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_equipmentData.rarity].push(_equipmentData) : _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_equipmentData.rarity] = [ _equipmentData ];
        _equipmentData.slotPos = EnumType.EQUIPMENT_SLOT_POS.NONE;
        var storageData = _roleData.getEquipmentStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
        _roleData.updateStaticData();
      },
      setEquipment: function setEquipment(_equipmentData, _targetEquipmentData, _slotPos, _roleData, _dontSave) {
        var index;
        if (null != _targetEquipmentData) {
          index = _roleData.equipmentList.indexOf(_targetEquipmentData);
          _roleData.equipmentList.splice(index, 1);
          _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT].hasOwnProperty(_targetEquipmentData.rarity) ? _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_targetEquipmentData.rarity].push(_targetEquipmentData) : _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_targetEquipmentData.rarity] = [ _targetEquipmentData ];
          _targetEquipmentData.slotPos = EnumType.EQUIPMENT_SLOT_POS.NONE;
        }
        _equipmentData.slotPos = _slotPos;
        _roleData.equipmentList.push(_equipmentData);
        if (true != _dontSave) {
          index = _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_equipmentData.rarity].indexOf(_equipmentData);
          index >= 0 && _roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][_equipmentData.rarity].splice(index, 1);
          var storageData = _roleData.getEquipmentStorageData();
          Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
        }
        _roleData.updateStaticData();
      },
      getNextLevel: function getNextLevel(_level) {
        var resultLevel;
        if ("string" === typeof _level && _level.indexOf("+") >= 0) {
          var levelArr = _level.split("+");
          resultLevel = parseInt(levelArr[0]) + 1;
        } else resultLevel = _level % 10 == 0 ? _level + "+" : parseInt(_level) + 1;
        if (resultLevel > 70 || "70+" == resultLevel) return null;
        return resultLevel;
      },
      getPreLevel: function getPreLevel(_level) {
        var resultLevel;
        if ("string" === typeof _level && _level.indexOf("+") >= 0) {
          var levelArr = _level.split("+");
          resultLevel = parseInt(levelArr[0]);
        } else resultLevel = (_level - 1) % 10 == 0 ? _level - 1 + "+" : parseInt(_level) - 1;
        if (resultLevel <= 1) return null;
        return resultLevel;
      },
      generateItemData: function generateItemData(_id, _count) {
        var itemConfig = Global.bagManager.getItemConfig(_id);
        if (null == itemConfig) return;
        var itemData = new ItemData();
        itemData.setData(null, itemConfig);
        itemData.count = _count;
        return itemData;
      },
      generateEquipmentData: function generateEquipmentData(_equipmentConfig, _count, _rarity) {
        var equipmentData = new EquipmentData();
        equipmentData.setData(null, _equipmentConfig);
        equipmentData.rarity = _rarity;
        equipmentData.count = 1 == _count ? null : _count;
        return equipmentData;
      },
      getSlotMaterial: function getSlotMaterial(_equipment, _roleData, justGetMaterials, _count) {
        var itemData;
        switch (parseInt(_equipment.slot)) {
         case EnumType.EQUIPMENT_TYPE.WEAPON:
          true == justGetMaterials ? itemData = this.generateItemData(1003, _count) : Global.bagManager.addItem(1003, 1, _roleData);
          break;

         case EnumType.EQUIPMENT_TYPE.BACKPACK:
          true == justGetMaterials ? itemData = this.generateItemData(1006, _count) : Global.bagManager.addItem(1006, 1, _roleData);
          break;

         case EnumType.EQUIPMENT_TYPE.NECKLACE:
          true == justGetMaterials ? itemData = this.generateItemData(1009, _count) : Global.bagManager.addItem(1009, 1, _roleData);
          break;

         case EnumType.EQUIPMENT_TYPE.RING:
          true == justGetMaterials ? itemData = this.generateItemData(1012, _count) : Global.bagManager.addItem(1012, 1, _roleData);
        }
        return itemData;
      },
      getDowngradeMaterial: function getDowngradeMaterial(_equipment, _roleData, justGetMaterials) {
        var itemData;
        switch (parseInt(_equipment.rarity)) {
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_1:
          true == justGetMaterials ? itemData = this.getSlotMaterial(_equipment, _roleData, true, 1) : this.getSlotMaterial(_equipment, _roleData);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_2:
          if (true == justGetMaterials) itemData = this.getSlotMaterial(_equipment, _roleData, true, 3); else for (var i = 0; i < 3; i++) this.getSlotMaterial(_equipment, _roleData);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY:
          if (true == justGetMaterials) itemData = this.getSlotMaterial(_equipment, _roleData, true, 9); else for (var _i = 0; _i < 9; _i++) this.getSlotMaterial(_equipment, _roleData);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1:
          if (true == justGetMaterials) itemData = this.getSlotMaterial(_equipment, _roleData, true, 21); else for (var _i2 = 0; _i2 < 21; _i2++) this.getSlotMaterial(_equipment, _roleData);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2:
          if (true == justGetMaterials) itemData = this.getSlotMaterial(_equipment, _roleData, true, 30); else for (var _i3 = 0; _i3 < 30; _i3++) this.getSlotMaterial(_equipment, _roleData);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.MYTHIC:
          if (true == justGetMaterials) itemData = this.getSlotMaterial(_equipment, _roleData, true, 72); else for (var _i4 = 0; _i4 < 72; _i4++) this.getSlotMaterial(_equipment, _roleData);
        }
        return itemData;
      },
      downgrade: function downgrade(_equipment, _roleData) {
        this.getDowngradeMaterial(_equipment, _roleData);
        switch (parseInt(_equipment.rarity)) {
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_1:
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_2:
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY:
         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1:
          for (var i = 0; i < 2; i++) this.addEquipment(_equipment.equipmentId, _roleData, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2:
          for (var _i5 = 0; _i5 < 5; _i5++) this.addEquipment(_equipment.equipmentId, _roleData, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.MYTHIC:
          for (var _i6 = 0; _i6 < 11; _i6++) this.addEquipment(_equipment.equipmentId, _roleData, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
        }
        _equipment.rarity = EnumType.RARE_TYPE_EQUIPMENT.EPIC;
        _equipment.updateSkills();
        this.levelDown2Min(_equipment, _roleData);
      },
      getDowngradeMaterials: function getDowngradeMaterials(_equipment) {
        var materialItemData = this.getDowngradeMaterial(_equipment, null, true);
        var result = [];
        var equipmentData;
        switch (parseInt(_equipment.rarity)) {
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_1:
         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_2:
          equipmentData = this.generateEquipmentData(_equipment.equipmentConfig, 1, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY:
         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1:
          equipmentData = this.generateEquipmentData(_equipment.equipmentConfig, 3, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2:
          equipmentData = this.generateEquipmentData(_equipment.equipmentConfig, 6, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.MYTHIC:
          equipmentData = this.generateEquipmentData(_equipment.equipmentConfig, 12, EnumType.RARE_TYPE_EQUIPMENT.EPIC);
        }
        result.push(equipmentData);
        result.push(materialItemData);
        var materials = this.getLevelDown2MaxMaterials(_equipment);
        result = result.concat(materials);
        return result;
      },
      getUpgradeCondition: function getUpgradeCondition(_equipment) {
        var result = [];
        null == _equipment && console.log("1");
        switch (_equipment.rarity) {
         case EnumType.RARE_TYPE_EQUIPMENT.COMMON:
         case EnumType.RARE_TYPE_EQUIPMENT.UNCOMMON:
         case EnumType.RARE_TYPE_EQUIPMENT.RARE:
          result.push({
            key: _equipment.equipmentId,
            rarity: _equipment.rarity,
            slot: null
          });
          result.push({
            key: _equipment.equipmentId,
            rarity: _equipment.rarity,
            slot: null
          });
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.EPIC:
          result.push({
            key: null,
            rarity: EnumType.RARE_TYPE_EQUIPMENT.EPIC,
            slot: _equipment.slot,
            materialRarity: EnumType.RARE_ITEM.EPIC
          });
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_1:
          result.push({
            key: null,
            rarity: EnumType.RARE_TYPE_EQUIPMENT.EPIC,
            slot: _equipment.slot,
            materialRarity: EnumType.RARE_ITEM.EPIC
          });
          result.push({
            key: null,
            rarity: EnumType.RARE_TYPE_EQUIPMENT.EPIC,
            slot: _equipment.slot,
            materialRarity: EnumType.RARE_ITEM.EPIC
          });
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.EPIC_2:
          result.push({
            key: _equipment.equipmentId,
            rarity: [ _equipment.rarity ],
            slot: null
          });
          result.push({
            key: _equipment.equipmentId,
            rarity: [ _equipment.rarity ],
            slot: null
          });
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY:
          result.push({
            key: null,
            rarity: EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY,
            slot: _equipment.slot,
            materialRarity: EnumType.RARE_ITEM.LEGENDARY
          });
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1:
          result.push({
            key: _equipment.equipmentId,
            rarity: EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY,
            slot: null
          });
          break;

         case EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2:
          result.push({
            key: _equipment.equipmentId,
            rarity: _equipment.rarity,
            slot: null
          });
          result.push({
            key: null,
            rarity: EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY,
            slot: _equipment.slot,
            materialRarity: EnumType.RARE_ITEM.LEGENDARY
          });
        }
        return result;
      },
      upgrade: function upgrade(_equipment, _materials, _roleData) {
        for (var i = 0; i < _materials.length; i++) {
          var item = _materials[i];
          item.equipmentConfig ? this.removeEquipment(item, _roleData) : Global.bagManager.removeItem(null, item, 1, _roleData);
        }
        _equipment.slotPos == EnumType.EQUIPMENT_SLOT_POS.NONE && this.removeEquipment(_equipment, _roleData);
        _equipment.rarity++;
        this.updateEquipmentProperty(_equipment);
        _equipment.updateSkills();
        _equipment.slotPos == EnumType.EQUIPMENT_SLOT_POS.NONE && this.addEquipment2Bag(_equipment, _roleData);
        _roleData.updateStaticData();
        var storageData = _roleData.getEquipmentStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
      },
      updateEquipmentProperty: function updateEquipmentProperty(_equipment) {
        var enhancementPointItem = this.enhancementPointsConfigDict[_equipment.level];
        var baseValue = parseInt(enhancementPointItem["rarity_" + _equipment.rarity]);
        if (_equipment.slot == EnumType.EQUIPMENT_TYPE.WEAPON) _equipment.baseProperty[0].value = 6 * baseValue; else for (var j = 0; j < _equipment.baseProperty.length; j++) {
          var property = _equipment.baseProperty[j];
          if ("armor" == property.key) property.value = baseValue; else if ("strength" == property.key) property.value = 3 * baseValue; else if ("basic_hp" == property.key) {
            var rateValue = _equipment.slot == EnumType.EQUIPMENT_TYPE.BACKPACK ? 240 : 120;
            property.value = baseValue * rateValue;
          }
        }
      },
      levelUp2Max: function levelUp2Max(_equipment, _roleData) {
        while (this.levelUp(_equipment, _roleData, false, true)) ;
        console.log("Level up to max completed!");
        _roleData.updateStaticData();
        var storageData = _roleData.getEquipmentStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
      },
      getNextLevelMaterials: function getNextLevelMaterials(_equipmentData) {
        var nextLevel = this.getNextLevel(_equipmentData.level);
        if (null == nextLevel) return null;
        var enhancementPointItem = this.enhancementPointsConfigDict[nextLevel];
        var materialsArr = enhancementPointItem.materials.split(",");
        var ids = [];
        var counts = [];
        for (var i = 0; i < materialsArr.length; i++) {
          var material = materialsArr[i];
          var materialArr = material.split("|");
          ids.push(materialArr[0]);
          counts.push(materialArr[1]);
        }
        return {
          ids: ids,
          counts: counts
        };
      },
      levelUp: function levelUp(_equipment, _roleData, _allowBreakthrough, _dontSave) {
        var nextLevel = this.getNextLevel(_equipment.level);
        if (null == nextLevel) return false;
        if (true != _allowBreakthrough && "string" === typeof nextLevel && nextLevel.indexOf("+") >= 0) return false;
        var materials = this.getNextLevelMaterials(_equipment);
        var ids = materials.ids;
        var counts = materials.counts;
        var result = Global.bagManager.checkItems(ids, counts, _roleData);
        if (null != result) {
          for (var key in result) {
            var count = result[key];
            Global.bagManager.removeItem(key, null, count, _roleData);
          }
          _equipment.level = nextLevel;
          this.updateEquipmentProperty(_equipment);
          if (true != _dontSave) {
            var storageData = _roleData.getEquipmentStorageData();
            Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
            _roleData.updateStaticData();
          }
          Global.taskManager.updateProgress(EnumType.TASK_TYPE.UPGRADE_EQUIPMENT, 1);
          return true;
        }
        return false;
      },
      getLevelDownMaterials: function getLevelDownMaterials() {
        if (1 == this.recordLevel) return false;
        var enhancementPointItem = this.enhancementPointsConfigDict[this.recordLevel];
        var materialsArr = enhancementPointItem.materials.split(",");
        for (var i = 0; i < materialsArr.length; i++) {
          var material = materialsArr[i];
          var materialArr = material.split("|");
          var itemId = materialArr[0];
          var count = parseInt(materialArr[1]);
          if (this.materialsDict.hasOwnProperty(itemId)) this.materialsDict[itemId].count += count; else {
            var itemData = this.generateItemData(itemId, count);
            this.materials.push(itemData);
            this.materialsDict[itemId] = itemData;
          }
        }
        var preLevel = this.getPreLevel(this.recordLevel);
        if (null == preLevel) return false;
        this.recordLevel = preLevel;
        return true;
      },
      getLevelDown2MaxMaterials: function getLevelDown2MaxMaterials(_equipment) {
        this.materials = [];
        this.materialsDict = {};
        this.recordLevel = _equipment.level;
        while (this.getLevelDownMaterials()) ;
        this.recordLevel = null;
        return this.materials;
      },
      levelDown2Min: function levelDown2Min(_equipment, _roleData) {
        this.materials = {};
        while (this.levelDown(_equipment, _roleData)) ;
        _equipment.reset();
        console.log("Level up to min completed!");
        _roleData.updateStaticData();
        var storageData = _roleData.getEquipmentStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.EQUIPMENT_DATA, storageData);
        return this.materials;
      },
      levelDown: function levelDown(_equipment, _roleData) {
        if (1 == _equipment.level) return false;
        var enhancementPointItem = this.enhancementPointsConfigDict[_equipment.level];
        var materialsArr = enhancementPointItem.materials.split(",");
        for (var i = 0; i < materialsArr.length; i++) {
          var material = materialsArr[i];
          var materialArr = material.split("|");
          var itemId = materialArr[0];
          var count = parseInt(materialArr[1]);
          Global.bagManager.addItem(itemId, count, _roleData);
          false == this.materials.hasOwnProperty(itemId) ? this.materials[itemId] = count : this.materials[itemId] += count;
        }
        var preLevel = this.getPreLevel(_equipment.level);
        if (null == preLevel) return false;
        _equipment.level = preLevel;
        return true;
      }
    });
    module.exports = EquipmentManager;
    cc._RF.pop();
  }, {
    EnhancementPointsConfig: "EnhancementPointsConfig",
    EnumType: "EnumType",
    EquipmentConfig: "EquipmentConfig",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  EquipmentMergeResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "eb1b5CachRNDJ0tLQugFK5b", "EquipmentMergeResult");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        equipmentItem: cc.Node,
        equipmentName: cc.Node,
        equipmentHp: cc.Node,
        equipmentStr: cc.Node,
        equipmentArmor: cc.Node,
        lineNode: cc.Node,
        lineNode_2: cc.Node,
        lineNode_3: cc.Node,
        lineIcon: cc.Sprite,
        lineIconList: [ cc.SpriteFrame ],
        lightIcon: cc.Sprite,
        lightIconList: [ cc.SpriteFrame ],
        content: cc.Node
      },
      onAdded: function onAdded(args) {
        this.equipmentData = args.equipmentData;
        Global.utils.logMessage("RewardsPanel1 onAdded:", args);
        this.content.opacity = 0;
        if (!this.labelColorList) {
          this.labelColorList = [];
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.COMMON] = new cc.color(255, 255, 255, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.UNCOMMON] = new cc.color(97, 197, 37, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.RARE] = new cc.color(54, 125, 187, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC] = new cc.color(137, 60, 214, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC_1] = new cc.color(137, 60, 214, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC_2] = new cc.color(137, 60, 214, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY] = new cc.color(229, 136, 29, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1] = new cc.color(229, 136, 29, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2] = new cc.color(229, 136, 29, 255);
          this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.MYTHIC] = new cc.color(232, 32, 74, 255);
        }
        this.reset();
        this._args = args;
        this.roleData = this._args.roleData;
        this.initUI();
        var animator = this.getComponent(cc.Animation);
        animator.on("finished", this.showUI.bind(this), this);
        animator.play("rewardsPanel1", false);
        return true;
      },
      showUI: function showUI() {
        cc.tween(this.content).to(.3, {
          opacity: 255
        }).start();
      },
      initUI: function initUI() {
        this.equipmentItem.getComponent("EquipmentItem").setData(this.equipmentData, null, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.MERGE, EnumType.EQUIPMENT_ITEM_SHOW_TYPE.EQUIPED_FLAG | EnumType.EQUIPMENT_ITEM_SHOW_TYPE.SELECTED_FLAG);
        this.equipmentItem.active = true;
        this.equipmentName.getComponent("LabelUpdater").setString(this.equipmentData.equipmentConfig.name);
        this.equipmentName.getComponent("LabelUpdater").setColor(this.labelColorList[this.equipmentData.rarity]);
        this.lineIcon.spriteFrame = this.lineIconList[this.equipmentData.rarity];
        this.lightIcon.spriteFrame = this.lightIconList[this.equipmentData.rarity];
        this.lineNode.active = false;
        this.lineNode_2.active = false;
        this.lineNode_3.active = false;
        for (var i = 0; i < this.equipmentData.baseProperty.length; i++) {
          var property = this.equipmentData.baseProperty[i];
          if ("basic_hp" == property.key) {
            this.equipmentHp.getComponent("LabelUpdater").setString("+" + property.value);
            this.lineNode.active = true;
          }
          if ("strength" == property.key) {
            this.equipmentStr.getComponent("LabelUpdater").setString("+" + property.value);
            this.lineNode_2.active = true;
          } else if ("armor" == property.key) {
            this.equipmentArmor.getComponent("LabelUpdater").setString("+" + property.value);
            this.lineNode_3.active = true;
          }
        }
      },
      onCloseUI: function onCloseUI() {
        Global.audio.playEffect("audio/click");
        var power = this.roleData.getPower();
        if (power != this.roleData.currentPower) {
          var args = {};
          args.power_1 = this.roleData.currentPower;
          args.power_2 = power;
          args.powerUp = power >= this.roleData.currentPower;
          Global.gui.open(gameConfig.UIID.PowerChange, args);
          this.roleData.currentPower = this.roleData.getPower();
        }
        this.reset();
        Global.gui.remove(gameConfig.UIID.EquipmentMergeResult);
      },
      reset: function reset() {
        this.equipmentItem.active = false;
        this._args = null;
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  EquipmentView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1bd23fHnLpLVJHqcFTJ3TnJ", "EquipmentView");
    "use strict";
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        equipmentContainer: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        slots: [ cc.Node ],
        hp_label: cc.Node,
        str_label: cc.Node,
        armor_label: cc.Node,
        power_label: cc.Node,
        roleNode: cc.Node,
        sortByRarityBtn: cc.Node,
        sortByLevelBtn: cc.Node,
        sortByTypeBtn: cc.Node
      },
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        this.currentSortType = EnumType.SORT_TYPE.RARITY;
        this.updateEquipments(true, true);
        this.initSlots();
        this.sortByRarityBtn.active = false;
        this.sortByLevelBtn.acitve = true;
        this.sortByTypeBtn.active = false;
        var roleView = this.roleNode.getComponent("RoleView");
        roleView.updateData(this, this.roleData);
        roleView.hideBar();
        this.roleData.lastPower = this.roleData.getPower();
      },
      onBeforeRemove: function onBeforeRemove(args) {},
      onClickMerge: function onClickMerge() {
        Global.gui.open(gameConfig.UIID.EquipMerge, {
          roleData: this.roleData
        });
      },
      initSlots: function initSlots() {
        for (var i = 0; i < this.slots.length; i++) {
          var slot = this.slots[i];
          var equipmentType = void 0;
          equipmentType = 0 == i ? EnumType.EQUIPMENT_TYPE.WEAPON : 1 == i || 4 == i ? EnumType.EQUIPMENT_TYPE.RING : 2 == i || 5 == i ? EnumType.EQUIPMENT_TYPE.NECKLACE : EnumType.EQUIPMENT_TYPE.BACKPACK;
          slot.getComponent("SlotPos").setData(this.roleData, i, equipmentType);
        }
        this.updateSlotsEquipment();
      },
      updateSlotsEquipment: function updateSlotsEquipment() {
        for (var i = 0; i < this.roleData.equipmentList.length; i++) {
          var equipmentData = this.roleData.equipmentList[i];
          var slotComponent = this.slots[equipmentData.slotPos].getComponent("SlotPos").updateEquipmentItem(equipmentData);
        }
      },
      updateSlotEquipment: function updateSlotEquipment() {
        for (var i = 0; i < this.slots.length; i++) {
          var slot = this.slots[i];
          var slotComponent = slot.getComponent("SlotPos");
          slotComponent.updateUI();
        }
      },
      updateSlot: function updateSlot(_slot) {
        for (var i = 0; i < this.slots.length; i++) {
          var slot = this.slots[i];
          var slotComponent = slot.getComponent("SlotPos");
          null != _slot ? slotComponent.setMask(slotComponent.slot != _slot) : slotComponent.setMask(false);
        }
      },
      updateInfo: function updateInfo(_dontShowAni) {
        this.hp_label.getComponent("LabelUpdater").setString("" + this.roleData.getStaticData().basic_hp);
        this.str_label.getComponent("LabelUpdater").setString("" + this.roleData.getStaticData().strength);
        this.armor_label.getComponent("LabelUpdater").setString("" + this.roleData.getStaticData().armor);
        var power = this.roleData.getPower();
        this.power_label.getComponent("LabelUpdater").setString("" + Global.utils.formatNumberWithUnit(power));
        if (power != this.roleData.currentPower) {
          var args = {};
          args.power_1 = this.roleData.currentPower;
          args.power_2 = power;
          args.powerUp = power >= this.roleData.currentPower;
          true != _dontShowAni && Global.gui.open(gameConfig.UIID.PowerChange, args);
          this.roleData.currentPower = this.roleData.getPower();
        }
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.equipmentContainer.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.equipmentContainer.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
      },
      sortByRarity: function sortByRarity() {
        this.currentSortType = EnumType.SORT_TYPE.RARITY;
        this.updateEquipments(false, true);
        this.sortByRarityBtn.active = false;
        this.sortByLevelBtn.active = true;
        this.sortByTypeBtn.active = false;
      },
      sortByLevel: function sortByLevel() {
        this.currentSortType = EnumType.SORT_TYPE.LEVEL;
        this.updateEquipments(false, true);
        this.sortByRarityBtn.active = false;
        this.sortByLevelBtn.active = false;
        this.sortByTypeBtn.active = true;
      },
      sortByType: function sortByType() {
        this.currentSortType = EnumType.SORT_TYPE.TYPE;
        this.updateEquipments(false, true);
        this.sortByRarityBtn.active = true;
        this.sortByLevelBtn.active = false;
        this.sortByTypeBtn.active = false;
      },
      getSortList: function getSortList() {
        var list = [];
        var result = [];
        for (var rarity in this.roleData.bag[EnumType.BAG_TYPE.EQUIPMENT]) {
          var rarityList = this.roleData.bag[EnumType.BAG_TYPE.EQUIPMENT][rarity];
          for (var i = 0; i < rarityList.length; i++) {
            var equipmentData = rarityList[i];
            list.push(equipmentData);
          }
        }
        for (var _rarity in this.roleData.bag[EnumType.BAG_TYPE.ITEM]) {
          var _rarityList = this.roleData.bag[EnumType.BAG_TYPE.ITEM][_rarity];
          for (var _i = 0; _i < _rarityList.length; _i++) {
            var itemData = _rarityList[_i];
            if (itemData.type != EnumType.BAG_ITEM_TYPE.MERGE) continue;
            list.push(itemData);
          }
        }
        switch (this.currentSortType) {
         case EnumType.SORT_TYPE.RARITY:
          result = list.sort(function(a, b) {
            var pointA = null != a.equipmentConfig ? 1e3 + 10 * a.level + (3 - a.slot) : 3 - a.slot;
            var pointB = null != b.equipmentConfig ? 1e3 + 10 * b.level + (3 - b.slot) : 3 - b.slot;
            return 100 * b.rarity + pointB - (100 * a.rarity + pointA);
          });
          break;

         case EnumType.SORT_TYPE.LEVEL:
          result = list.sort(function(a, b) {
            var pointA = null != a.equipmentConfig ? 1e3 + 100 * a.level + (3 - a.slot) : 3 - a.slot;
            var pointB = null != b.equipmentConfig ? 1e3 + 100 * b.level + (3 - b.slot) : 3 - b.slot;
            return 10 * b.rarity + pointB - (10 * a.rarity + pointA);
          });
          break;

         case EnumType.SORT_TYPE.TYPE:
          result = list.sort(function(a, b) {
            var pointA = null != a.equipmentConfig ? 1e3 + a.level + 100 * (3 - a.slot) : 100 * (3 - a.slot);
            var pointB = null != b.equipmentConfig ? 1e3 + b.level + 100 * (3 - b.slot) : 100 * (3 - b.slot);
            return 10 * b.rarity + pointB - (10 * a.rarity + pointA);
          });
        }
        return result;
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData, _index) {
        var startX = -420;
        var startY = -120;
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.EQUIP);
        this.equipmentContainer.addChild(equipmentItem);
        equipmentItem.x = startX + 210 * Math.floor(_index % 5);
        equipmentItem.y = startY + -1 * Math.floor(_index / 5) * 210;
      },
      generateBagItem: function generateBagItem(_itemData, _index) {
        var startX = -420;
        var startY = -120;
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.getComponent("BagItem").setData(_itemData, this.roleData, EnumType.ITEM_OWNER_TYPE.EQUIP);
        this.equipmentContainer.addChild(bagItem);
        bagItem.x = startX + 210 * Math.floor(_index % 5);
        bagItem.y = startY + -1 * Math.floor(_index / 5) * 210;
      },
      updateEquipments: function updateEquipments(_updatePower, _dontShowAni) {
        this.clearItems();
        this.itemList = this.getSortList();
        for (var i = 0; i < this.itemList.length; i++) {
          var item = this.itemList[i];
          item.equipmentConfig ? this.generateEquipmentItem(item, i) : this.generateBagItem(item, i);
        }
        this.equipmentContainer.height = 210 * Math.ceil(this.itemList.length / 5) + 30;
        false != _updatePower && this.updateInfo(_dontShowAni);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  EventsBaseData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c2955qj+75M7qny89Oiv4qp", "EventsBaseData");
    "use strict";
    var EventsBaseData = cc.Class({
      name: "EventsBaseData",
      statics: {
        data: [ {
          id: "1001",
          name: "1001",
          avatar: "avatar_1001",
          messageBegin: "msg_1007",
          options: "1101|msg_1008|32;1082|msg_1010|46.6;1098|msg_1012|21.4",
          messageEnd: "msg_1009;msg_1011;msg_1013"
        }, {
          id: "1002",
          name: "1002",
          avatar: "avatar_1002",
          messageBegin: "msg_1014",
          options: "1140|msg_1015|45.5;1141|msg_1017|12;1074|msg_1019|42.5",
          messageEnd: "msg_1016;msg_1018;msg_1020"
        }, {
          id: "1003",
          name: "1003",
          avatar: "avatar_1002",
          messageBegin: "msg_1021",
          options: "1083|msg_1022|22.6;1087|msg_1024|47.8;1142|msg_1026|29.6",
          messageEnd: "msg_1023;msg_1025;msg_1027"
        }, {
          id: "1004",
          name: "1004",
          avatar: "avatar_1004",
          messageBegin: "msg_1028",
          options: "1082|msg_1029|32.2;1113|msg_1031|12.6;1142|msg_1033|55.2",
          messageEnd: "msg_1030;msg_1032;msg_1034"
        }, {
          id: "1005",
          name: "1005",
          avatar: "avatar_1005",
          messageBegin: "msg_1035",
          options: "1058|msg_1036|27.5;1081|msg_1038|42.2;1131|msg_1040|30.3",
          messageEnd: "msg_1037;msg_1039;msg_1041"
        }, {
          id: "1006",
          name: "1006",
          avatar: "avatar_1006",
          messageBegin: "msg_1042",
          options: "1022|msg_1043|27.5;1069|msg_1045|34.6;1140|msg_1047|37.8",
          messageEnd: "msg_1044;msg_1046;msg_1048"
        }, {
          id: "1007",
          name: "1007",
          avatar: "avatar_1007",
          messageBegin: "msg_1049",
          options: "1103|msg_1050|43.4;1140|msg_1052|18.5;1069|msg_1054|38.1",
          messageEnd: "msg_1051;msg_1053;msg_1055"
        }, {
          id: "1008",
          name: "1008",
          avatar: "avatar_1008",
          messageBegin: "msg_1056",
          options: "1030|msg_1057|35.2;1158|msg_1059|22.3;1163|msg_1061|42.5",
          messageEnd: "msg_1058;msg_1060;msg_1062"
        }, {
          id: "1009",
          name: "1009",
          avatar: "avatar_1005",
          messageBegin: "msg_1063",
          options: "1098|msg_1064|28.3;1066|msg_1083|32.5;1131|msg_1068|39.2",
          messageEnd: "msg_1065;msg_1067;msg_1069"
        }, {
          id: "1010",
          name: "1010",
          avatar: "avatar_1010",
          messageBegin: "msg_1070",
          options: "1132|msg_1071|27.5;1161|msg_1073|37.8;1165|msg_1075|33.4",
          messageEnd: "msg_1072;msg_1074;msg_1076"
        }, {
          id: "1011",
          name: "1011",
          avatar: "avatar_1011",
          messageBegin: "msg_1077",
          options: "1069|msg_1078|27.6;1066|msg_1080|34.6;1140|msg_1082|37.8",
          messageEnd: "msg_1079;msg_1081;msg_1083"
        }, {
          id: "1012",
          name: "1012",
          avatar: "avatar_1001",
          messageBegin: "msg_1084",
          options: "1147|msg_1085|26.3;1148|msg_1087|22.4;1149|msg_1089|51.3",
          messageEnd: "msg_1086;msg_1088;msg_1090"
        }, {
          id: "1013",
          name: "1013",
          avatar: "avatar_1013",
          messageBegin: "msg_1091",
          options: "1162|msg_1092|36.7;1113|msg_1094|39.2;1160|msg_1096|24.1",
          messageEnd: "msg_1093;msg_1095;msg_1097"
        }, {
          id: "1014",
          name: "1014",
          avatar: "avatar_1014",
          messageBegin: "msg_1098",
          options: "1163|msg_1099|27.5;1164|msg_1101|38.4;1161|msg_1082|37.8",
          messageEnd: "msg_1100;msg_1102;msg_1104"
        }, {
          id: "1015",
          name: "1015",
          avatar: "avatar_1015",
          messageBegin: "msg_1105",
          options: "1074|msg_1106|26.5;1113|msg_1108|35.7;1141|msg_1110|37.8",
          messageEnd: "msg_1107;msg_1109;msg_1111"
        }, {
          id: "1016",
          name: "1016",
          avatar: "avatar_1016",
          messageBegin: "msg_1112",
          options: "1081|msg_1113|35.9;1131|msg_1115|39.6;1098|msg_1117|24.5",
          messageEnd: "msg_1114;msg_1116;msg_1118"
        }, {
          id: "1017",
          name: "1017",
          avatar: "avatar_1017",
          messageBegin: "msg_1119",
          options: "1113|msg_1120|27.2;1083|msg_1122|12.4;1023|msg_1124|60.4",
          messageEnd: "msg_1121;msg_1123;msg_1125"
        }, {
          id: "1018",
          name: "1018",
          avatar: "avatar_1018",
          messageBegin: "msg_1126",
          options: "1062|msg_1127|41.7;1066|msg_1129|17.4;1082|msg_1131|40.9",
          messageEnd: "msg_1128;msg_1130;msg_1132"
        }, {
          id: "1019",
          name: "1019",
          avatar: "avatar_1019",
          messageBegin: "msg_1133",
          options: "1162|msg_1134|29.6;1131|msg_1136|47.8;1087|msg_1138|22.6",
          messageEnd: "msg_1135;msg_1137;msg_1139"
        }, {
          id: "1020",
          name: "1020",
          avatar: "avatar_1020",
          messageBegin: "msg_1140",
          options: "1098|msg_1141|43.2;1083|msg_1143|25.6;1066|msg_1145|31.2",
          messageEnd: "msg_1142;msg_1144;msg_1146"
        } ]
      }
    });
    module.exports = EventsBaseData;
    cc._RF.pop();
  }, {} ],
  EventsManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "91d0f2ommBFmKIIMIgnYrqV", "EventsManager");
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var EventsBaseData = require("EventsBaseData");
    var EventModel = function() {
      function EventModel(data) {
        this.id = data.id;
        this.name = data.name;
        this.avatar = data.avatar;
        this.messageBegin = data.messageBegin;
        this.options = data.options;
        this.skills = data.skills;
        this.messageEnd = data.messageEnd;
        this.percent = data.percent;
      }
      _createClass(EventModel, [ {
        key: "id",
        get: function get() {
          return this._id;
        },
        set: function set(value) {
          this._id = value;
        }
      }, {
        key: "name",
        get: function get() {
          return this._name;
        },
        set: function set(value) {
          this._name = value;
        }
      }, {
        key: "avatar",
        get: function get() {
          return this._avatar;
        },
        set: function set(value) {
          this._avatar = value;
        }
      }, {
        key: "messageBegin",
        get: function get() {
          return this._messageBegin;
        },
        set: function set(value) {
          this._messageBegin = value;
        }
      }, {
        key: "messageEnd",
        get: function get() {
          return this._messageEnd;
        },
        set: function set(value) {
          this._messageEnd = value;
        }
      }, {
        key: "options",
        get: function get() {
          return this._options;
        },
        set: function set(value) {
          this._options = value;
        }
      }, {
        key: "skills",
        get: function get() {
          return this._skills;
        },
        set: function set(value) {
          this._skills = value;
        }
      }, {
        key: "percent",
        get: function get() {
          return this._percent;
        },
        set: function set(value) {
          this._percent = value;
        }
      } ]);
      return EventModel;
    }();
    var EventsManager = function EventsManager() {
      this.resetData();
    }, EventsMG = EventsManager.prototype, g_instance = null;
    EventsMG.resetData = function() {
      this.eventData = {};
      this.initData();
    };
    EventsMG.initData = function() {
      for (var index = 0; index < EventsBaseData.data.length; index++) {
        var data = EventsBaseData.data[index];
        this.eventData[data.id] = new EventModel(data);
      }
    };
    EventsMG.getEventDataById = function(id) {
      return this.eventData[id];
    };
    module.exports = function() {
      g_instance || (g_instance = new EventsManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    EventsBaseData: "EventsBaseData"
  } ],
  EventsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5fe83LR4aBD5Z8VeaG6ejxu", "EventsView");
    "use strict";
    var _AsyncQueue = require("../../utils/AsyncQueue");
    var gameConfig = require("GameConfig");
    var PATH = "icons/eventsIcon/";
    var NAME = "events_name_";
    var ISMSG = "msg_";
    var ISPIC = "pic_";
    var ISSKILL = "skill_";
    var optionNode = null;
    cc.Class({
      extends: cc.Component,
      properties: {
        spine: {
          type: sp.Skeleton,
          default: null
        },
        rootNode: {
          type: cc.Node,
          default: null
        },
        profileIcon: {
          type: cc.Sprite,
          default: null
        },
        nameLab: {
          type: cc.Label,
          default: null
        },
        scrollView: {
          type: cc.ScrollView,
          default: null
        },
        msgPreb: {
          type: cc.Prefab,
          default: null
        },
        picPreb: {
          type: cc.Prefab,
          default: null
        },
        optionPreb: {
          type: cc.Prefab,
          default: null
        },
        toggleItemPreb: {
          type: cc.Prefab,
          default: null
        },
        continueBtn: {
          type: cc.Node,
          default: null
        },
        choiceResultPreb: {
          type: cc.Prefab,
          default: null
        },
        _roleData: null,
        _eventData: null,
        _rewardData: null,
        _rewardItem: null,
        _belongsToCT: null
      },
      onAdded: function onAdded(args) {
        this._roleData = args.roleData;
        this._belongsToCT = args.belongsToCT;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: gameConfig.CONTROLS.EVENTS_CT
        });
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: this._belongsToCT
        });
      },
      onEnable: function onEnable() {
        this.spine.setCompleteListener(this.onComplete.bind(this));
        this._rewardData = null;
        this._rewardItem = null;
        this.continueBtn.active = this.rootNode.active = false;
        this.spine.node.active = true;
        this.spine.setAnimation(0, "UP", false);
      },
      onComplete: function onComplete(trackEntry) {
        if ("UP" == trackEntry.animation.name) {
          this.rootNode.active = true;
          this.initUI();
        } else "Down" == trackEntry.animation.name && Global.gui.remove(gameConfig.UIID.EventsPanel);
      },
      initUI: function initUI() {
        this.scrollView.content.removeAllChildren();
        var chapterData = Global.chapterManager.getChapterDataByLevel(Global.chapterManager.curChapter);
        var levelEvents = chapterData.levelEvents.split(";");
        var leObj = {};
        for (var index = 0; index < levelEvents.length; index++) {
          var le = levelEvents[index];
          var leArray = le.split("|");
          leObj[leArray[0]] = leArray[1];
        }
        var total = 0;
        for (var _index = 0; _index < Global.levelManager.levelData.length; _index++) {
          var levelData = Global.levelManager.levelData[_index];
          levelData.process == gameConfig.BATTLE_EVENTS_ENUM.EVENT && total++;
          if (_index == Global.levelManager.curLevel) break;
        }
        var eventId = "1001";
        if (leObj[total]) {
          eventId = leObj[total];
          Global.gui.toast("\u672c\u5173\u4f7f\u7528\u5f3a\u5236\u6307\u5b9a\u4e8b\u4ef6\uff1a" + eventId);
        } else {
          Global.utils.logMessage("\u672c\u5173\u65e0\u6307\u5b9a\u4e8b\u4ef6\uff0c\u5c06\u968f\u673a\u663e\u793a\u4e8b\u4ef6\u3002");
          var keys = Object.keys(Global.eventsManager.eventData);
          var random = Global.utils.getRandomNumber(0, keys.length - 1);
          eventId = Global.eventsManager.eventData[keys[random]].id;
        }
        var eventData = this._eventData = Global.eventsManager.getEventDataById(eventId);
        var self = this;
        var pathIcon = PATH + eventData.avatar;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          res && (self.profileIcon.spriteFrame = res);
        });
        this.nameLab.string = Global.languageManager.i18nData[NAME + eventData.name].content;
        var queue = new _AsyncQueue.AsyncQueue();
        "" != eventData.messageBegin && this.addMessages(queue, eventData.messageBegin);
        "" != eventData.options && this.addOption(queue, eventData.options);
        queue.play();
      },
      addMessages: function addMessages(queue, messageBegin) {
        var msgs = messageBegin.split(";");
        for (var index = 0; index < msgs.length; index++) this.addMessageItem(queue, msgs[index]);
      },
      addMessageItem: function addMessageItem(queue, msgData, isReward) {
        var _this = this;
        queue.push(function(next) {
          var msgList = msgData.split("|");
          var msg = msgList[0];
          var direction = msgList[1] || gameConfig.DIRECTION_ENUM.LEFT;
          var item, itemCtrl;
          if (-1 != msg.indexOf(ISMSG)) {
            item = cc.instantiate(_this.msgPreb);
            itemCtrl = item.getComponent("MsgItem");
          } else if (-1 != msg.indexOf(ISPIC) || -1 != msg.indexOf(ISSKILL)) {
            item = cc.instantiate(_this.picPreb);
            itemCtrl = item.getComponent("PicItem");
          }
          isReward && (_this._rewardItem = item);
          _this.scrollView.content.addChild(item);
          _this.scrollView.scrollToBottom(.3);
          itemCtrl.direction = direction;
          itemCtrl.updateData(msg);
          setTimeout(next, 300);
        });
      },
      addOption: function addOption(queue, options) {
        var _this2 = this;
        queue.push(function(next) {
          var option = optionNode = cc.instantiate(_this2.optionPreb);
          option.getComponent("Option").updateData(_this2._roleData, options);
          _this2.scrollView.content.addChild(option);
          _this2.scrollView.scrollToBottom(.3);
          next();
        });
      },
      showSelectMessage: function showSelectMessage(optionList, data) {
        this._rewardData = data;
        optionNode.removeFromParent();
        var queue = new _AsyncQueue.AsyncQueue();
        var msg = data.msgId + "|" + gameConfig.DIRECTION_ENUM.RIGHT;
        this.addMessages(queue, msg);
        var index = optionList.indexOf(data);
        if (-1 != index) {
          var messagesEnd = this._eventData.messageEnd.split(";");
          this.addMessageItem(queue, messagesEnd[index]);
        }
        var pic = ISSKILL + data.skillId + "|" + gameConfig.DIRECTION_ENUM.LEFT;
        this.addMessageItem(queue, pic, true);
        this.addContinueBtn(queue);
        this.addChoiceResult(queue, optionList, data);
        queue.play();
      },
      addContinueBtn: function addContinueBtn(queue) {
        var _this3 = this;
        queue.push(function(next) {
          var continueBtn = cc.instantiate(_this3.continueBtn);
          _this3.scrollView.content.addChild(continueBtn);
          continueBtn.active = true;
          _this3.scrollView.scrollToBottom(.3);
          next();
        });
      },
      addChoiceResult: function addChoiceResult(queue, optionList, data) {
        var _this4 = this;
        queue.push(function(next) {
          var choiceResult = cc.instantiate(_this4.choiceResultPreb);
          choiceResult.getComponent("ChoiceResult").updateData(optionList, data);
          _this4.scrollView.content.addChild(choiceResult);
          _this4.scrollView.scrollToBottom(.3);
          next();
        });
      },
      onClickOkBtn: function onClickOkBtn() {
        var _this5 = this;
        if (this._rewardData && this._rewardItem) {
          Global.skillManager.addSkill(this._rewardData.skillId, this._roleData);
          var fworldPos = this._rewardItem.convertToWorldSpaceAR(cc.v2(0, 0));
          Global.gui.get(gameConfig.UIID.BattlePanel).getComponent("BattleView").showRogueItemEffect(this._rewardData.skillId, fworldPos, function() {
            var skillData = Global.skillManager.getSkillConfig(_this5._rewardData.skillId);
            if (skillData && "" != skillData.ability_up) {
              var ability_ups = skillData.ability_up.split("|");
              if (0 == ability_ups[0]) {
                var msg = Global.languageManager.i18nData["ability_up_" + ability_ups[1]];
                msg && msg.content && cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.AbilityUp, {
                  roleId: _this5._roleData.roleId,
                  msg: msg.content
                });
              }
            }
            var roleView = _this5._roleData.node.getComponent("RoleView");
            var hasCombineSkill = roleView && roleView._combineArr && roleView._isMergeAnimation;
            if (hasCombineSkill) {
              var uiArgs = {
                combineArr: roleView._combineArr
              };
              var uicallBack = {
                onRemoved: function onRemoved(node, params) {
                  console.log("UIID.SkillMerge onRemoved");
                  roleView._combineArr = null;
                  roleView._isMergeAnimation = false;
                }
              };
              Global.gui.open(gameConfig.UIID.SkillMerge, uiArgs, uicallBack);
            }
          });
        }
        this.closeUI();
      },
      closeUI: function closeUI() {
        this.spine.setAnimation(0, "Down", false);
        this.rootNode.active = false;
      }
    });
    cc._RF.pop();
  }, {
    "../../utils/AsyncQueue": "AsyncQueue",
    GameConfig: "GameConfig"
  } ],
  GameConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8e08eS67lLmZ2zpsT5zVeo", "GameConfig");
    "use strict";
    var _LayerManager = require("../gui/gui/LayerManager");
    var _UIConfigData;
    var GAME_CONST = {
      energyRecoveryTime: 100,
      selfId: 1e3,
      replenishTimes: 3
    };
    var TALENT_MAX_LEVEL = 2790;
    var WALKING_TIME = {
      MONSTER: 2.5,
      BOSS: 4.6
    };
    var POOLMANAGER_TYPE = {
      bullet: {
        key: "bullet",
        type: "prefab",
        path: "prefabs/pool/bullet"
      },
      valueLabel: {
        key: "valueLabel",
        type: "prefab",
        path: "prefabs/pool/valueLabel"
      },
      abilityUpLabel: {
        key: "abilityUpLabel",
        type: "prefab",
        path: "prefabs/pool/abilityUpLabel"
      },
      dialogueItem: {
        key: "dialogueItem",
        type: "prefab",
        path: "prefabs/pool/dialogueItem"
      },
      money: {
        key: "money",
        type: "prefab",
        path: "prefabs/pool/money"
      }
    };
    var PRELOADCONFIG = {
      enemy01: {
        key: "enemy01",
        type: "prefab",
        path: "prefabs/role/enemy01"
      },
      enemy02: {
        key: "enemy02",
        type: "prefab",
        path: "prefabs/role/enemy02"
      },
      enemy03: {
        key: "enemy03",
        type: "prefab",
        path: "prefabs/role/enemy03"
      },
      enemy04: {
        key: "enemy04",
        type: "prefab",
        path: "prefabs/role/enemy04"
      },
      enemy05: {
        key: "enemy05",
        type: "prefab",
        path: "prefabs/role/enemy05"
      },
      enemy06: {
        key: "enemy06",
        type: "prefab",
        path: "prefabs/role/enemy06"
      },
      enemy07: {
        key: "enemy07",
        type: "prefab",
        path: "prefabs/role/enemy07"
      },
      enemy08: {
        key: "enemy08",
        type: "prefab",
        path: "prefabs/role/enemy08"
      },
      enemy09: {
        key: "enemy09",
        type: "prefab",
        path: "prefabs/role/enemy09"
      },
      enemy10: {
        key: "enemy10",
        type: "prefab",
        path: "prefabs/role/enemy10"
      },
      enemy11: {
        key: "enemy11",
        type: "prefab",
        path: "prefabs/role/enemy11"
      },
      enemy12: {
        key: "enemy12",
        type: "prefab",
        path: "prefabs/role/enemy12"
      },
      enemy13: {
        key: "enemy13",
        type: "prefab",
        path: "prefabs/role/enemy13"
      },
      player: {
        key: "player",
        type: "prefab",
        path: "prefabs/role/player"
      },
      boss01: {
        key: "boss01",
        type: "prefab",
        path: "prefabs/role/boss01"
      },
      boss02: {
        key: "boss02",
        type: "prefab",
        path: "prefabs/role/boss02"
      },
      boss03: {
        key: "boss03",
        type: "prefab",
        path: "prefabs/role/boss03"
      },
      car: {
        key: "car",
        type: "prefab",
        path: "prefabs/effects/car"
      },
      coupon: {
        key: "coupon",
        type: "prefab",
        path: "prefabs/effects/coupon"
      },
      ultimate_1001: {
        key: "ultimate_1001",
        type: "prefab",
        path: "prefabs/effects/ultimate_1001"
      },
      ultimate_1002: {
        key: "ultimate_1002",
        type: "prefab",
        path: "prefabs/effects/ultimate_1002"
      },
      ultimate_1003: {
        key: "ultimate_1003",
        type: "prefab",
        path: "prefabs/effects/ultimate_1003"
      },
      ultimate_1004: {
        key: "ultimate_1004",
        type: "prefab",
        path: "prefabs/effects/ultimate_1004"
      },
      ultimate_1005: {
        key: "ultimate_1005",
        type: "prefab",
        path: "prefabs/effects/ultimate_1005"
      },
      ultimate_1006: {
        key: "ultimate_1006",
        type: "prefab",
        path: "prefabs/effects/ultimate_1006"
      },
      ultimate_1007: {
        key: "ultimate_1007",
        type: "prefab",
        path: "prefabs/effects/ultimate_1007"
      },
      ultimate_1008: {
        key: "ultimate_1008",
        type: "prefab",
        path: "prefabs/effects/ultimate_1008"
      },
      ultimate_1009: {
        key: "ultimate_1009",
        type: "prefab",
        path: "prefabs/effects/ultimate_1009"
      },
      ultimate_1010: {
        key: "ultimate_1010",
        type: "prefab",
        path: "prefabs/effects/ultimate_1010"
      },
      ultimate_1011: {
        key: "ultimate_1011",
        type: "prefab",
        path: "prefabs/effects/ultimate_1011"
      },
      ultimate_1012: {
        key: "ultimate_1012",
        type: "prefab",
        path: "prefabs/effects/ultimate_1012"
      },
      ultimate_1013: {
        key: "ultimate_1013",
        type: "prefab",
        path: "prefabs/effects/ultimate_1013"
      },
      ultimate_1014: {
        key: "ultimate_1014",
        type: "prefab",
        path: "prefabs/effects/ultimate_1014"
      },
      ultimate_1015: {
        key: "ultimate_1015",
        type: "prefab",
        path: "prefabs/effects/ultimate_1015"
      },
      ultimate_1016: {
        key: "ultimate_1016",
        type: "prefab",
        path: "prefabs/effects/ultimate_1016"
      },
      ultimate_1017: {
        key: "ultimate_1017",
        type: "prefab",
        path: "prefabs/effects/ultimate_1017"
      },
      ultimate_1018: {
        key: "ultimate_1018",
        type: "prefab",
        path: "prefabs/effects/ultimate_1018"
      },
      ultimate_1019: {
        key: "ultimate_1019",
        type: "prefab",
        path: "prefabs/effects/ultimate_1019"
      },
      ultimate_1020: {
        key: "ultimate_1020",
        type: "prefab",
        path: "prefabs/effects/ultimate_1020"
      },
      ultimate_2001: {
        key: "ultimate_2001",
        type: "prefab",
        path: "prefabs/effects/ultimate_2001"
      },
      ultimate_2002: {
        key: "ultimate_2002",
        type: "prefab",
        path: "prefabs/effects/ultimate_2002"
      },
      ultimate_2003: {
        key: "ultimate_2003",
        type: "prefab",
        path: "prefabs/effects/ultimate_2003"
      },
      ultimate_3001: {
        key: "ultimate_3001",
        type: "prefab",
        path: "prefabs/effects/ultimate_3001"
      },
      ultimate_3002: {
        key: "ultimate_3002",
        type: "prefab",
        path: "prefabs/effects/ultimate_3002"
      },
      ultimate_3003: {
        key: "ultimate_3003",
        type: "prefab",
        path: "prefabs/effects/ultimate_3003"
      },
      ultimate_3004: {
        key: "ultimate_3004",
        type: "prefab",
        path: "prefabs/effects/ultimate_3004"
      },
      ultimate_3005: {
        key: "ultimate_3005",
        type: "prefab",
        path: "prefabs/effects/ultimate_3005"
      },
      ultimate_3006: {
        key: "ultimate_3006",
        type: "prefab",
        path: "prefabs/effects/ultimate_3006"
      },
      ultimate_3007: {
        key: "ultimate_3007",
        type: "prefab",
        path: "prefabs/effects/ultimate_3007"
      },
      ultimate_3008: {
        key: "ultimate_3008",
        type: "prefab",
        path: "prefabs/effects/ultimate_3008"
      },
      ultimate_3009: {
        key: "ultimate_3009",
        type: "prefab",
        path: "prefabs/effects/ultimate_3009"
      },
      ultimate_3010: {
        key: "ultimate_3010",
        type: "prefab",
        path: "prefabs/effects/ultimate_3010"
      },
      ultimate_3011: {
        key: "ultimate_3011",
        type: "prefab",
        path: "prefabs/effects/ultimate_3011"
      },
      ultimate_3012: {
        key: "ultimate_3012",
        type: "prefab",
        path: "prefabs/effects/ultimate_3012"
      },
      ultimate_3013: {
        key: "ultimate_3013",
        type: "prefab",
        path: "prefabs/effects/ultimate_3013"
      },
      ultimate_boom_1001: {
        key: "ultimate_boom_1001",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1001"
      },
      ultimate_boom_1002: {
        key: "ultimate_boom_1002",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1002"
      },
      ultimate_boom_1003: {
        key: "ultimate_boom_1003",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1003"
      },
      ultimate_boom_1004: {
        key: "ultimate_boom_1004",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1004"
      },
      ultimate_boom_1005: {
        key: "ultimate_boom_1005",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1005"
      },
      ultimate_boom_1006: {
        key: "ultimate_boom_1006",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1006"
      },
      ultimate_boom_1007: {
        key: "ultimate_boom_1007",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1007"
      },
      ultimate_boom_1008: {
        key: "ultimate_boom_1008",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1008"
      },
      ultimate_boom_1009: {
        key: "ultimate_boom_1009",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1009"
      },
      ultimate_boom_1010: {
        key: "ultimate_boom_1010",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1010"
      },
      ultimate_boom_1011: {
        key: "ultimate_boom_1011",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1011"
      },
      ultimate_boom_1012: {
        key: "ultimate_boom_1012",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1012"
      },
      ultimate_boom_1013: {
        key: "ultimate_boom_1013",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1013"
      },
      ultimate_boom_1014: {
        key: "ultimate_boom_1014",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1014"
      },
      ultimate_boom_1015: {
        key: "ultimate_boom_1015",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1015"
      },
      ultimate_boom_1016: {
        key: "ultimate_boom_1016",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1016"
      },
      ultimate_boom_1017: {
        key: "ultimate_boom_1017",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1017"
      },
      ultimate_boom_1019: {
        key: "ultimate_boom_1019",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1019"
      },
      ultimate_boom_1020: {
        key: "ultimate_boom_1020",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_1020"
      },
      ultimate_boom_2001: {
        key: "ultimate_boom_2001",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_2001"
      },
      ultimate_boom_2002: {
        key: "ultimate_boom_2002",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_2002"
      },
      ultimate_boom_2003: {
        key: "ultimate_boom_2003",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_2003"
      },
      ultimate_boom_3001: {
        key: "ultimate_boom_3001",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3001"
      },
      ultimate_boom_3002: {
        key: "ultimate_boom_3002",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3002"
      },
      ultimate_boom_3003: {
        key: "ultimate_boom_3003",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3003"
      },
      ultimate_boom_3005: {
        key: "ultimate_boom_3005",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3005"
      },
      ultimate_boom_3006: {
        key: "ultimate_boom_3006",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3006"
      },
      ultimate_boom_3007: {
        key: "ultimate_boom_3007",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3007"
      },
      ultimate_boom_3009: {
        key: "ultimate_boom_3009",
        type: "prefab",
        path: "prefabs/effects/ultimate_boom_3009"
      },
      smallPhone: {
        key: "smallPhone",
        type: "prefab",
        path: "prefabs/effects/smallPhone"
      },
      gift: {
        key: "gift",
        type: "prefab",
        path: "prefabs/effects/gift"
      },
      font_zh: {
        key: "font_zh",
        type: "cc.Font",
        path: "i18n/fonts/zh"
      },
      font_en: {
        key: "font_en",
        type: "cc.Font",
        path: "i18n/fonts/en"
      },
      font_bmt: {
        key: "font_bmt",
        type: "cc.Font",
        path: "i18n/fonts/bmfont/txt_ul"
      },
      scrollbackground_1001: {
        key: "scrollbackground_1001",
        type: "prefab",
        path: "prefabs/gui/chapterscroll/scrollbackground_1001"
      },
      scrollbackground_1002: {
        key: "scrollbackground_1002",
        type: "prefab",
        path: "prefabs/gui/chapterscroll/scrollbackground_1002"
      },
      scrollbackground_1003: {
        key: "scrollbackground_1003",
        type: "prefab",
        path: "prefabs/gui/chapterscroll/scrollbackground_1003"
      },
      scrollbackground_1004: {
        key: "scrollbackground_1004",
        type: "prefab",
        path: "prefabs/gui/chapterscroll/scrollbackground_1004"
      }
    };
    var GAME_EVENT = {
      ScrollBackground: "ScrollBackground",
      ChangeScrollBackground: "ChangeScrollBackground",
      CreateValueLabel: "CreateValueLabel",
      AbilityUp: "AbilityUp",
      BattleTime: "BattleTime"
    };
    var ANIMATION_TYPE = {
      ATK: "Atk",
      ATK_2: "Atk_2",
      DEATH: "Death",
      IDLE: "Idle",
      RUN: "Run",
      VIC: "Vic",
      UP: "UP",
      ULTRA: "Ultra"
    };
    var DIRECTION_ENUM = cc.Enum({
      LEFT: 0,
      RIGHT: 1
    });
    var BATTLE_EVENTS_ENUM = cc.Enum({
      NONE: "0",
      MARKET: "1",
      EVENT: "2"
    });
    var ROGUE_PANEL_TYPE = {
      ROGUE: 0,
      SHENQI: 1
    };
    var EFFECT_ZINDEX_TYPE = {
      LOW: 0,
      MID: 1,
      HIGH: 2
    };
    var BULLET_EFFECT_TYPE = {
      ZOOM: 0,
      EFFECT1: 1,
      EFFECT2: 2,
      EFFECT3: 3
    };
    var CONTROL_TYPE = {
      SETTINGS: "settings",
      PLAY: "playBtn",
      LEVELPROGRESS: "levelProgressBar",
      MONEY: "moneyNode",
      ENEMY_DETAIL: "enemyDetailBtn",
      DETAIL_INFO: "detailInfo",
      DETAIL_MAG: "detailMag",
      DETAIL_BACKPACK: "detailBackpack",
      TIME: "timeLab"
    };
    var SIGNIN_DATE_TYPE = {
      WEEK: "week",
      MONTH: "month",
      SEASON: "season",
      YEAR: "year"
    };
    var SIGNIN_STATE = {
      EXPIRED: "expired",
      IDLE: "idle",
      CHECKED: "checked",
      COMEBACK: "comeback"
    };
    var SIGNIN_WEEK_TYPE = {
      FIRST_WEEK: 0,
      OTHER_WEEK: 1
    };
    var SIGNIN_REWARD_TYPE = {
      DIAMONDS: 0,
      BRASS_SCISSORS: 1,
      SILVER_SCISSORS: 2,
      GOLD_SCISSORS: 3,
      PURPLE_PIECES: 4,
      PURPLE_EQUIP: 5
    };
    var COMMON_KEYS = {
      LANGUAGE: "current_language",
      SIGNIN_FREST_WEEK_DONE: "signin_first_week_done",
      SIGNIN_DATA_WEEK: "signin_data_week",
      SIGNIN_DATA_YEAR: "signin_data_year",
      ROLE_ADDITIONAL_DATA: "role_additional_data",
      EQUIPMENT_DATA: "equipment_data",
      BAG_ITEM_DATA: "bag_item_data",
      TALENT_DATA: "talent_data",
      NEW_DAY_TIMER: "new_day_timer",
      PASSIVE_HARVESTING_DATA: "passive_harvesting_data",
      SHOP_DIAMOND_FIRST: "shop_diamond_first",
      SHOP_COIN_AD_COUNT: "shop_coin_ad_count",
      SHOP_BOXES_DATA: "shop_boxes_data",
      TASK_DATA: "task_data",
      NEW_WEEK_TIMER: "new_week_timer",
      MAIL_DATA: "mail_data",
      VIP_DATA: "vip_data"
    };
    var CONTROLS = {
      BATTLE_CT: [ CONTROL_TYPE.SETTINGS, CONTROL_TYPE.LEVELPROGRESS, CONTROL_TYPE.MONEY, CONTROL_TYPE.ENEMY_DETAIL, CONTROL_TYPE.DETAIL_INFO, CONTROL_TYPE.DETAIL_MAG, CONTROL_TYPE.DETAIL_BACKPACK, CONTROL_TYPE.TIME ],
      BACKPACK_CT: [ CONTROL_TYPE.LEVELPROGRESS, CONTROL_TYPE.MONEY ],
      REVIVE_CT: [ CONTROL_TYPE.LEVELPROGRESS, CONTROL_TYPE.MONEY, CONTROL_TYPE.ENEMY_DETAIL, CONTROL_TYPE.DETAIL_BACKPACK ],
      ROGUE_CT: [ CONTROL_TYPE.LEVELPROGRESS, CONTROL_TYPE.MONEY, CONTROL_TYPE.DETAIL_BACKPACK ],
      MARKET_CT: [ CONTROL_TYPE.LEVELPROGRESS, CONTROL_TYPE.MONEY, CONTROL_TYPE.DETAIL_BACKPACK ],
      EVENTS_CT: [ CONTROL_TYPE.LEVELPROGRESS, CONTROL_TYPE.MONEY, CONTROL_TYPE.DETAIL_BACKPACK ],
      VICTORY_CT: [],
      DEFEAT_CT: [],
      DEBUG_CT: [ CONTROL_TYPE.MONEY ],
      SIGNIN_CT: []
    };
    var STATES_CONFIG = {
      basic_hp: {
        zh: "\u6700\u5927\u751f\u547d\u503c",
        name: "Max Health",
        belongTo: "data",
        icon: "1083"
      },
      strength: {
        zh: "\u529b\u91cf",
        name: "Strength",
        belongTo: "data",
        icon: "1064"
      },
      hp_regeneration: {
        zh: "\u8840\u91cf\u56de\u590d",
        name: "Health Regen",
        belongTo: "data",
        icon: "1072"
      },
      armor: {
        zh: "\u62a4\u7532",
        name: "Defense",
        belongTo: "data",
        icon: "1114"
      },
      energy_max: {
        zh: "\u6700\u5927\u80fd\u91cf\u503c",
        name: "Max Energy",
        belongTo: "data",
        icon: "1088"
      },
      energy_recovery: {
        zh: "\u80fd\u91cf\u56de\u590d",
        name: "Energy Regen",
        belongTo: "data",
        icon: "1086"
      },
      ultimate_ability_damage: {
        zh: "\u5927\u62db\u4f24\u5bb3",
        name: "Ultimate Damage",
        belongTo: "data",
        icon: "1093"
      },
      attack_speed: {
        zh: "\u653b\u901f",
        name: "Attack Speed",
        belongTo: "data",
        percent: true,
        icon: "1130"
      },
      reflect_damage: {
        zh: "\u53cd\u4f24",
        name: "Thorns",
        belongTo: "data",
        icon: "1118"
      },
      critical_rate: {
        zh: "\u66b4\u51fb\u7387",
        name: "Crit Chance",
        belongTo: "data",
        percent: true,
        icon: "1095"
      },
      dodge: {
        zh: "\u95ea\u907f",
        name: "Dodge Chance",
        belongTo: "data",
        percent: true,
        icon: "1123"
      },
      critical_damage: {
        zh: "\u66b4\u51fb\u4f24\u5bb3",
        name: "Crit Damage",
        belongTo: "data",
        percent: true,
        icon: "1096"
      },
      amplified_damage: {
        zh: "\u91cd\u4f24",
        name: "Vulnerable",
        belongTo: "data",
        icon: "1062"
      },
      healing_boost: {
        zh: "\u6cbb\u7597",
        name: "Heal Enhancement",
        belongTo: "data",
        icon: "1073"
      },
      income: {
        zh: "\u6536\u5165",
        name: "Income",
        belongTo: "data",
        icon: "1143"
      }
    };
    var GAME_RESULT_TYPE = {
      VICTORY: 0,
      DEFEAT: 1
    };
    var UIID = cc.Enum({
      BattlePanel: 1,
      BossComing: 2,
      EventsPanel: 4,
      HomePagePanel: 6,
      LoadingPanel: 7,
      MarketPanel: 8,
      RevivePanel: 9,
      RoguePanel: 10,
      ScrollBackgroundPanel: 11,
      ResultPanel: 12,
      BackpackPanel: 13,
      DebugPanel: 14,
      GuiPanel: 15,
      DetailBullet: 16,
      SettingsPanel: 17,
      LanguagesPanel: 18,
      SigninPanel: 19,
      Confirm: 20,
      Equipment: 21,
      EquipmentItemTip: 22,
      EquipmentDecompose: 23,
      EquipMerge: 24,
      PowerChange: 25,
      ShopPagePanel: 26,
      EquipPagePanel: 27,
      BattlePagePanel: 28,
      TalentPagePanel: 29,
      OtherPagePanel: 30,
      RewardsPanel: 31,
      EquipmentMergeResult: 32,
      PromotionPanel: 33,
      SkillMerge: 35,
      StaminaPanel: 36,
      PassiveHarvestingPanel: 37,
      ShopProbsPanel: 38,
      ShopSelectEquipment: 39,
      OpenBox: 40,
      OpenBoxResult: 41,
      TaskPanel: 42,
      MailPanel: 43,
      MailInfo: 44,
      TopUI: 45,
      VIP: 46
    });
    var UIConfigData = (_UIConfigData = {}, _UIConfigData[UIID.ScrollBackgroundPanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/chapterscroll/scrollbackgroundPanel"
    }, _UIConfigData[UIID.LoadingPanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/loadingPanel"
    }, _UIConfigData[UIID.BattlePanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/battlePanel",
      destroy: false
    }, _UIConfigData[UIID.ShopPagePanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/homepage/shopPagePanel",
      destroy: false
    }, _UIConfigData[UIID.EquipPagePanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/homepage/equipPagePanel",
      destroy: false
    }, _UIConfigData[UIID.BattlePagePanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/homepage/battlePagePanel",
      destroy: false
    }, _UIConfigData[UIID.TalentPagePanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/homepage/talentPagePanel",
      destroy: false
    }, _UIConfigData[UIID.OtherPagePanel] = {
      layer: _LayerManager.LayerType.Game,
      prefab: "prefabs/gui/homepage/otherPagePanel",
      destroy: false
    }, _UIConfigData[UIID.HomePagePanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/homepage/homePagePanel",
      destroy: false
    }, _UIConfigData[UIID.BossComing] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/bossComing",
      destroy: false
    }, _UIConfigData[UIID.RoguePanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/rogue/roguePanel",
      destroy: false
    }, _UIConfigData[UIID.EventsPanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/events/eventsPanel",
      destroy: false
    }, _UIConfigData[UIID.MarketPanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/market/marketPanel",
      destroy: false
    }, _UIConfigData[UIID.RevivePanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/revivePanel",
      destroy: false
    }, _UIConfigData[UIID.ResultPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/resultPanel",
      destroy: false
    }, _UIConfigData[UIID.BackpackPanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/backpack/backpackPanel",
      destroy: false
    }, _UIConfigData[UIID.DebugPanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/debugPanel",
      destroy: false
    }, _UIConfigData[UIID.SigninPanel] = {
      layer: _LayerManager.LayerType.GameUI,
      prefab: "prefabs/gui/signin/signinPanel",
      destroy: false
    }, _UIConfigData[UIID.SettingsPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/settings/settingsPanel",
      destroy: false
    }, _UIConfigData[UIID.LanguagesPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/settings/languagesPanel",
      destroy: false
    }, _UIConfigData[UIID.GuiPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/guiPanel",
      destroy: false
    }, _UIConfigData[UIID.DetailBullet] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/component/detailBullet",
      destroy: false
    }, _UIConfigData[UIID.Confirm] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/common/confirm",
      destroy: false
    }, _UIConfigData[UIID.EquipmentItemTip] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/equipmentItemTip",
      destroy: false
    }, _UIConfigData[UIID.EquipmentDecompose] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/equipmentDecompose",
      destroy: false
    }, _UIConfigData[UIID.EquipMerge] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/equipMerge",
      destroy: false
    }, _UIConfigData[UIID.PowerChange] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/powerChange",
      destroy: false
    }, _UIConfigData[UIID.PowerChange] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/powerChange",
      destroy: false
    }, _UIConfigData[UIID.RewardsPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/rewardsPanel",
      destroy: false
    }, _UIConfigData[UIID.EquipmentMergeResult] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/equipmentMergeResult",
      destroy: false
    }, _UIConfigData[UIID.PromotionPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/promotionPanel",
      destroy: false
    }, _UIConfigData[UIID.SkillMerge] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/skillMerge",
      destroy: false
    }, _UIConfigData[UIID.StaminaPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/staminaPanel",
      destroy: false
    }, _UIConfigData[UIID.PassiveHarvestingPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/passiveHarvestingPanel",
      destroy: false
    }, _UIConfigData[UIID.ShopProbsPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/shop/shopProbs",
      destroy: false
    }, _UIConfigData[UIID.ShopSelectEquipment] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/shop/selectEquipment",
      destroy: false
    }, _UIConfigData[UIID.OpenBox] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/shop/openBox",
      destroy: false
    }, _UIConfigData[UIID.OpenBoxResult] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/shop/openBoxResult",
      destroy: false
    }, _UIConfigData[UIID.TaskPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/task/task",
      destroy: false
    }, _UIConfigData[UIID.MailPanel] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/mail/mail",
      destroy: false
    }, _UIConfigData[UIID.MailInfo] = {
      layer: _LayerManager.LayerType.UI,
      prefab: "prefabs/gui/mail/mailInfo",
      destroy: false
    }, _UIConfigData[UIID.TopUI] = {
      layer: _LayerManager.LayerType.MiddleUI,
      prefab: "prefabs/component/topUI",
      destroy: false
    }, _UIConfigData[UIID.VIP] = {
      layer: _LayerManager.LayerType.BottomUI,
      prefab: "prefabs/gui/vip",
      destroy: false
    }, _UIConfigData);
    module.exports = {
      GAME_CONST: GAME_CONST,
      WALKING_TIME: WALKING_TIME,
      POOLMANAGER_TYPE: POOLMANAGER_TYPE,
      PRELOADCONFIG: PRELOADCONFIG,
      GAME_EVENT: GAME_EVENT,
      ANIMATION_TYPE: ANIMATION_TYPE,
      DIRECTION_ENUM: DIRECTION_ENUM,
      BATTLE_EVENTS_ENUM: BATTLE_EVENTS_ENUM,
      ROGUE_PANEL_TYPE: ROGUE_PANEL_TYPE,
      EFFECT_ZINDEX_TYPE: EFFECT_ZINDEX_TYPE,
      BULLET_EFFECT_TYPE: BULLET_EFFECT_TYPE,
      CONTROL_TYPE: CONTROL_TYPE,
      SIGNIN_DATE_TYPE: SIGNIN_DATE_TYPE,
      SIGNIN_STATE: SIGNIN_STATE,
      SIGNIN_WEEK_TYPE: SIGNIN_WEEK_TYPE,
      SIGNIN_REWARD_TYPE: SIGNIN_REWARD_TYPE,
      COMMON_KEYS: COMMON_KEYS,
      CONTROLS: CONTROLS,
      STATES_CONFIG: STATES_CONFIG,
      GAME_RESULT_TYPE: GAME_RESULT_TYPE,
      UIID: UIID,
      UIConfigData: UIConfigData,
      TALENT_MAX_LEVEL: TALENT_MAX_LEVEL
    };
    cc._RF.pop();
  }, {
    "../gui/gui/LayerManager": "LayerManager"
  } ],
  GlobalEvent: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bde13OHouRD26qOD0fIkSF5", "GlobalEvent");
    "use strict";
    cc.director.GlobalEvent = {
      handles_: {},
      emit: function emit(eventName, data) {
        var returns = [];
        data = data || {};
        data.eventName = eventName;
        for (var findEvenName in this.handles_) if (findEvenName == eventName) for (var i = 0; i < this.handles_[findEvenName].length; i++) if (this.handles_[findEvenName][i]) {
          var returnValue = this.handles_[findEvenName][i](data);
          returns.push(returnValue);
        }
        return returns;
      },
      on: function on(eventName, callback, target) {
        this.handles_[eventName] = this.handles_[eventName] || [];
        this.handles_[eventName].push(callback.bind(target));
      },
      off: function off(eventName) {
        if (!this.handles_[eventName]) return;
        for (var i = 0; i < this.handles_[eventName].length; i++) this.handles_[eventName][i] = null;
      },
      clear: function clear() {
        for (var findEvenName in this.handles_) for (var i = 0; i < this.handles_[findEvenName].length; i++) this.handles_[findEvenName][i] = null;
      }
    };
    cc._RF.pop();
  }, {} ],
  Global: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e607c/kQqpOoLMksUrp8kUc", "Global");
    "use strict";
    var PreloadManager = require("PreloadManager");
    var BasicAttributesManager = require("BasicAttributesManager");
    var SkillManager = require("SkillManager");
    var EquipmentManager = require("EquipmentManager");
    var BagManager = require("BagManager");
    var TalentManager = require("TalentManager");
    var LanguageManager = require("LanguageManager");
    var PassiveHarvestManager = require("PassiveHarvestingManager");
    var ShopManager = require("ShopManager");
    var TaskManager = require("TaskManager");
    var MailManager = require("MailManager");
    var VipManager = require("VipManager");
    var Global = function Global() {
      this.config = null;
      this.storage = null;
      this.audio = null;
      this.gui = null;
      this.timer = null;
      this.roleData = null;
      this.signinManager = null;
      this.tempData = {
        backpack_isOpened_states: false
      };
      this.networkTimer = null;
      this.offsetTimer = null;
      this.utils = require("Utils")();
      this.res = require("ResManager")();
      this.poolManager = require("PoolManager")();
      this.preloadManager = new PreloadManager();
      this.basicAttributesManager = new BasicAttributesManager();
      this.skillManager = new SkillManager();
      this.equipmentManager = new EquipmentManager();
      this.bagManager = new BagManager();
      this.talentManager = new TalentManager();
      this.roleManager = require("RoleManager")();
      this.dialogueManager = require("DialogueManager")();
      this.eventsManager = require("EventsManager")();
      this.chapterManager = require("ChapterManager")();
      this.levelManager = require("LevelManager")();
      this.languageManager = new LanguageManager();
      this.passiveHarvestManager = new PassiveHarvestManager();
      this.shopManager = new ShopManager();
      this.taskManager = new TaskManager();
      this.mailManager = new MailManager();
      this.vipManager = new VipManager();
    };
    window.Global = new Global();
    cc._RF.pop();
  }, {
    BagManager: "BagManager",
    BasicAttributesManager: "BasicAttributesManager",
    ChapterManager: "ChapterManager",
    DialogueManager: "DialogueManager",
    EquipmentManager: "EquipmentManager",
    EventsManager: "EventsManager",
    LanguageManager: "LanguageManager",
    LevelManager: "LevelManager",
    MailManager: "MailManager",
    PassiveHarvestingManager: "PassiveHarvestingManager",
    PoolManager: "PoolManager",
    PreloadManager: "PreloadManager",
    ResManager: "ResManager",
    RoleManager: "RoleManager",
    ShopManager: "ShopManager",
    SkillManager: "SkillManager",
    TalentManager: "TalentManager",
    TaskManager: "TaskManager",
    Utils: "Utils",
    VipManager: "VipManager"
  } ],
  GuiView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b57bMR6t1J/Lg+1IT8v2wO", "GuiView");
    "use strict";
    var gameConfig = require("GameConfig");
    var Money = require("Money");
    var MoneyEffect = require("MoneyEffect");
    var LevelProgressBar = require("LevelProgressBar");
    var DetailPanelView = require("DetailPanelView");
    cc.Class({
      extends: cc.Component,
      properties: {
        settingsBtn: {
          type: cc.Node,
          default: null
        },
        levelProgressBar: {
          type: LevelProgressBar,
          default: null
        },
        money: {
          type: Money,
          default: null
        },
        enemyDetailBtn: {
          type: cc.Node,
          default: null
        },
        detailPanelView: {
          type: DetailPanelView,
          default: null
        },
        detailInfo: {
          type: cc.Node,
          default: null
        },
        detailMag: {
          type: cc.Node,
          default: null
        },
        detailBackpack: {
          type: cc.Node,
          default: null
        },
        backpackBtn: {
          type: cc.Node,
          default: null
        },
        timeLabel: {
          type: cc.Label,
          default: null
        },
        _roleView: null,
        _autoRoleView: null,
        _belongsToCT: null,
        _battleTime: null,
        _battleTimeFlag: false
      },
      onAdded: function onAdded(args) {
        Global.utils.logMessage("\u521d\u59cb\u5316GUI\u9762\u677f");
        this.updateData(args);
        return true;
      },
      onEnable: function onEnable() {
        cc.director.GlobalEvent.on(gameConfig.GAME_EVENT.BattleTime, this.BattleTime, this);
      },
      BattleTime: function BattleTime(args) {
        if (args) {
          if (args.cleanTime || null == this._battleTime) {
            this._battleTime = Date.now();
            this.updateTimeLabel();
          }
          this._battleTimeFlag = true == args.battleTimeFlag;
        }
      },
      updateData: function updateData(args) {
        Global.utils.logMessage("\u66f4\u65b0GUI\u9762\u677f");
        args.hasOwnProperty("roleView") && (this._roleView = args.roleView);
        if (this._roleView) {
          this._roleView._roleData.updateMoneyCallback = this.updateMoneyCallback.bind(this);
          this.money.initData(this._roleView._roleData);
          this._roleView.detailPanelView = this.detailPanelView;
          this.detailPanelView.initData(this._roleView._roleData);
        }
        args.hasOwnProperty("autoRoleView") && (this._autoRoleView = args.autoRoleView);
        this.levelProgressBar.updateUI(args);
        if (args.hasOwnProperty("controls")) {
          this._belongsToCT = args.controls;
          this.settingsBtn.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.SETTINGS);
          this.levelProgressBar.node.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.LEVELPROGRESS);
          this.money.node.parent.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.MONEY);
          this.enemyDetailBtn.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.ENEMY_DETAIL);
          this.detailInfo.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.DETAIL_INFO);
          this.detailMag.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.DETAIL_MAG);
          this.detailBackpack.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.DETAIL_BACKPACK);
          this.timeLabel.node.active = -1 != args.controls.indexOf(gameConfig.CONTROL_TYPE.TIME);
        }
      },
      updateMoneyCallback: function updateMoneyCallback(_value, _skillId, args) {
        this.money.change();
        if (_value > 0 && _skillId) {
          var fromItem, startWorldPos;
          var startPos = cc.v2(0, 0);
          var endWorldPos = this.money.node.getChildByName("icon").convertToWorldSpaceAR(cc.v2(0, 0));
          var endPos = Global.gui.effect.convertToNodeSpaceAR(endWorldPos);
          if ("1188" == _skillId) {
            var battleView = Global.gui.get(gameConfig.UIID.BattlePanel).getComponent("BattleView");
            if (battleView) {
              var _startWorldPos = battleView._autoRoleView.getAreaLaunchPosition();
              startPos = Global.gui.effect.convertToNodeSpaceAR(_startWorldPos);
            }
          } else if (Global.gui.has(gameConfig.UIID.MarketPanel)) {
            var marketView = Global.gui.get(gameConfig.UIID.MarketPanel).getComponent("MarketView");
            fromItem = marketView.getMoneyItem(_skillId);
            if (fromItem) {
              startWorldPos = fromItem.convertToWorldSpaceAR(cc.v2(0, 0));
              startPos = Global.gui.effect.convertToNodeSpaceAR(startWorldPos);
            }
          } else if (Global.gui.has(gameConfig.UIID.RoguePanel)) {
            var rogueView = Global.gui.get(gameConfig.UIID.RoguePanel).getComponent("RogueView");
            fromItem = rogueView.getMoneyItem(_skillId);
            if (fromItem) {
              startWorldPos = fromItem.convertToWorldSpaceAR(cc.v2(0, 0));
              startPos = Global.gui.effect.convertToNodeSpaceAR(startWorldPos);
            }
          }
          null != args && args.reversal ? this.getMoneyEffect().playCoinFlyAnim(Math.abs(_value), endPos, startPos, args) : this.getMoneyEffect().playCoinFlyAnim(Math.abs(_value), startPos, endPos, args);
        }
      },
      getMoneyEffect: function getMoneyEffect() {
        var moneyEffect;
        moneyEffect = Global.gui.effect.getComponent(MoneyEffect) ? Global.gui.effect.getComponent(MoneyEffect) : Global.gui.effect.addComponent(MoneyEffect);
        return moneyEffect;
      },
      onClickSettingsBtn: function onClickSettingsBtn(event, type) {
        Global.audio.playEffect("audio/click");
        var uiArgs = {
          belongsToCT: gameConfig.CONTROLS.BATTLE_CT,
          fromGame: true
        };
        Global.gui.open(gameConfig.UIID.SettingsPanel, uiArgs);
      },
      onClickDetailBtn: function onClickDetailBtn(event, type) {
        var uiArgs = {
          belongsToCT: this._belongsToCT,
          isEnemy: "true" == type,
          roleData: "true" == type ? this._autoRoleView._roleData : this._roleView._roleData
        };
        Global.gui.open(gameConfig.UIID.BackpackPanel, uiArgs);
      },
      onClickPlayBtn: function onClickPlayBtn(event, customEventData) {
        event.isChecked ? cc.director.pause() : cc.director.resume();
      },
      onClickTestBtn: function onClickTestBtn() {
        this._roleView._roleData.spendMoney(100);
      },
      update: function update() {
        this._battleTimeFlag && this.updateTimeLabel();
      },
      updateTimeLabel: function updateTimeLabel() {
        var offTime = Date.now() - this._battleTime;
        this.timeLabel.string = Global.utils.formatTimeToSecondsAndMilliseconds(offTime);
      }
    });
    cc._RF.pop();
  }, {
    DetailPanelView: "DetailPanelView",
    GameConfig: "GameConfig",
    LevelProgressBar: "LevelProgressBar",
    Money: "Money",
    MoneyEffect: "MoneyEffect"
  } ],
  HomePageView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4cb04VaP+NDYqk2H2QKmcFt", "HomePageView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        _curUIID: null,
        toggleList: [ cc.Toggle ],
        shopRedDot: cc.Node
      },
      onEnable: function onEnable() {
        Global.audio.playMusicLoop("audio/music");
        cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.ChangeScrollBackground);
        this.onClickTogglesBtn(null, 2);
        Global.mailManager.init();
        this.updateShopRedDot();
      },
      updateShopRedDot: function updateShopRedDot() {
        this.shopRedDot.active = Global.shopManager.hasEquipmentRedDot() || Global.shopManager.hasPaymentRedDot();
      },
      updateToggleState: function updateToggleState(_index, _dontShowUI) {
        for (var i = 0; i < this.toggleList.length; i++) {
          var toggle = this.toggleList[i];
          toggle.isChecked = i == _index;
        }
        if (null != this._curUIID) {
          Global.gui.remove(this._curUIID);
          this._curUIID = null;
        }
        var uiArgs = null;
        var uicallBack = null;
        switch (parseInt(_index)) {
         case 0:
          this._curUIID = gameConfig.UIID.ShopPagePanel;
          break;

         case 1:
          uiArgs = {
            roleData: Global.roleData
          };
          this._curUIID = gameConfig.UIID.EquipPagePanel;
          break;

         case 2:
          this._curUIID = gameConfig.UIID.BattlePagePanel;
          break;

         case 3:
          uiArgs = {
            roleData: Global.roleData
          };
          this._curUIID = gameConfig.UIID.TalentPagePanel;
          break;

         case 4:
          this._curUIID = gameConfig.UIID.OtherPagePanel;
          break;

         default:
          this._curUIID = gameConfig.UIID.BattlePagePanel;
        }
        Global.gui.open(gameConfig.UIID.TopUI);
        this._curUIID && true != _dontShowUI && Global.gui.open(this._curUIID, uiArgs, uicallBack);
      },
      onClickTogglesBtn: function onClickTogglesBtn(evn, data) {
        Global.audio.playEffect("audio/click");
        this.updateToggleState(data);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  HpProgressBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "883d6Uj9ClJx7mKn6SaoXS8", "HpProgressBar");
    "use strict";
    var BaseProgressBar = require("BaseProgressBar");
    cc.Class({
      extends: BaseProgressBar,
      properties: {
        _roleData: null,
        whiteBgPool: [],
        whiteBgPrefab: cc.Prefab,
        aniLabel: cc.Node
      },
      initData: function initData(roleData) {
        this._roleData = roleData;
        this.updateUI();
        this.timer = Date.now();
        this.speed = 3;
        this.currentValue = this._roleData.currentHp;
      },
      reduceHp: function reduceHp(_value) {
        if (this.percent) {
          var item;
          item = this.whiteBgPool.length > 0 ? this.whiteBgPool.pop() : cc.instantiate(this.whiteBgPrefab);
          _value > this._roleData.currentHp && (_value = this._roleData.currentHp);
          item.getComponent("WhiteBgBar").setContent(this.whiteBgPool, this._roleData.currentHp / this._roleData.data.basic_hp, _value / this._roleData.data.basic_hp);
          this.node.addChild(item);
        }
      },
      updateUI: function updateUI() {
        this.numLab.node.active = this.ishowBaseHp;
        this.numLab.string = "/" + this._roleData.data.basic_hp;
        this.aniLabel && this.aniLabel.getComponent("AniLabel").animateNumberChange(this._roleData.currentHp);
      },
      update: function update(dt) {
        if (Date.now() - this.timer >= 100) {
          this.currentValue = cc.misc.lerp(this.currentValue, this._roleData.currentHp, dt * this.speed);
          Math.abs(this.currentValue - this._roleData.currentHp) < .01 && (this.currentValue = this._roleData.currentHp);
          this.percent = this.currentValue / this._roleData.data.basic_hp;
          this.progressBar.progress = this.percent;
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseProgressBar: "BaseProgressBar"
  } ],
  ItemConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8cfaeBcsx9M1rM6nPEcgAu8", "ItemConfig");
    "use strict";
    var ItemConfig = cc.Class({
      name: "ItemConfig",
      statics: {
        data: [ {
          id: "1001",
          name: "\u87ba\u4e1d\uff08\u88c5\u5907\u5347\u7ea7\u6750\u6599\uff09",
          rarity: "1",
          slot: "",
          type: "0"
        }, {
          id: "1002",
          name: "\u87ba\u4e1d\u8d77\uff08\u88c5\u5907\u7a81\u7834\u6750\u6599\uff09",
          rarity: "2",
          slot: "",
          type: "0"
        }, {
          id: "1003",
          name: "\u5347\u54c1\u6750\u6599-\u6b66\u5668-\u7d2b",
          rarity: "3",
          slot: "0",
          type: "1"
        }, {
          id: "1004",
          name: "\u5347\u54c1\u6750\u6599-\u6b66\u5668-\u6a59",
          rarity: "4",
          slot: "0",
          type: "1"
        }, {
          id: "1005",
          name: "\u5347\u54c1\u6750\u6599-\u6b66\u5668-\u7ea2",
          rarity: "5",
          slot: "0",
          type: "1"
        }, {
          id: "1006",
          name: "\u5347\u54c1\u6750\u6599-\u80cc\u5305-\u7d2b",
          rarity: "3",
          slot: "1",
          type: "1"
        }, {
          id: "1007",
          name: "\u5347\u54c1\u6750\u6599-\u80cc\u5305-\u6a59",
          rarity: "4",
          slot: "1",
          type: "1"
        }, {
          id: "1008",
          name: "\u5347\u54c1\u6750\u6599-\u80cc\u5305-\u7ea2",
          rarity: "5",
          slot: "1",
          type: "1"
        }, {
          id: "1009",
          name: "\u5347\u54c1\u6750\u6599-\u9879\u94fe-\u7d2b",
          rarity: "3",
          slot: "2",
          type: "1"
        }, {
          id: "1010",
          name: "\u5347\u54c1\u6750\u6599-\u9879\u94fe-\u6a59",
          rarity: "4",
          slot: "2",
          type: "1"
        }, {
          id: "1011",
          name: "\u5347\u54c1\u6750\u6599-\u9879\u94fe-\u7ea2",
          rarity: "5",
          slot: "2",
          type: "1"
        }, {
          id: "1012",
          name: "\u5347\u54c1\u6750\u6599-\u6212\u6307-\u7d2b",
          rarity: "3",
          slot: "3",
          type: "1"
        }, {
          id: "1013",
          name: "\u5347\u54c1\u6750\u6599-\u6212\u6307-\u6a59",
          rarity: "4",
          slot: "3",
          type: "1"
        }, {
          id: "1014",
          name: "\u5347\u54c1\u6750\u6599-\u6212\u6307-\u7ea2",
          rarity: "5",
          slot: "3",
          type: "1"
        }, {
          id: "1015",
          name: "\u81ea\u9009S\u88c5\u5151\u6362\u5238",
          rarity: "5",
          slot: "",
          type: "3"
        }, {
          id: "1016",
          name: "\u7535\u68af\u5361",
          rarity: "1",
          slot: "",
          type: "3"
        }, {
          id: "1017",
          name: "\u94f6\u526a\u5200",
          rarity: "1",
          slot: "",
          type: "3"
        }, {
          id: "1018",
          name: "\u91d1\u526a\u5200",
          rarity: "3",
          slot: "",
          type: "3"
        }, {
          id: "1019",
          name: "\u5b9d\u77f3\u526a\u5200",
          rarity: "3",
          slot: "",
          type: "3"
        }, {
          id: "2001",
          name: "\u4f53\u529b",
          rarity: "0",
          slot: "",
          type: "2"
        }, {
          id: "2002",
          name: "\u94bb\u77f3",
          rarity: "4",
          slot: "",
          type: "2"
        }, {
          id: "2003",
          name: "\u91d1\u5e01",
          rarity: "1",
          slot: "",
          type: "2"
        } ]
      }
    });
    module.exports = ItemConfig;
    cc._RF.pop();
  }, {} ],
  ItemData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e3369SEYU1IpaTo6dQNKuTU", "ItemData");
    "use strict";
    var ItemData = cc.Class({
      extends: cc.Component,
      properties: {
        itemConfig: null,
        itemId: null,
        roleData: null,
        rarity: null,
        type: null,
        slot: null,
        count: 1
      },
      setData: function setData(_roleData, _itemConfig) {
        this.itemConfig = _itemConfig;
        this.itemId = _itemConfig.id;
        this.roleData = _roleData;
        this.rarity = this.itemConfig.rarity;
        this.type = this.itemConfig.type;
        this.slot = this.itemConfig.slot;
      }
    });
    module.exports = ItemData;
    cc._RF.pop();
  }, {} ],
  LabelUpdater: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "45b04ht0XdAQaoYo7rqrt52", "LabelUpdater");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        labelText: cc.Label,
        key: "",
        args: [ cc.String ],
        stringContent: ""
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("language-changed", this.updateText, this);
        "" != this.key && this.updateText();
      },
      setContent: function setContent(_key, _args) {
        this.key = _key;
        this.args = _args;
        this.updateText();
      },
      setString: function setString(_content) {
        this.stringContent = _content;
        this.updateText();
      },
      setColor: function setColor(_color) {
        this.labelText.node.color = _color;
      },
      onDestroy: function onDestroy() {
        cc.systemEvent.off("language-changed", this.updateText, this);
      },
      updateText: function updateText() {
        var text;
        text = "" != this.key ? Global.languageManager.t(this.key, this.args) : this.stringContent;
        try {
          var font = Global.res.getRes(gameConfig.PRELOADCONFIG["font_" + Global.languageManager.currentLang].path);
          font && (this.labelText.font = font);
        } catch (error) {
          console.warn("\u66f4\u65b0" + Global.languageManager.currentLang + "\u5b57\u4f53\u5931\u8d25\uff1a", error);
        }
        this.labelText.string = text;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  LanguageItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "47c091/mGJBf4NaPQOr8rPP", "LanguageItem");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        itemIcon: {
          type: cc.Sprite,
          default: null,
          tooltip: "\u8bed\u8a00\u56fe\u6807"
        },
        nameNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u8bed\u8a00\u540d\u79f0"
        },
        _language: null
      },
      initData: function initData(language, currentLanguage) {
        this._language = language;
        this.nameNode.getComponent("RichTextUpdater").setContent("settings_language_" + this._language);
        this.getComponent(cc.Toggle).isChecked = language == currentLanguage;
      },
      setLanguage: function setLanguage(toggle, customEventData) {
        var _this = this;
        console.log("setLanguage:", this._language);
        Global.audio.playEffect("audio/click");
        Global.languageManager.changeLanguage(this._language, function() {
          Global.storage.set(gameConfig.COMMON_KEYS.LANGUAGE, _this._language);
          Global.gui.toast("settings_language_switch_suc", true);
        });
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  LanguageManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5bde7mYm+RBxLvvvfO2KAVW", "LanguageManager");
    "use strict";
    var LanguageManager = cc.Class({
      extends: cc.Component,
      properties: {
        currentLang: "zh",
        i18nData: null
      },
      init: function init(lang) {
        null != lang && "" != lang || (lang = Global.config.languageDefault);
        return this.loadLanguage(lang);
      },
      loadLanguage: function loadLanguage(lang) {
        var _this = this;
        var i18nCount = 3;
        var currentCount = 0;
        this.i18nData = {};
        return new Promise(function(resolve, reject) {
          Global.res.load("i18n/" + lang + "_skill", cc.JsonAsset, function(err, data) {
            if (err) {
              console.error("\u8bed\u8a00\u6587\u4ef6\u52a0\u8f7d\u5931\u8d25\uff1a", err);
              reject(err);
              return;
            }
            _this.currentLang = lang;
            _this.handleData(data.json);
            currentCount++;
            currentCount == i18nCount && resolve(_this.i18nData);
          });
          Global.res.load("i18n/" + lang + "_event", cc.JsonAsset, function(err, data) {
            if (err) {
              console.error("\u8bed\u8a00\u6587\u4ef6\u52a0\u8f7d\u5931\u8d25\uff1a", err);
              reject(err);
              return;
            }
            _this.currentLang = lang;
            _this.handleData(data.json);
            currentCount++;
            currentCount == i18nCount && resolve(_this.i18nData);
          });
          Global.res.load("i18n/" + lang + "_ui", cc.JsonAsset, function(err, data) {
            if (err) {
              console.error("\u8bed\u8a00\u6587\u4ef6\u52a0\u8f7d\u5931\u8d25\uff1a", err);
              reject(err);
              return;
            }
            _this.currentLang = lang;
            _this.handleData(data.json);
            currentCount++;
            currentCount == i18nCount && resolve(_this.i18nData);
          });
        });
      },
      handleData: function handleData(_json) {
        for (var index in _json) {
          var item = _json[index];
          this.i18nData[item.id] = {
            content: item.content,
            valueList: item.valueList
          };
        }
      },
      t: function t(key, args, _needNewLine) {
        void 0 === _needNewLine && (_needNewLine = true);
        var str = key;
        if (this.i18nData) {
          try {
            str = this.i18nData[key].content;
          } catch (error) {
            console.error("key:", key + " Error:", error);
          }
          args && args.forEach(function(value, index) {
            str = str.replace("{" + index + "}", value);
          });
          str = str.replaceAll("&lt;", "<");
          str = str.replaceAll("&gt;", ">");
          false == _needNewLine && (str = str.replaceAll("\n", ""));
        }
        return str;
      },
      changeLanguage: function changeLanguage(lang, callback) {
        null != lang && "" != lang || (lang = Global.config.languageDefault);
        if (this.currentLang == lang) return;
        this.loadLanguage(lang).then(function() {
          cc.systemEvent.emit("language-changed");
          callback && callback();
        });
      }
    });
    module.exports = LanguageManager;
    cc._RF.pop();
  }, {} ],
  LanguagesView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "776d6oO0SdEBJ1jk0ZMnH+G", "LanguagesView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        languageItemPreb: {
          type: cc.Prefab,
          default: null,
          tooltip: "\u8bed\u8a00\u9879\u9884\u5236\u4f53"
        },
        content: {
          type: cc.Node,
          default: null,
          tooltip: "\u6eda\u52a8\u89c6\u56fe\u7684\u5185\u5bb9\u6839\u8282\u70b9"
        }
      },
      onLoad: function onLoad() {
        this.content.removeAllChildren();
        var languages = Global.config.languages;
        console.log("\u672c\u6e38\u620f\u652f\u6301\uff1a", languages);
        var currentLanguage = Global.storage.get(gameConfig.COMMON_KEYS.LANGUAGE, Global.config.languageDefault);
        console.log("\u5f53\u524d\u8bed\u79cd\u4e3a\uff1a", currentLanguage);
        for (var index = 0; index < languages.length; index++) {
          var language = languages[index];
          if (language) {
            var item = cc.instantiate(this.languageItemPreb);
            item || console.error("\u8bed\u8a00\u9879\u9884\u5236\u4f53\u4e0d\u5b58\u5728");
            item.getComponent("LanguageItem").initData(language, currentLanguage);
            this.content.addChild(item);
          }
        }
      },
      onCloseUI: function onCloseUI() {
        Global.audio.playEffect("audio/click");
        Global.gui.remove(gameConfig.UIID.LanguagesPanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  LayerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a2673yWP2dMPIDXNV+ZoY9d", "LayerManager");
    "use strict";
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LayerManager = exports.LayerType = void 0;
    var DelegateComponent_1 = require("./DelegateComponent");
    var LayerUI_1 = require("./LayerUI");
    var LayerNotify_1 = require("./LayerNotify");
    var LayerType;
    (function(LayerType) {
      LayerType["Game"] = "LayerGame";
      LayerType["GameUI"] = "GameUI";
      LayerType["BottomUI"] = "BottomUI";
      LayerType["MiddleUI"] = "MiddleUI";
      LayerType["UI"] = "LayerUI";
      LayerType["Notify"] = "LayerNotify";
      LayerType["Effect"] = "LayerEffect";
    })(LayerType = exports.LayerType || (exports.LayerType = {}));
    var LayerManager = function() {
      function LayerManager(root) {
        this.windowAspectRatio = 0;
        this.designAspectRatio = 0;
        this.mobileSafeArea = false;
        this.configs = {};
        this.root = root;
        this.game = new LayerUI_1.LayerUI(LayerType.Game);
        this.gameUI = new LayerUI_1.LayerUI(LayerType.GameUI);
        this.bottomUI = new LayerUI_1.LayerUI(LayerType.BottomUI);
        this.middleUI = new LayerUI_1.LayerUI(LayerType.MiddleUI);
        this.ui = new LayerUI_1.LayerUI(LayerType.UI);
        this.notify = new LayerNotify_1.LayerNotify(LayerType.Notify);
        this.effect = this.create_node(LayerType.Effect);
        root.addChild(this.game);
        root.addChild(this.gameUI);
        root.addChild(this.bottomUI);
        root.addChild(this.middleUI);
        root.addChild(this.ui);
        root.addChild(this.notify);
        root.addChild(this.effect);
      }
      LayerManager.prototype.initScreenAdapter = function() {
        var drs = cc.view.getDesignResolutionSize();
        var ws = cc.winSize;
        this.windowAspectRatio = ws.width / ws.height;
        this.designAspectRatio = drs.width / drs.height;
        var finalW = 0;
        var finalH = 0;
        if (this.windowAspectRatio > this.designAspectRatio) {
          finalH = drs.height;
          finalW = finalH * ws.width / ws.height;
          console.log("\u9002\u914d\u5c4f\u5e55\u9ad8\u5ea6", "\u3010\u6a2a\u5c4f\u3011");
        } else {
          finalW = drs.width;
          finalH = finalW * ws.height / ws.width;
          console.log("\u9002\u914d\u5c4f\u5e55\u5bbd\u5ea6", "\u3010\u7ad6\u5c4f\u3011");
        }
        cc.view.setDesignResolutionSize(finalW, finalH, cc.ResolutionPolicy.UNKNOWN);
        if (this.mobileSafeArea) {
          this.root.addComponent(cc.SafeArea);
          console.log("\u5f00\u542f\u79fb\u52a8\u8bbe\u5907\u5b89\u5168\u533a\u57df\u9002\u914d");
        }
      };
      LayerManager.prototype.init = function(configs) {
        this.configs = configs;
      };
      LayerManager.prototype.setOpenFailure = function(callback) {
        this.ui.onOpenFailure = callback;
      };
      LayerManager.prototype.toast = function(content, useI18n) {
        void 0 === useI18n && (useI18n = false);
        this.notify.toast(content, useI18n);
      };
      LayerManager.prototype.waitOpen = function() {
        this.notify.waitOpen();
      };
      LayerManager.prototype.waitClose = function() {
        this.notify.waitClose();
      };
      LayerManager.prototype.setConfig = function(uiId, config) {
        this.configs[uiId] = config;
      };
      LayerManager.prototype.open = function(uiId, uiArgs, callbacks) {
        void 0 === uiArgs && (uiArgs = null);
        var config = this.configs[uiId];
        if (null == config) {
          console.warn("\u6253\u5f00\u7f16\u53f7\u4e3a\u3010" + uiId + "\u3011\u7684\u754c\u9762\u5931\u8d25\uff0c\u914d\u7f6e\u4fe1\u606f\u4e0d\u5b58\u5728");
          return;
        }
        switch (config.layer) {
         case LayerType.Game:
          this.game.add(config, uiArgs, callbacks);
          break;

         case LayerType.UI:
          this.ui.add(config, uiArgs, callbacks);
          break;

         case LayerType.GameUI:
          this.gameUI.add(config, uiArgs, callbacks);
          break;

         case LayerType.BottomUI:
          this.bottomUI.add(config, uiArgs, callbacks);
          break;

         case LayerType.MiddleUI:
          this.middleUI.add(config, uiArgs, callbacks);
          break;

         case LayerType.Dialog:
          this.dialog.add(config, uiArgs, callbacks);
          break;

         case LayerType.System:
          this.system.add(config, uiArgs, callbacks);
        }
      };
      LayerManager.prototype.openAsync = function(uiId, uiArgs) {
        void 0 === uiArgs && (uiArgs = null);
        return __awaiter(this, void 0, Promise, function() {
          var _this = this;
          return __generator(this, function(_a) {
            return [ 2, new Promise(function(resolve, reject) {
              var callbacks = {
                onAdded: function(node, params) {
                  resolve(node);
                },
                onLoadFailure: function() {
                  resolve(null);
                }
              };
              _this.open(uiId, uiArgs, callbacks);
            }) ];
          });
        });
      };
      LayerManager.prototype.replace = function(removeUiId, openUiId, uiArgs) {
        void 0 === uiArgs && (uiArgs = null);
        this.open(openUiId, uiArgs);
        this.remove(removeUiId);
      };
      LayerManager.prototype.replaceAsync = function(removeUiId, openUiId, uiArgs) {
        var _this = this;
        void 0 === uiArgs && (uiArgs = null);
        return new Promise(function(resolve, reject) {
          return __awaiter(_this, void 0, void 0, function() {
            var node;
            return __generator(this, function(_a) {
              switch (_a.label) {
               case 0:
                return [ 4, this.openAsync(openUiId, uiArgs) ];

               case 1:
                node = _a.sent();
                if (node) {
                  this.remove(removeUiId);
                  resolve(node);
                } else resolve(null);
                return [ 2 ];
              }
            });
          });
        });
      };
      LayerManager.prototype.has = function(uiId) {
        var config = this.configs[uiId];
        if (null == config) {
          console.warn("\u7f16\u53f7\u4e3a\u3010" + uiId + "\u3011\u7684\u754c\u9762\u914d\u7f6e\u4e0d\u5b58\u5728\uff0c\u914d\u7f6e\u4fe1\u606f\u4e0d\u5b58\u5728");
          return false;
        }
        var result = false;
        switch (config.layer) {
         case LayerType.Game:
          result = this.game.has(config.prefab);
          break;

         case LayerType.UI:
          result = this.ui.has(config.prefab);
          break;

         case LayerType.GameUI:
          result = this.gameUI.has(config.prefab);
          break;

         case LayerType.BottomUI:
          result = this.bottomUI.has(config.prefab);
          break;

         case LayerType.MiddleUI:
          result = this.middleUI.has(config.prefab);
          break;

         case LayerType.Dialog:
          result = this.dialog.has(config.prefab);
          break;

         case LayerType.System:
          result = this.system.has(config.prefab);
        }
        return result;
      };
      LayerManager.prototype.get = function(uiId) {
        var config = this.configs[uiId];
        if (null == config) {
          console.warn("\u7f16\u53f7\u4e3a\u3010" + uiId + "\u3011\u7684\u754c\u9762\u914d\u7f6e\u4e0d\u5b58\u5728\uff0c\u914d\u7f6e\u4fe1\u606f\u4e0d\u5b58\u5728");
          return null;
        }
        var result = null;
        switch (config.layer) {
         case LayerType.Game:
          result = this.game.get(config.prefab);
          break;

         case LayerType.UI:
          result = this.ui.get(config.prefab);
          break;

         case LayerType.GameUI:
          result = this.gameUI.get(config.prefab);
          break;

         case LayerType.BottomUI:
          result = this.bottomUI.get(config.prefab);
          break;

         case LayerType.MiddleUI:
          result = this.middleUI.get(config.prefab);
          break;

         case LayerType.Dialog:
          result = this.dialog.get(config.prefab);
          break;

         case LayerType.System:
          result = this.system.get(config.prefab);
        }
        return result;
      };
      LayerManager.prototype.remove = function(uiId, isDestroy) {
        var config = this.configs[uiId];
        if (null == config) {
          console.warn("\u5220\u9664\u7f16\u53f7\u4e3a\u3010" + uiId + "\u3011\u7684\u754c\u9762\u5931\u8d25\uff0c\u914d\u7f6e\u4fe1\u606f\u4e0d\u5b58\u5728");
          return;
        }
        switch (config.layer) {
         case LayerType.Game:
          this.game.remove(config.prefab, isDestroy);
          break;

         case LayerType.UI:
          this.ui.remove(config.prefab, isDestroy);
          break;

         case LayerType.GameUI:
          this.gameUI.remove(config.prefab, isDestroy);
          break;

         case LayerType.BottomUI:
          this.bottomUI.remove(config.prefab, isDestroy);
          break;

         case LayerType.MiddleUI:
          this.middleUI.remove(config.prefab, isDestroy);
          break;

         case LayerType.Dialog:
          this.dialog.remove(config.prefab, isDestroy);
          break;

         case LayerType.System:
          this.system.remove(config.prefab, isDestroy);
        }
      };
      LayerManager.prototype.removeByNode = function(node, isDestroy) {
        if (node instanceof cc.Node) {
          var comp = node.getComponent(DelegateComponent_1.DelegateComponent);
          if (comp && comp.vp) {
            if (node.parent) node.parent.remove(comp.vp.config.prefab, isDestroy); else if (isDestroy) switch (comp.vp.config.layer) {
             case LayerType.Game:
              this.game.removeCache(comp.vp.config.prefab);
              break;

             case LayerType.UI:
              this.ui.removeCache(comp.vp.config.prefab);
              break;

             case LayerType.GameUI:
              this.gameUI.removeCache(comp.vp.config.prefab);
              break;

             case LayerType.BottomUI:
              this.bottomUI.removeCache(comp.vp.config.prefab);
              break;

             case LayerType.MiddleUI:
              this.middleUI.removeCache(comp.vp.config.prefab);
              break;

             case LayerType.Dialog:
              this.dialog.removeCache(comp.vp.config.prefab);
              break;

             case LayerType.System:
              this.system.removeCache(comp.vp.config.prefab);
            }
          } else {
            console.warn("\u5f53\u524d\u5220\u9664\u7684node\u4e0d\u662f\u901a\u8fc7\u754c\u9762\u7ba1\u7406\u5668\u6dfb\u52a0\u5230\u821e\u53f0\u4e0a");
            node.destroy();
          }
        }
      };
      LayerManager.prototype.clear = function(isDestroy) {
        void 0 === isDestroy && (isDestroy = false);
        this.ui.clear(isDestroy);
        this.gameUI.clear(isDestroy);
        this.bottomUI.clear(isDestroy);
        this.middleUI.clear(isDestroy);
        this.dialog.clear(isDestroy);
        this.system.clear(isDestroy);
      };
      LayerManager.prototype.create_node = function(name) {
        var node = new cc.Node(name);
        var w = node.addComponent(cc.Widget);
        w.isAlignLeft = w.isAlignRight = w.isAlignTop = w.isAlignBottom = true;
        w.left = w.right = w.top = w.bottom = 0;
        w.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
        w.enabled = true;
        return node;
      };
      return LayerManager;
    }();
    exports.LayerManager = LayerManager;
    cc._RF.pop();
  }, {
    "./DelegateComponent": "DelegateComponent",
    "./LayerNotify": "LayerNotify",
    "./LayerUI": "LayerUI"
  } ],
  LayerNotify: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f4659/fUwFGuri867tuRQeg", "LayerNotify");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LayerNotify = void 0;
    var Notify_1 = require("./Notify");
    var WAIT_PATH = "prefabs/common/wait";
    var NOTIFY_PATH = "prefabs/common/notify";
    var LayerNotify = function(_super) {
      __extends(LayerNotify, _super);
      function LayerNotify(name) {
        var _this = _super.call(this, name) || this;
        _this.wait = null;
        _this.notify = null;
        _this.notifyItem = null;
        var widget = _this.addComponent(cc.Widget);
        widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
        widget.left = widget.right = widget.top = widget.bottom = 0;
        widget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
        widget.enabled = true;
        _this.init();
        return _this;
      }
      LayerNotify.prototype.init = function() {
        this.black = this.addComponent(cc.BlockInputEvents);
        this.black.enabled = false;
      };
      LayerNotify.prototype.waitOpen = function() {
        if (null == this.wait) {
          var wait = cc.resources.get(WAIT_PATH, cc.Prefab);
          this.wait = cc.instantiate(wait);
        }
        if (null == this.wait.parent) {
          this.wait.parent = this;
          this.black.enabled = true;
        }
      };
      LayerNotify.prototype.waitClose = function() {
        if (this.wait && this.wait.parent) {
          this.wait.parent = null;
          this.black.enabled = false;
        }
      };
      LayerNotify.prototype.toast = function(content, useI18n) {
        try {
          if (null == this.notify) {
            var notify = cc.resources.get(NOTIFY_PATH, cc.Prefab);
            this.notify = cc.instantiate(notify);
            this.notifyItem = cc.find("item", this.notify);
            this.notifyItem.parent = null;
          }
          this.notify.parent = this;
          var item = cc.instantiate(this.notifyItem);
          var toastCom = item.getChildByName("prompt").getComponent(Notify_1.default);
          item.parent = this.notify;
          toastCom.onComplete = function() {
            0 == this.notify.children.length && (this.notify.parent = null);
          }.bind(this);
          toastCom.toast(content, useI18n);
          this.notify.children.length > 3 && this.notify.children[0].destroy();
        } catch (error) {
          console.error("toast error:", error);
        }
      };
      return LayerNotify;
    }(cc.Node);
    exports.LayerNotify = LayerNotify;
    cc._RF.pop();
  }, {
    "./Notify": "Notify"
  } ],
  LayerUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "862b7ziSI5J1r0p3In1cEpF", "LayerUI");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = this && this.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (1 & t[0]) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
      }, "function" === typeof Symbol && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([ n, v ]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = 2 & op[0] ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 
          0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          (y = 0, t) && (op = [ 2 & op[0], t.value ]);
          switch (op[0]) {
           case 0:
           case 1:
            t = op;
            break;

           case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

           case 5:
            _.label++;
            y = op[1];
            op = [ 0 ];
            continue;

           case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;

           default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (6 === op[0] || 2 === op[0])) {
              _ = 0;
              continue;
            }
            if (3 === op[0] && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (6 === op[0] && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            t[2] && _.ops.pop();
            _.trys.pop();
            continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [ 6, e ];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (5 & op[0]) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.LayerUI = void 0;
    var Defines_1 = require("./Defines");
    var DelegateComponent_1 = require("./DelegateComponent");
    var LayerUI = function(_super) {
      __extends(LayerUI, _super);
      function LayerUI(name) {
        var _this = _super.call(this, name) || this;
        _this.onOpenFailure = null;
        _this.ui_nodes = new Map();
        _this.ui_cache = new Map();
        var widget = _this.addComponent(cc.Widget);
        widget.isAlignLeft = widget.isAlignRight = widget.isAlignTop = widget.isAlignBottom = true;
        widget.left = widget.right = widget.top = widget.bottom = 0;
        widget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
        widget.enabled = true;
        return _this;
      }
      LayerUI.prototype.add = function(config, params, callbacks) {
        if (this.ui_nodes.has(config.prefab)) {
          console.warn("\u8def\u5f84\u4e3a\u3010" + config.prefab + "\u3011\u7684\u9884\u5236\u91cd\u590d\u52a0\u8f7d");
          return;
        }
        var vp = this.ui_cache.get(config.prefab);
        if (null == vp) {
          vp = new Defines_1.ViewParams();
          vp.config = config;
        }
        this.ui_nodes.set(config.prefab, vp);
        vp.params = null !== params && void 0 !== params ? params : {};
        vp.callbacks = null !== callbacks && void 0 !== callbacks ? callbacks : {};
        vp.valid = true;
        this.load(vp);
      };
      LayerUI.prototype.load = function(vp) {
        return __awaiter(this, void 0, void 0, function() {
          var timerId, res, ui, dc;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              timerId = setTimeout(this.onLoadingTimeoutGui, 500);
              if (!(vp && vp.node)) return [ 3, 2 ];
              return [ 4, this.showUi(vp) ];

             case 1:
              _a.sent();
              return [ 3, 6 ];

             case 2:
              return [ 4, Global.res.loadAsync(vp.config.prefab, cc.Prefab) ];

             case 3:
              res = _a.sent();
              if (!res) return [ 3, 5 ];
              ui = cc.instantiate(res);
              vp.node = ui;
              dc = ui.addComponent(DelegateComponent_1.DelegateComponent);
              dc.vp = vp;
              dc.onCloseWindow = this.onCloseWindow.bind(this);
              return [ 4, this.showUi(vp) ];

             case 4:
              _a.sent();
              return [ 3, 6 ];

             case 5:
              console.warn("\u8def\u5f84\u4e3a\u3010" + vp.config.prefab + "\u3011\u7684\u9884\u5236\u52a0\u8f7d\u5931\u8d25");
              this.failure(vp);
              _a.label = 6;

             case 6:
              Global.gui.waitClose();
              clearTimeout(timerId);
              return [ 2 ];
            }
          });
        });
      };
      LayerUI.prototype.onLoadingTimeoutGui = function() {
        Global.gui.waitOpen();
      };
      LayerUI.prototype.onCloseWindow = function(vp) {
        this.ui_nodes.delete(vp.config.prefab);
      };
      LayerUI.prototype.showUi = function(vp) {
        return __awaiter(this, void 0, Promise, function() {
          var comp, r;
          return __generator(this, function(_a) {
            switch (_a.label) {
             case 0:
              comp = vp.node.getComponent(DelegateComponent_1.DelegateComponent);
              return [ 4, comp.add() ];

             case 1:
              r = _a.sent();
              if (r) {
                vp.node.parent = this;
                vp.valid = true;
              } else {
                console.warn("\u8def\u5f84\u4e3a\u3010" + vp.config.prefab + "\u3011\u7684\u81ea\u5b9a\u4e49\u9884\u5904\u7406\u903b\u8f91\u5f02\u5e38.\u68c0\u67e5\u9884\u5236\u4e0a\u7ed1\u5b9a\u7684\u7ec4\u4ef6\u4e2d onAdded \u65b9\u6cd5,\u8fd4\u56detrue\u624d\u80fd\u6b63\u786e\u5b8c\u6210\u7a97\u53e3\u663e\u793a\u6d41\u7a0b");
                this.failure(vp);
              }
              return [ 2, r ];
            }
          });
        });
      };
      LayerUI.prototype.failure = function(vp) {
        this.onCloseWindow(vp);
        vp.callbacks && vp.callbacks.onLoadFailure && vp.callbacks.onLoadFailure();
        this.onOpenFailure && this.onOpenFailure();
      };
      LayerUI.prototype.remove = function(prefabPath, isDestroy) {
        var release = void 0;
        void 0 !== isDestroy && (release = isDestroy);
        var vp = this.ui_nodes.get(prefabPath);
        if (vp) {
          void 0 === release && (release = void 0 === vp.config.destroy || vp.config.destroy);
          false === release && this.ui_cache.set(vp.config.prefab, vp);
          try {
            var childNode = vp.node;
            var comp = childNode.getComponent(DelegateComponent_1.DelegateComponent);
            comp.remove(release);
          } catch (error) {
            console.error("prefabPath:" + prefabPath, " Error:", error);
          }
        }
        true === release && this.removeCache(prefabPath);
      };
      LayerUI.prototype.removeCache = function(prefabPath) {
        var vp = this.ui_cache.get(prefabPath);
        if (vp) {
          this.onCloseWindow(vp);
          this.ui_cache.delete(prefabPath);
          var childNode = vp.node;
          childNode.destroy();
        }
      };
      LayerUI.prototype.get = function(prefabPath) {
        var vp = this.ui_nodes.get(prefabPath);
        if (vp) return vp.node;
        return null;
      };
      LayerUI.prototype.has = function(prefabPath) {
        return this.ui_nodes.has(prefabPath);
      };
      LayerUI.prototype.clear = function(isDestroy) {
        var _this = this;
        this.ui_nodes.forEach(function(value, key) {
          _this.remove(value.config.prefab, isDestroy);
          value.valid = false;
        });
        this.ui_nodes.clear();
        isDestroy && this.ui_cache.forEach(function(value, prefabPath) {
          _this.removeCache(prefabPath);
        });
      };
      return LayerUI;
    }(cc.Node);
    exports.LayerUI = LayerUI;
    cc._RF.pop();
  }, {
    "./Defines": "Defines",
    "./DelegateComponent": "DelegateComponent"
  } ],
  LevelBaseData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f2365Q7icZNAJ9+o96cOWHw", "LevelBaseData");
    "use strict";
    var LevelBaseData = cc.Class({
      name: "LevelBaseData",
      statics: {
        data: [ {
          id: "0",
          isBoss: "0",
          roleId: "1001",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "1",
          isBoss: "0",
          roleId: "1002",
          isRogue: "1",
          process: "2",
          eventId: ""
        }, {
          id: "2",
          isBoss: "0",
          roleId: "1003",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "3",
          isBoss: "0",
          roleId: "1004",
          isRogue: "1",
          process: "1",
          eventId: ""
        }, {
          id: "4",
          isBoss: "0",
          roleId: "1005",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "5",
          isBoss: "0",
          roleId: "1006",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "6",
          isBoss: "0",
          roleId: "1007",
          isRogue: "1",
          process: "2",
          eventId: ""
        }, {
          id: "7",
          isBoss: "0",
          roleId: "1008",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "8",
          isBoss: "0",
          roleId: "1009",
          isRogue: "1",
          process: "1",
          eventId: ""
        }, {
          id: "9",
          isBoss: "1",
          roleId: "1010",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "10",
          isBoss: "0",
          roleId: "1011",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "11",
          isBoss: "0",
          roleId: "1012",
          isRogue: "1",
          process: "2",
          eventId: ""
        }, {
          id: "12",
          isBoss: "0",
          roleId: "1013",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "13",
          isBoss: "0",
          roleId: "1014",
          isRogue: "1",
          process: "1",
          eventId: ""
        }, {
          id: "14",
          isBoss: "0",
          roleId: "1015",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "15",
          isBoss: "0",
          roleId: "1016",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "16",
          isBoss: "0",
          roleId: "1017",
          isRogue: "1",
          process: "2",
          eventId: ""
        }, {
          id: "17",
          isBoss: "0",
          roleId: "1018",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "18",
          isBoss: "0",
          roleId: "1019",
          isRogue: "1",
          process: "1",
          eventId: ""
        }, {
          id: "19",
          isBoss: "1",
          roleId: "1020",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "20",
          isBoss: "0",
          roleId: "1021",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "21",
          isBoss: "0",
          roleId: "1022",
          isRogue: "1",
          process: "2",
          eventId: ""
        }, {
          id: "22",
          isBoss: "0",
          roleId: "1023",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "23",
          isBoss: "0",
          roleId: "1024",
          isRogue: "1",
          process: "1",
          eventId: ""
        }, {
          id: "24",
          isBoss: "0",
          roleId: "1025",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "25",
          isBoss: "0",
          roleId: "1026",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "26",
          isBoss: "0",
          roleId: "1027",
          isRogue: "1",
          process: "2",
          eventId: ""
        }, {
          id: "27",
          isBoss: "0",
          roleId: "1028",
          isRogue: "1",
          process: "0",
          eventId: ""
        }, {
          id: "28",
          isBoss: "0",
          roleId: "1029",
          isRogue: "1",
          process: "1",
          eventId: ""
        }, {
          id: "29",
          isBoss: "1",
          roleId: "1030",
          isRogue: "0",
          process: "0",
          eventId: ""
        } ]
      }
    });
    module.exports = LevelBaseData;
    cc._RF.pop();
  }, {} ],
  LevelManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc966ht9xFAXqXXKwd/U6ai", "LevelManager");
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var LevelBaseData = require("LevelBaseData");
    var LevelModel = function() {
      function LevelModel(data) {
        this.id = data.id;
        this.isBoss = data.isBoss;
        this.roleId = data.roleId;
        this.isRogue = data.isRogue;
        this.process = data.process;
        this.eventId = data.eventId;
      }
      _createClass(LevelModel, [ {
        key: "id",
        get: function get() {
          return this._id;
        },
        set: function set(value) {
          this._id = value;
        }
      }, {
        key: "isBoss",
        get: function get() {
          return "1" == this._isBoss;
        },
        set: function set(value) {
          this._isBoss = value;
        }
      }, {
        key: "roleId",
        get: function get() {
          return this._roleId;
        },
        set: function set(value) {
          this._roleId = value;
        }
      }, {
        key: "isRogue",
        get: function get() {
          return "1" == this._isRogue;
        },
        set: function set(value) {
          this._isRogue = value;
        }
      }, {
        key: "process",
        get: function get() {
          return this._process;
        },
        set: function set(value) {
          this._process = value;
        }
      }, {
        key: "eventId",
        get: function get() {
          return this._eventId;
        },
        set: function set(value) {
          this._eventId = value;
        }
      } ]);
      return LevelModel;
    }();
    var LevelManager = function LevelManager() {
      this.resetData();
    }, LevelMG = LevelManager.prototype, g_instance = null;
    LevelMG.resetData = function() {
      this.curLevel = 0;
      this.levelData = [];
      this.initData();
    };
    LevelMG.initData = function() {
      for (var index = 0; index < LevelBaseData.data.length; index++) {
        var data = LevelBaseData.data[index];
        this.levelData.push(new LevelModel(data));
      }
    };
    LevelMG.getCurrentLevel = function() {
      return this.curLevel;
    };
    LevelMG.getLevelDataByLevel = function(lvl) {
      return this.levelData[lvl];
    };
    module.exports = function() {
      g_instance || (g_instance = new LevelManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    LevelBaseData: "LevelBaseData"
  } ],
  LevelProgressBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2fca2yhtRNJIKkbillxKZEo", "LevelProgressBar");
    "use strict";
    var gameConfig = require("GameConfig");
    var PROGRESS_LIST = [ .195, .385, .58, .77, .961 ];
    var LEVEL_NUMBER = 5;
    var EVENT_TYPE = {
      ROGUE: "0",
      MARKET: "1",
      PHONE: "2",
      NULL: "3"
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        progressBar: {
          type: cc.ProgressBar,
          default: null
        },
        lvlLab: {
          type: cc.Label,
          default: null
        },
        iconList: {
          type: [ cc.Sprite ],
          default: []
        },
        iconSF: {
          type: [ cc.SpriteFrame ],
          default: []
        },
        _timer: null,
        _lastIntNumber: -1
      },
      onLoad: function onLoad() {
        this.progressBar.progress = 0;
      },
      onEnable: function onEnable() {
        cc.director.GlobalEvent.on(gameConfig.GAME_EVENT.ScrollBackground, this.ScrollBackground, this);
      },
      ScrollBackground: function ScrollBackground(arg) {
        var _this = this;
        var reNumber = Global.levelManager.curLevel % LEVEL_NUMBER;
        var nextStep = PROGRESS_LIST[reNumber];
        var curProgress = this.progressBar.progress;
        var offProgress = nextStep - curProgress;
        var levelData = Global.levelManager.getLevelDataByLevel(Global.levelManager.curLevel);
        var walkingTime = 10 * (levelData.isBoss ? gameConfig.WALKING_TIME.BOSS : gameConfig.WALKING_TIME.MONSTER);
        var perProgress = Math.abs(offProgress) / walkingTime;
        arg.scrollFlag && arg.hasOwnProperty("targetLevel") && 0 != offProgress ? this._timer = setInterval(function() {
          walkingTime--;
          if (walkingTime <= 0) {
            clearInterval(_this._timer);
            _this._timer = null;
          }
          _this.progressBar.progress += offProgress > 0 ? perProgress : -perProgress;
        }, 100) : this._timer && clearInterval(this._timer);
      },
      updateUI: function updateUI(args) {
        var curLevel = Global.levelManager.curLevel;
        this.lvlLab.string = "level " + (curLevel + 1) + "/" + Global.levelManager.levelData.length;
        var intNumber = Math.floor(curLevel / LEVEL_NUMBER);
        var reNumber = curLevel % LEVEL_NUMBER;
        args.checkProgress && 0 == reNumber && (this.progressBar.progress = 0);
        this.updateIcons(intNumber);
        this.updateVisibal(reNumber);
      },
      updateIcons: function updateIcons(intNumber) {
        if (intNumber == this._lastIntNumber) return;
        this._lastIntNumber = intNumber;
        for (var index = 0; index < LEVEL_NUMBER; index++) {
          var tempLevel = intNumber * LEVEL_NUMBER + index;
          var levelData = Global.levelManager.getLevelDataByLevel(tempLevel);
          var result = this.getIconIndex(levelData);
          this.iconList[index].spriteFrame = null == result ? "" : this.iconSF[result];
        }
      },
      updateVisibal: function updateVisibal(reNumber) {
        for (var index = 0; index < LEVEL_NUMBER; index++) this.iconList[index].node.active = index >= reNumber;
      },
      getIconIndex: function getIconIndex(_levelData) {
        var index = null;
        _levelData && ("1" == _levelData.isBoss ? index = 3 : _levelData.process == EVENT_TYPE.PHONE ? index = 2 : _levelData.process == EVENT_TYPE.MARKET ? index = 1 : "1" == _levelData.isRogue && (index = 0));
        return index;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  LoadingView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "44f00YBDdFLZ4eGM5yNxNKA", "LoadingView");
    "use strict";
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        splashScreen: cc.Node,
        splashWord: cc.Node,
        loadingScreen: cc.Node,
        loadingBar: cc.ProgressBar,
        loadingLabel: cc.Label
      },
      onLoad: function onLoad() {},
      start: function start() {
        var _this = this;
        this.splashScreen.active = true;
        this.splashWord.opacity = 0;
        this.loadingScreen.active = false;
        this.loadingBar.progress = 0;
        cc.tween(this.splashWord).to(1, {
          opacity: 255
        }).delay(2).to(1, {
          opacity: 0
        }).call(function() {
          _this.loadingScreen.active = true;
          _this.startLoading();
        }).start();
        this.loadingLabel.string = "loading";
      },
      startLoading: function startLoading() {
        Global.preloadManager.startLoad(this);
      },
      loadResComplete: function loadResComplete() {
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
             case 0:
              Global.utils.logMessage("loadResComplete");
              _context.next = 3;
              return Global.gui.openAsync(gameConfig.UIID.ScrollBackgroundPanel);

             case 3:
              _context.next = 5;
              return Global.gui.openAsync(gameConfig.UIID.HomePagePanel);

             case 5:
              Global.gui.remove(gameConfig.UIID.LoadingPanel);
              Global.res.release(gameConfig.UIConfigData[gameConfig.UIID.LoadingPanel].prefab);

             case 7:
             case "end":
              return _context.stop();
            }
          }, _callee);
        }))();
      },
      updateHelpInf: function updateHelpInf(_content) {
        this.loadingLabel.string = _content;
        Global.utils.logMessage("Start Load: " + _content);
      },
      updateProgress: function updateProgress(_loadedCount, _maxCount) {
        var rate = _loadedCount / _maxCount;
        this.loadingBar.progress = rate;
      },
      update: function update(dt) {}
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  MailInfo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "00a7dfTvyJEn5xw0kNikUia", "MailInfo");
    "use strict";
    var gameConfig = require("GameConfig");
    var ItemData = require("ItemData");
    var EquipmentData = require("EquipmentData");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: cc.Node,
        titleLabel: cc.Node,
        descLabel: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        container: cc.Node,
        rewardNode: cc.Node,
        claimBtn: cc.Button
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        this.config = _args.config;
        this.content.y = 1e3;
        this.content.opacity = 255;
        cc.tween(this.node).to(.2, {
          opacity: 255
        }).start();
        cc.tween(this.content).to(.5, {
          position: cc.v2(0, 0)
        }, {
          easing: "elasticOut"
        }).start();
        this.updateUI();
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.container.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.container.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData) {
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.setScale(.8);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData);
        this.container.addChild(equipmentItem);
        return equipmentItem;
      },
      generateBagItem: function generateBagItem(_itemData) {
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.setScale(.8);
        bagItem.getComponent("BagItem").setData(_itemData);
        this.container.addChild(bagItem);
        return bagItem;
      },
      updateUI: function updateUI() {
        this.titleLabel.getComponent("LabelUpdater").setString(this.config["title_" + Global.languageManager.currentLang]);
        this.descLabel.getComponent("LabelUpdater").setString(this.config["content_" + Global.languageManager.currentLang]);
        this.clearItems();
        this.container.active = null != this.config.rewards;
        this.rewardNode.active = null != this.config.rewards;
        if (null != this.config.rewards) for (var i = 0; i < this.config.rewards.length; i++) {
          var reward = this.config.rewards[i];
          if ("item" == reward.type) {
            var itemConfig = Global.bagManager.getItemConfig(reward.id);
            var itemData = new ItemData();
            itemData.setData(null, itemConfig);
            itemData.count = reward.count;
            this.generateBagItem(itemData);
          } else {
            var equipmentConfig = Global.equipmentManager.getEquipmentConfig(reward.id);
            var equipmentData = new EquipmentData();
            equipmentData.setData(null, equipmentConfig);
            this.generateEquipmentItem(equipmentData);
          }
        }
        this.claimBtn.interactable = true != Global.mailManager.mailData[this.config.id].claimed;
      },
      convertItems: function convertItems(_items) {
        var result = [];
        for (var i = 0; i < _items.length; i++) {
          var item = _items[i];
          if ("item" == item.type) {
            var itemConfig = Global.bagManager.getItemConfig(item.id);
            var itemData = new ItemData();
            itemData.setData(null, itemConfig);
            itemData.count = item.count;
            result.push(itemData);
          } else {
            var equipmentConfig = Global.equipmentManager.getEquipmentConfig(item.id);
            var equipmentData = new EquipmentData();
            equipmentData.setData(null, equipmentConfig);
            result.push(equipmentData);
          }
        }
        return result;
      },
      onClickClaim: function onClickClaim() {
        var items = Global.mailManager.claimMail(this.config);
        var args = {};
        args.items = this.convertItems(items);
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        this.updateUI();
        var mailNode = Global.gui.get(gameConfig.UIID.MailPanel);
        mailNode && mailNode.getComponent("MailPanel").updateUI();
        this.onClickClose();
      },
      onClickClose: function onClickClose() {
        cc.tween(this.node).stop();
        cc.tween(this.node).to(.2, {
          opacity: 0
        }).call(function() {
          Global.gui.remove(gameConfig.UIID.MailInfo);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  MailItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "54364bwe4VPhrJG2TGUvWtw", "MailItem");
    "use strict";
    var ItemData = require("ItemData");
    var EquipmentData = require("EquipmentData");
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLabel: cc.Node,
        timeLabel: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        container: cc.Node,
        readedIcon: cc.Node,
        claimedNode: cc.Node,
        claimedLabelNode: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd.bind(this), this);
      },
      onTouchEnd: function onTouchEnd() {
        var args = {};
        args.config = this.config;
        Global.gui.open(gameConfig.UIID.MailInfo, args);
        Global.mailManager.readMail(this.config.id);
        this.updateUI(this.config);
        var mailNode = Global.gui.get(gameConfig.UIID.MailPanel);
        mailNode && mailNode.getComponent("MailPanel").updateUI();
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.container.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.container.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData) {
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.setScale(.45);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData);
        this.container.addChild(equipmentItem);
        return equipmentItem;
      },
      generateBagItem: function generateBagItem(_itemData) {
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.setScale(.45);
        bagItem.getComponent("BagItem").setData(_itemData, null, EnumType.ITEM_OWNER_TYPE.TASK_REWARD, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_1);
        this.container.addChild(bagItem);
        return bagItem;
      },
      updateUI: function updateUI(_config) {
        this.readedIcon.active = true != Global.mailManager.mailData[_config.id].readed;
        if (null == _config.rewards) {
          this.claimedNode.active = true == Global.mailManager.mailData[_config.id].readed;
          this.claimedLabelNode.active = false;
        } else {
          this.claimedNode.active = true == Global.mailManager.mailData[_config.id].claimed;
          this.claimedLabelNode.active = true;
        }
      },
      setContent: function setContent(_config) {
        this.config = _config;
        this.titleLabel.getComponent("LabelUpdater").setString(_config["title_" + Global.languageManager.currentLang]);
        this.timeLabel.getComponent("LabelUpdater").setString(Global.mailManager.formatTimePassed("" != _config.time ? _config.time : Global.mailManager.mailData[_config.id].time));
        this.updateUI(_config);
        this.clearItems();
        this.container.active = null != this.config.rewards;
        if (null != this.config.rewards) for (var i = 0; i < this.config.rewards.length; i++) {
          var reward = this.config.rewards[i];
          if ("item" == reward.type) {
            var itemConfig = Global.bagManager.getItemConfig(reward.id);
            var itemData = new ItemData();
            itemData.setData(null, itemConfig);
            itemData.count = reward.count;
            this.generateBagItem(itemData);
          } else {
            var equipmentConfig = Global.equipmentManager.getEquipmentConfig(reward.id);
            var equipmentData = new EquipmentData();
            equipmentData.setData(null, equipmentConfig);
            this.generateEquipmentItem(equipmentData);
          }
        }
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  MailManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "7fb1dDTnEtOYqEbPoBq8XyK", "MailManager");
    "use strict";
    var gameConfig = require("GameConfig");
    var MailManager = cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      ctor: function ctor() {
        this.mailConfig = [];
        this.isInit = false;
      },
      init: function init() {
        var _this = this;
        if (true == this.isInit) return;
        Global.res.load("mail_config", cc.JsonAsset, function(err, data) {
          if (err) {
            console.error("\u90ae\u4ef6\u914d\u7f6e\u52a0\u8f7d\u5931\u8d25\uff1a", err);
            reject(err);
            return;
          }
          _this.isInit = true;
          _this.handleData(data.json);
        });
      },
      formatDateFromTimestamp: function formatDateFromTimestamp(timestamp) {
        var date = new Date(timestamp);
        var year = date.getFullYear();
        var month = String(date.getMonth() + 1).padStart(2, "0");
        var day = String(date.getDate()).padStart(2, "0");
        var hours = String(date.getHours()).padStart(2, "0");
        var minutes = String(date.getMinutes()).padStart(2, "0");
        var seconds = String(date.getSeconds()).padStart(2, "0");
        return year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;
      },
      handleData: function handleData(_json) {
        this.mailConfig = {};
        this.mailData = Global.storage.getJson(gameConfig.COMMON_KEYS.MAIL_DATA);
        null == this.mailData && (this.mailData = {});
        for (var i = 0; i < _json.length; i++) {
          var config = _json[i];
          var mailTime = void 0;
          if ("" == config.time) if (this.mailData.hasOwnProperty(config.id)) mailTime = this.mailData[config.id].time; else {
            this.mailData[config.id] = {};
            var formatted = this.formatDateFromTimestamp(Global.networkTimer);
            this.mailData[config.id].time = formatted;
            mailTime = formatted;
          } else mailTime = config.time;
          var timeStr = this.formatTimePassed(mailTime);
          if (null == timeStr) continue;
          if (this.mailData[config.id] && true == this.mailData[config.id].deleted) continue;
          if ("" != config.rewards) {
            var rewardsArr = config.rewards.split(",");
            config.rewards = [];
            for (var j = 0; j < rewardsArr.length; j++) {
              var rewardStr = rewardsArr[j];
              var rewardArr = rewardStr.split("|");
              var reward = {};
              reward.type = rewardArr[0];
              reward.id = parseInt(rewardArr[1]);
              reward.count = parseInt(rewardArr[2]);
              config.rewards.push(reward);
            }
          } else config.rewards = null;
          this.mailConfig[config.id] = config;
          null == this.mailData[config.id] && (this.mailData[config.id] = {});
        }
        this.saveData();
      },
      saveData: function saveData() {
        Global.storage.set(gameConfig.COMMON_KEYS.MAIL_DATA, this.mailData);
      },
      readMail: function readMail(_id) {
        this.mailData[_id].readed = true;
        this.saveData();
      },
      deleteAll: function deleteAll() {
        for (var id in this.mailConfig) {
          var config = this.mailConfig[id];
          if (!(true == this.mailData[id].claimed && true == this.mailData[id].readed || null == config.rewards && true == this.mailData[id].readed)) continue;
          this.mailData[id].deleted = true;
          delete this.mailConfig[id];
        }
        this.saveData();
      },
      claimMail: function claimMail(_config) {
        if (true == this.mailData[_config.id].claimed) return null;
        this.mailData[_config.id].claimed = true;
        this.mailData[_config.id].readed = true;
        if (null == _config.rewards) return null;
        var rewards = _config.rewards;
        for (var i = 0; i < rewards.length; i++) {
          var rewardItem = rewards[i];
          if ("item" == rewardItem.type) switch (rewardItem.id) {
           case Global.bagManager.COIN_ITEM_ID:
            Global.roleData.updateCoin(rewardItem.count);
            break;

           case Global.bagManager.DIAMOND_ITEM_ID:
            Global.roleData.updateDiamond(rewardItem.count);
            break;

           case Global.bagManager.STAMINA_ITEM_ID:
            Global.roleData.updateStamina(rewardItem.count);
            break;

           default:
            Global.bagManager.addItem(rewardItem.id, rewardItem.count, Global.roleData);
          } else Global.equipmentManager.addEquipment(rewardItem.id, Global.roleData);
        }
        this.saveData();
        return _config.rewards;
      },
      claimAll: function claimAll() {
        var result = [];
        for (var id in this.mailConfig) {
          var config = this.mailConfig[id];
          if (true == this.mailData[id].claimed) continue;
          null != config.rewards && (result = result.concat(this.claimMail(config)));
        }
        return result;
      },
      formatTimePassed: function formatTimePassed(targetTimeStr) {
        var targetTime = new Date(targetTimeStr);
        if (isNaN(targetTime.getTime())) {
          console.warn("\u65e0\u6548\u7684\u90ae\u4ef6\u65f6\u95f4\u683c\u5f0f");
          return null;
        }
        var now = Global.networkTimer;
        var diffMs = now - targetTime;
        var diffDays = Math.floor(diffMs / 864e5);
        var diffHours = Math.floor(diffMs % 864e5 / 36e5);
        return diffMs < 36e5 ? Global.languageManager.t("mail_time_type_1") : diffDays < 1 ? Global.languageManager.t("mail_time_type_2", [ diffHours ]) : diffDays <= 45 ? Global.languageManager.t("mail_time_type_3", [ diffDays, diffHours ]) : null;
      }
    });
    module.exports = MailManager;
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  MailPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5e9d4WhSOZEB6qEymMZwBrd", "MailPanel");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    var ItemData = require("ItemData");
    var EquipmentData = require("EquipmentData");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: cc.Node,
        mailItemPrefab: cc.Prefab,
        mailItemPool: [ cc.Node ],
        mailItemList: [ cc.Node ],
        container: cc.Node
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        this.content.y = 1e3;
        this.content.opacity = 255;
        cc.tween(this.node).to(.2, {
          opacity: 255
        }).start();
        cc.tween(this.content).to(.5, {
          position: cc.v2(0, 0)
        }, {
          easing: "elasticOut"
        }).start();
        this.updateUI();
      },
      clearItems: function clearItems() {
        while (this.mailItemList.length > 0) {
          var item = this.mailItemList.pop();
          this.container.removeChild(item, false);
          this.mailItemPool.push(item);
        }
      },
      generateMailItem: function generateMailItem(_config) {
        var mailItem;
        mailItem = this.mailItemPool.length > 0 ? this.mailItemPool.pop() : cc.instantiate(this.mailItemPrefab);
        this.mailItemList.push(mailItem);
        mailItem.getComponent("MailItem").setContent(_config);
        this.container.addChild(mailItem);
        return mailItem;
      },
      onClickDeleteAll: function onClickDeleteAll() {
        Global.mailManager.deleteAll();
        this.updateUI();
      },
      convertItems: function convertItems(_items) {
        var result = [];
        for (var i = 0; i < _items.length; i++) {
          var item = _items[i];
          if ("item" == item.type) {
            var itemConfig = Global.bagManager.getItemConfig(item.id);
            var itemData = new ItemData();
            itemData.setData(null, itemConfig);
            itemData.count = item.count;
            result.push(itemData);
          } else {
            var equipmentConfig = Global.equipmentManager.getEquipmentConfig(item.id);
            var equipmentData = new EquipmentData();
            equipmentData.setData(null, equipmentConfig);
            result.push(equipmentData);
          }
        }
        return result;
      },
      onClickClaimAll: function onClickClaimAll() {
        var items = Global.mailManager.claimAll();
        var args = {};
        args.items = this.convertItems(items);
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        this.updateUI();
      },
      updateUI: function updateUI() {
        var _this = this;
        this.clearItems();
        var sortedKeys = Object.keys(Global.mailManager.mailConfig).sort(function(idA, idB) {
          var mailA = Global.mailManager.mailData[idA];
          var mailB = Global.mailManager.mailData[idB];
          var configA = Global.mailManager.mailConfig[idA];
          var configB = Global.mailManager.mailConfig[idB];
          if (mailA.readed !== mailB.readed) return mailA.readed ? 1 : -1;
          if (mailA.claimed !== mailB.claimed) return true != mailA.claimed ? -1 : 1;
          if (configA.rewards !== configB.rewards) return null != configA.rewards ? -1 : 1;
        });
        sortedKeys.forEach(function(id) {
          var config = Global.mailManager.mailConfig[id];
          null != config && _this.generateMailItem(config);
        });
      },
      onClickClose: function onClickClose() {
        cc.tween(this.node).stop();
        cc.tween(this.node).to(.2, {
          opacity: 0
        }).call(function() {
          Global.gui.remove(gameConfig.UIID.MailPanel);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  MainScene: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95d507RXRxBobyYU4kfL5Co", "MainScene");
    "use strict";
    var _AudioManager = require("../manager/audio/AudioManager");
    var _LayerManager = require("../gui/gui/LayerManager");
    var _AsyncQueue = require("../utils/AsyncQueue");
    var _TimerManager = _interopRequireDefault(require("../manager/timer/TimerManager"));
    var _StorageManager = require("../manager/storage/StorageManager");
    var _StorageSecuritySimple = require("../manager/storage/StorageSecuritySimple");
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var gameConfig = require("GameConfig");
    var Config = require("Config");
    var EnumType = require("EnumType");
    var BattleConfig = require("BattleConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        gui: {
          type: cc.Node,
          default: null
        }
      },
      onLoad: function onLoad() {
        this.timer = Date.now();
        Global.utils.getNetworkTimer().then(function(_time) {
          Global.networkTimer = _time;
          Global.offsetTimer = Date.now();
          this.loadConfig().then();
        }.bind(this));
      },
      loadConfig: function loadConfig() {
        var _this = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
          var configPath, config, persistRootNode, equipmentData, bagItemData, talentData, additionalData, newDayTimer, isNewDay, storageData, isNewWeek, i, equipment, _equipmentData, _i, bagItem;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
             case 0:
              configPath = "config";
              _context.next = 3;
              return Global.res.loadAsync(configPath, cc.JsonAsset);

             case 3:
              config = _context.sent;
              if (!config) {
                _context.next = 46;
                break;
              }
              persistRootNode = new cc.Node("PersistRootNode");
              cc.game.addPersistRootNode(persistRootNode);
              Global.config = new Config(config);
              Global.storage = new _StorageManager.StorageManager();
              Global.storage.init(new _StorageSecuritySimple.StorageSecuritySimple());
              Global.passiveHarvestManager.init();
              Global.shopManager.init();
              Global.taskManager.init();
              Global.vipManager.init();
              equipmentData = Global.storage.getJson(gameConfig.COMMON_KEYS.EQUIPMENT_DATA);
              bagItemData = Global.storage.getJson(gameConfig.COMMON_KEYS.BAG_ITEM_DATA);
              talentData = Global.storage.getJson(gameConfig.COMMON_KEYS.TALENT_DATA);
              additionalData = Global.storage.getJson(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA);
              Global.roleData = Global.roleManager.generateRoleData(gameConfig.GAME_CONST.selfId);
              Global.roleData.updateAdditionalData(additionalData || {});
              newDayTimer = Global.storage.getJson(gameConfig.COMMON_KEYS.NEW_DAY_TIMER);
              if (null != newDayTimer) {
                isNewDay = Global.utils.isNewDay(newDayTimer);
                if (isNewDay) {
                  Global.roleData.staminaRemainCount_ad = 4;
                  Global.roleData.staminaRemainCount_diamond = 4;
                  storageData = Global.roleData.getAdditionalData();
                  Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
                  newDayTimer = Global.networkTimer;
                  Global.storage.set(gameConfig.COMMON_KEYS.NEW_DAY_TIMER, newDayTimer);
                  Global.passiveHarvestManager.adCount = 4;
                  storageData = Global.passiveHarvestManager.getPassiveHarvestingStorageData();
                  Global.storage.set(gameConfig.COMMON_KEYS.PASSIVE_HARVESTING_DATA, storageData);
                  Global.storage.set(gameConfig.COMMON_KEYS.SHOP_COIN_AD_COUNT, 0);
                  Global.shopManager.storageData.purpleBox.adCount = 0;
                  Global.shopManager.storageData.blueBox.adCount = 0;
                  Global.shopManager.storageData.blueBox.freeCount = 0;
                  Global.shopManager.saveData();
                  Global.taskManager.resetDailyReward();
                  Global.vipManager.resetDailyRewards();
                }
              } else {
                newDayTimer = Global.networkTimer;
                Global.storage.set(gameConfig.COMMON_KEYS.NEW_DAY_TIMER, newDayTimer);
              }
              isNewWeek = Global.utils.isNewWeek();
              isNewWeek && Global.taskManager.resetWeeklyReward();
              if (!(null != equipmentData)) {
                _context.next = 34;
                break;
              }
              i = 0;

             case 26:
              if (!(i < equipmentData.length)) {
                _context.next = 34;
                break;
              }
              equipment = equipmentData[i];
              if (!(!equipment || Object.keys(equipment).length <= 0)) {
                _context.next = 30;
                break;
              }
              return _context.abrupt("continue", 31);

             case 30:
              if (equipment.equipmentSlotPos == EnumType.EQUIPMENT_SLOT_POS.NONE) Global.equipmentManager.addEquipment(equipment.equipmentId, Global.roleData, equipment.equipmentRarity, equipment.equipmentLevel, false, true); else {
                _equipmentData = Global.equipmentManager.addEquipment(equipment.equipmentId, Global.roleData, equipment.equipmentRarity, equipment.equipmentLevel, true, true);
                Global.equipmentManager.setEquipment(_equipmentData, null, equipment.equipmentSlotPos, Global.roleData, true);
              }

             case 31:
              i++;
              _context.next = 26;
              break;

             case 34:
              if (null != bagItemData) for (_i = 0; _i < bagItemData.length; _i++) {
                bagItem = bagItemData[_i];
                Global.bagManager.addItem(bagItem.bagItemId, bagItem.bagItemCount, Global.roleData, true);
              }
              if (null != talentData) {
                Global.roleData.talentIndexList = talentData;
                Global.roleData.talentLevel = Global.roleData.talentIndexList.length;
                Global.talentManager.updateTalent(Global.roleData);
              }
              setTimeout(function() {
                Global.passiveHarvestManager.start();
              }, 3e3);
              Global.audio = persistRootNode.addComponent(_AudioManager.AudioManager);
              Global.audio.load();
              Global.gui = new _LayerManager.LayerManager(_this.gui);
              Global.timer = persistRootNode.addComponent(_TimerManager["default"]);
              Global.timer.setServerTime(Date.now());
              Global.signinManager = require("SigninManager")();
              Global.poolManager.loadPrefabs();
              _this.init();
              Global.res.release(configPath, cc.JsonAsset);

             case 46:
             case "end":
              return _context.stop();
            }
          }, _callee);
        }))();
      },
      init: function init() {
        this.initGui();
        cc.game.on(cc.game.EVENT_SHOW, this.onShow, this);
        cc.game.on(cc.game.EVENT_HIDE, this.onHide, this);
        cc.view.setResizeCallback(function() {});
      },
      initGui: function initGui() {
        var _this2 = this;
        return _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
          var quene;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
             case 0:
              Global.gui.init(gameConfig.UIConfigData);
              quene = new _AsyncQueue.AsyncQueue();
              _this2.loadLanguage(quene);
              _this2.loadCommon(quene);
              _this2.onComplete(quene);
              quene.play();

             case 6:
             case "end":
              return _context2.stop();
            }
          }, _callee2);
        }))();
      },
      loadLanguage: function loadLanguage(quene) {
        quene.push(function(next, params, args) {
          var currentLanguage = Global.storage.get(gameConfig.COMMON_KEYS.LANGUAGE, Global.config.languageDefault);
          Global.languageManager.init(currentLanguage);
          next();
        });
      },
      loadCommon: function loadCommon(quene) {
        quene.push(function(next, params, args) {
          Global.res.loadDir("prefabs/common/", next);
        });
      },
      onComplete: function onComplete(quene) {
        quene.complete = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
             case 0:
              Global.gui.open(gameConfig.UIID.LoadingPanel);

             case 1:
             case "end":
              return _context3.stop();
            }
          }, _callee3);
        }));
      },
      onShow: function onShow() {
        Global.utils.logMessage("onShow");
        cc.director.resume();
        cc.game.resume();
      },
      onHide: function onHide() {
        Global.utils.logMessage("onHide");
        cc.director.pause();
        cc.game.pause();
      },
      update: function update() {
        Global.passiveHarvestManager.update();
        Global.taskManager.update();
        if (Date.now() - this.timer >= BattleConfig.HEART_BEAT_ONE_SECOND) {
          Global.networkTimer += Date.now() - Global.offsetTimer;
          Global.offsetTimer = Date.now();
        }
      }
    });
    cc._RF.pop();
  }, {
    "../gui/gui/LayerManager": "LayerManager",
    "../manager/audio/AudioManager": "AudioManager",
    "../manager/storage/StorageManager": "StorageManager",
    "../manager/storage/StorageSecuritySimple": "StorageSecuritySimple",
    "../manager/timer/TimerManager": "TimerManager",
    "../utils/AsyncQueue": "AsyncQueue",
    BattleConfig: "BattleConfig",
    Config: "Config",
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    SigninManager: "SigninManager"
  } ],
  MarketItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c845chvWQpMSb96OQDd2eo7", "MarketItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        animation: {
          type: cc.Animation,
          default: null
        },
        bg: {
          type: cc.Sprite,
          default: null
        },
        bulletRootNode: {
          type: cc.Node,
          default: null
        },
        maskNode: {
          type: cc.Node,
          default: null
        },
        nameRT: {
          type: cc.Node,
          default: null
        },
        descRTNode: {
          type: cc.Node,
          default: null
        },
        descRT: {
          type: cc.RichText,
          default: null
        },
        ownedLab: {
          type: cc.Label,
          default: null
        },
        refreshBtn: {
          type: cc.Node,
          default: null
        },
        priceLab: {
          type: cc.Label,
          default: null
        },
        oldPriceLab: {
          type: cc.Label,
          default: null
        },
        buyNode: {
          type: cc.Node,
          default: null
        },
        purchasedNode: {
          type: cc.Node,
          default: null
        },
        _isPurchased: false,
        _roleData: null,
        _magicData: null,
        _index: 0
      },
      onLoad: function onLoad() {
        this.show(.1 * this._index);
      },
      onEnable: function onEnable() {
        this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onEnter, this);
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onLeave, this);
      },
      initUI: function initUI(roleData, magicData, index, replenishTimes) {
        void 0 === replenishTimes && (replenishTimes = 0);
        this._roleData = roleData;
        this._magicData = magicData;
        this._index = index;
        this.nameRT.getComponent("RichTextUpdater").setContent("skill_" + magicData.id + "_name");
        var valueListStr = Global.languageManager.i18nData["skill_" + magicData.id + "_desc"].valueList;
        var valueList = null;
        var result = [];
        if ("" != valueListStr) {
          valueList = valueListStr.split(",");
          for (var i = 0; i < valueList.length; i++) {
            var item = valueList[i];
            item = item.split("|");
            var value = Math.floor(roleData.getStaticData()[item[1]] * Number(item[0]) * .01);
            result.push(value);
          }
          this.descRTNode.getComponent("RichTextUpdater").setContent("skill_" + magicData.id + "_desc", result);
        } else this.descRTNode.getComponent("RichTextUpdater").setContent("skill_" + magicData.id + "_desc");
        var richTex = this.descRT;
        richTex.node["_activeInHierarchy"] = true;
        richTex["_updateRichText"]();
        while (richTex.node.height > 225) {
          richTex.fontSize -= 1;
          richTex.lineHeight -= 1;
        }
        this.bulletRootNode.removeAllChildren();
        var bulletPreb = Global.res.getRes(gameConfig.POOLMANAGER_TYPE.bullet.path);
        if (bulletPreb) {
          var bulletItem = cc.instantiate(bulletPreb);
          this.bulletRootNode.addChild(bulletItem);
          var bullet = bulletItem.getComponent("Bullet");
          bullet.initData({
            bulletConfig: magicData
          }, {
            needBg: true,
            hideOwnedCount: true,
            nodeSize: {
              width: 190,
              height: 190
            },
            skillType: EnumType.SKILL_TYPE.MAGIC
          });
        }
        0 == magicData.oldPrice ? this.oldPriceLab.string = 0 : this.oldPriceLab.string = magicData.oldPrice > 0 ? "-" + magicData.oldPrice : "+" + Math.abs(magicData.oldPrice);
        this.oldPriceLab.node.parent.active = magicData.oldPrice != magicData.curPrice;
        0 == magicData.curPrice ? this.priceLab.string = 0 : this.priceLab.string = magicData.curPrice > 0 ? "-" + magicData.curPrice : "+" + Math.abs(magicData.curPrice);
        this.updateStatus();
        this.updateRefresh(replenishTimes);
      },
      show: function show(delayTime) {
        var _this = this;
        void 0 === delayTime && (delayTime = 0);
        this.animation.node.active = false;
        cc.tween(this.node).delay(delayTime).call(function() {
          _this.animation.node.active = true;
          _this.playAnimation("marketItem");
        }).start();
      },
      playAnimation: function playAnimation(animName) {
        this.animation.play(animName);
      },
      updateStatus: function updateStatus() {
        this.buyNode.active = !this._isPurchased;
        this.maskNode.active = this.purchasedNode.active = this._isPurchased;
      },
      updateRefresh: function updateRefresh(replenishTimes) {
        this.refreshBtn.active = replenishTimes > 0;
      },
      onClickBuyBtn: function onClickBuyBtn() {
        if (this._isPurchased) return;
        var id = this._magicData.id;
        var curPrice = this._magicData.curPrice;
        var isOverdraw = 0 != this._roleData.overdraw;
        if (curPrice > 0 && this._roleData.currentMoney >= curPrice || curPrice <= 0 || isOverdraw) {
          this._roleData.spendMoney(curPrice);
          this.playAnimation("QBomb");
          this._isPurchased = true;
          var guiView = Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView");
          guiView ? guiView.updateMoneyCallback(curPrice, id, {
            isFixed: true,
            reversal: true,
            callback: this.buyItem.bind(this)
          }) : this.buyItem();
        } else Global.gui.toast("\u91d1\u5e01\u4e0d\u8db3");
      },
      buyItem: function buyItem() {
        var _this2 = this;
        Global.skillManager.addSkill(this._magicData.id, this._roleData);
        var fworldPos = this.bulletRootNode.convertToWorldSpaceAR(cc.v2(0, 0));
        Global.gui.get(gameConfig.UIID.BattlePanel).getComponent("BattleView").showRogueItemEffect(this._magicData.id, fworldPos, function() {
          var skillData = Global.skillManager.getSkillConfig(_this2._magicData.id);
          if (skillData && "" != skillData.ability_up) {
            var ability_ups = skillData.ability_up.split("|");
            if (0 == ability_ups[0]) {
              var msg = Global.languageManager.i18nData["ability_up_" + ability_ups[1]];
              msg && msg.content && cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.AbilityUp, {
                roleId: _this2._roleData.roleId,
                msg: msg.content
              });
            }
          }
          var roleView = _this2._roleData.node.getComponent("RoleView");
          var hasCombineSkill = roleView && roleView._combineArr && roleView._isMergeAnimation;
          if (hasCombineSkill) {
            var uiArgs = {
              combineArr: roleView._combineArr
            };
            var uicallBack = {
              onRemoved: function onRemoved(node, params) {
                console.log("UIID.SkillMerge onRemoved");
                roleView._combineArr = null;
                roleView._isMergeAnimation = false;
              }
            };
            Global.gui.open(gameConfig.UIID.SkillMerge, uiArgs, uicallBack);
          }
        });
        if (Global.gui.has(gameConfig.UIID.MarketPanel)) {
          var _Global$gui$get$getCo;
          null == (_Global$gui$get$getCo = Global.gui.get(gameConfig.UIID.MarketPanel).getComponent("MarketView")) ? void 0 : _Global$gui$get$getCo.buyItem(this._index);
        }
      },
      onClickRefreshBtn: function onClickRefreshBtn() {
        if (Global.gui.has(gameConfig.UIID.MarketPanel)) {
          var _Global$gui$get$getCo2;
          null == (_Global$gui$get$getCo2 = Global.gui.get(gameConfig.UIID.MarketPanel).getComponent("MarketView")) ? void 0 : _Global$gui$get$getCo2.refreshItem(this._index);
        }
      },
      onEnter: function onEnter() {
        this.animation.node.setScale(1.05, 1.05);
      },
      onLeave: function onLeave() {
        this.animation.node.setScale(1, 1);
      },
      onDisable: function onDisable() {
        this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onEnter, this);
        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onLeave, this);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  MarketView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5ad7cd2QU5DlIlvOC+uIoLI", "MarketView");
    "use strict";
    var gameConfig = require("GameConfig");
    var PRICE_BASE = {
      1: 30,
      2: 70,
      3: 110
    };
    var PRICE_DIFF = 20;
    cc.Class({
      extends: cc.Component,
      properties: {
        spine: {
          type: sp.Skeleton,
          default: null
        },
        content: {
          type: cc.Node,
          default: null
        },
        marketItemPreb: {
          type: cc.Prefab,
          default: null
        },
        layoutRootNode: {
          type: cc.Node,
          default: null
        },
        replenishNode: {
          type: cc.RichText,
          default: null
        },
        adsPriceLab: {
          type: cc.Label,
          default: null
        },
        _roleData: null,
        _marketCount: 0,
        _replenishTimes: gameConfig.GAME_CONST.replenishTimes,
        _adsPrice: 0,
        _goodsList: [],
        _refreshTimer: null,
        _belongsToCT: null
      },
      onAdded: function onAdded(args) {
        this._roleData = args.roleData;
        this._marketCount = args.marketCount;
        this._belongsToCT = args.belongsToCT;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: gameConfig.CONTROLS.MARKET_CT
        });
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: this._belongsToCT
        });
      },
      onEnable: function onEnable() {
        this.spine.setCompleteListener(this.onComplete.bind(this));
        this.content.active = false;
        this.spine.node.active = true;
        this.spine.setAnimation(0, "Start", false);
        this._replenishTimes = gameConfig.GAME_CONST.replenishTimes;
        this.initUI();
      },
      onComplete: function onComplete(trackEntry) {
        "Start" == trackEntry.animation.name ? this.content.active = true : "Open" == trackEntry.animation.name ? this.content.active = true : "Close" == trackEntry.animation.name && Global.gui.remove(gameConfig.UIID.MarketPanel);
      },
      initUI: function initUI() {
        this.updateReplenish();
        var ads_price_base = PRICE_BASE[1] || 100;
        this._adsPrice = ads_price_base + this._marketCount * PRICE_DIFF + Global.utils.getRandomNumber(0, 39);
        this.adsPriceLab.string = "+" + this._adsPrice;
        var magicList = Global.skillManager.getRandomMagic(3, false, this._roleData);
        globalThis.hasOwnProperty("temp_market_list") && globalThis.temp_market_list.length && (magicList = globalThis.temp_market_list);
        this._goodsList = [];
        this.layoutRootNode.removeAllChildren();
        for (var index = 0; index < magicList.length; index++) {
          var magic = Global.utils.deepClone(magicList[index]);
          this.creatItem(index, magic);
        }
      },
      updateReplenish: function updateReplenish() {
        this.replenishNode.string = "REPLENISH TIMES:" + this._replenishTimes;
      },
      getMoneyItem: function getMoneyItem(_skillId) {
        var item = null;
        for (var index = 0; index < this._goodsList.length; index++) {
          var itemCtrl = this._goodsList[index];
          if (itemCtrl && itemCtrl._magicData.id == _skillId) {
            item = itemCtrl.node;
            break;
          }
        }
        return item;
      },
      buyItem: function buyItem(index) {
        var _this = this;
        this._roleData.getCurrentProperties();
        this.freshAllGoods();
        this._refreshTimer = setTimeout(function() {
          _this.refreshItem(index);
        }, 1e3);
      },
      refreshItem: function refreshItem(index) {
        if (this._replenishTimes <= 0) {
          Global.gui.toast("market_noreplenishTimes", true);
          return;
        }
        this._replenishTimes--;
        this.updateReplenish();
        var itemCtrl = this._goodsList[index];
        if (!itemCtrl) return;
        var itemNode = itemCtrl.node;
        itemNode.removeFromParent();
        var magicList = Global.skillManager.getRandomMagic(1, false, this._roleData);
        var magic = Global.utils.deepClone(magicList[0]);
        this.creatItem(index, magic);
        this.freshAllGoods();
      },
      freshAllGoods: function freshAllGoods() {
        for (var index = 0; index < this._goodsList.length; index++) {
          var itemCtrl = this._goodsList[index];
          var magic = itemCtrl._magicData;
          magic.curPrice = this.getPrice(magic);
          itemCtrl.initUI(this._roleData, magic, index, this._replenishTimes);
        }
      },
      creatItem: function creatItem(index, magic) {
        var marketItem = cc.instantiate(this.marketItemPreb);
        marketItem.zIndex = index;
        magic.curPrice = this.getPrice(magic);
        var marketItemCtrl = marketItem.getComponent("MarketItem");
        marketItemCtrl.initUI(this._roleData, magic, index, this._replenishTimes);
        this.layoutRootNode.addChild(marketItem);
        this._goodsList[index] = marketItemCtrl;
      },
      getPrice: function getPrice(magic) {
        var discount = this._roleData.data.discount || 0;
        var price_base = PRICE_BASE[magic.rarity] || 100;
        var oldPrice = price_base + this._marketCount * PRICE_DIFF + Global.utils.getRandomNumber(0, 39);
        magic.hasOwnProperty("oldPrice") || (magic.oldPrice = oldPrice);
        var curPrice = Math.floor((1 - discount / 100) * magic.oldPrice);
        return curPrice;
      },
      onClickAdsBtn: function onClickAdsBtn() {
        Global.gui.toast("+" + this._adsPrice);
        this._roleData.spendMoney(-this._adsPrice);
      },
      onCloseUI: function onCloseUI() {
        Global.gui.remove(gameConfig.UIID.MarketPanel);
        this._refreshTimer && clearTimeout(this._refreshTimer);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  MoneyEffect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57b82k3WuJPmbF1gDv5FxSu", "MoneyEffect");
    "use strict";
    var gameConfig = require("GameConfig");
    var RADIUS = 110;
    var RANDOMSCOPE = 60;
    var MAX_AMOUNT = 20;
    cc.Class({
      extends: cc.Component,
      properties: {},
      playCoinFlyAnim: function playCoinFlyAnim(amount, startPos, endPos, args) {
        var _this = this;
        amount = Math.ceil(amount / 10);
        amount = amount > MAX_AMOUNT ? MAX_AMOUNT : amount;
        var radius = (null == args ? void 0 : args.radius) || RADIUS;
        var isFixed = !(null == args || !args.hasOwnProperty("isFixed")) && args.isFixed;
        var callback = (null == args ? void 0 : args.callback) || function() {
          Global.utils.logMessage("playCoinFlyAnim done");
        };
        var points = this.getCirclePoints(amount, startPos, radius, isFixed);
        var coinNodeList = points.map(function(pos) {
          var money = Global.poolManager.get(gameConfig.POOLMANAGER_TYPE.money.key);
          money.setPosition(startPos);
          _this.node.addChild(money);
          return {
            node: money,
            startPos: startPos,
            mdPos: pos,
            endPos: endPos,
            dis: pos.sub(endPos).mag()
          };
        });
        coinNodeList = coinNodeList.sort(function(a, b) {
          if (a.dis - b.dis > 0) return 1;
          if (a.dis - b.dis < 0) return -1;
          return 0;
        });
        coinNodeList.forEach(function(item, index) {
          cc.tween(item.node).to(.3, {
            position: item.mdPos
          }).delay(.01 * index).to(.5, {
            position: item.endPos
          }).call(function() {
            Global.poolManager.put(gameConfig.POOLMANAGER_TYPE.money.key, item.node);
            index == coinNodeList.length - 1 && callback();
          }).start();
        });
      },
      getCirclePoints: function getCirclePoints(amount, centerPos, radius, isFixed, randomScope) {
        void 0 === randomScope && (randomScope = RANDOMSCOPE);
        if (1 == amount || isFixed) {
          radius = 0;
          randomScope = 0;
        }
        var points = [];
        var radians = Math.PI / 180 * Math.round(360 / amount);
        for (var i = 0; i < amount; i++) {
          var x = centerPos.x + radius * Math.sin(radians * i);
          var y = centerPos.y + radius * Math.cos(radians * i);
          points.unshift(cc.v3(x + Math.random() * randomScope, y + Math.random() * randomScope, 0));
        }
        return points;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  Money: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "57b62mBH91IGIn5fkNpuFcC", "Money");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spine: {
          type: cc.Node,
          default: null
        },
        animator: {
          type: cc.Animation,
          default: null
        },
        moneyLab: {
          type: cc.Label,
          default: null
        },
        tempLab: {
          type: cc.Label,
          default: null
        },
        __roleData: null,
        _money: 0
      },
      onLoad: function onLoad() {
        this.animator.on("finished", function() {
          this.spine.active = false;
        }.bind(this));
      },
      initData: function initData(roleData) {
        this._roleData = roleData;
        this.change(true);
      },
      change: function change(isInit) {
        var _this = this;
        if (isInit) {
          this._money = this._roleData.currentMoney;
          this.moneyLab.string = this._roleData.currentMoney;
          return;
        }
        var offMoney = this._roleData.currentMoney - this._money;
        if (0 == offMoney) return;
        this.spine.active = true;
        this.tempLab.string = offMoney >= 0 ? "+" + offMoney : offMoney;
        var obj = {
          money: this._money
        };
        cc.tween(obj).to(.5, {
          money: this._roleData.currentMoney
        }, {
          progress: function progress(start, end, current, ratio) {
            var value = Math.floor(start + (end - start) * ratio);
            _this.moneyLab.string = value;
          }
        }).start();
        this._money = this._roleData.currentMoney;
        offMoney > 0 ? this.animator.play("addMoney", false) : this.animator.play("cutMoney", false);
      }
    });
    cc._RF.pop();
  }, {} ],
  MsgItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86caduc1CFDGYsljnGgfiT3", "MsgItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var SPACE_ROOTNODE = {
      width: 50,
      height: 20
    };
    var COLOR_TYPE = [ new cc.Color(255, 255, 255), new cc.Color(223, 254, 219) ];
    cc.Class({
      extends: cc.Component,
      properties: {
        msgNode: {
          type: cc.Node,
          default: null
        },
        richText: {
          type: cc.Node,
          default: null
        },
        direction: {
          displayName: "\u65b9\u5411",
          type: gameConfig.DIRECTION_ENUM,
          default: gameConfig.DIRECTION_ENUM.LEFT
        }
      },
      updateData: function updateData(msg) {
        this.msgNode.getComponent("RichTextUpdater").setContent(msg);
        var contentSize = this.richText.getContentSize();
        contentSize.width > 580 && (this.richText.getComponent(cc.RichText).maxWidth = 580);
        this.updateBaseUI();
      },
      updateBaseUI: function updateBaseUI() {
        var contentSize = this.richText.getContentSize();
        this.node.setContentSize(contentSize.width + SPACE_ROOTNODE.width, contentSize.height + SPACE_ROOTNODE.height);
        this.msgNode.setContentSize(contentSize.width + SPACE_ROOTNODE.width, contentSize.height + SPACE_ROOTNODE.height);
        var widget = this.getComponent(cc.Widget);
        if (this.direction == gameConfig.DIRECTION_ENUM.LEFT) {
          widget.isAlignTop = widget.isAlignBottom = widget.isAlignRight = false;
          widget.isAlignLeft = true;
          widget.left = 10;
          this.msgNode.setScale(1, 1);
          this.msgNode.color = COLOR_TYPE[0];
        } else {
          widget.isAlignTop = widget.isAlignBottom = widget.isAlignLeft = false;
          widget.isAlignRight = true;
          widget.right = 10;
          this.msgNode.setScale(-1, 1);
          this.msgNode.getChildByName("richText").setScale(-1, 1);
          this.msgNode.color = COLOR_TYPE[1];
        }
        this.playAnimation();
      },
      playAnimation: function playAnimation() {
        this.msgNode.scale > 0 && this.node.getComponent(cc.Animation).play("eventItem_popup");
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  Notify: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2e255KwPb1FeaMMnu6luj+B", "Notify");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Notify = function(_super) {
      __extends(Notify, _super);
      function Notify() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.lab_content = null;
        _this.animation = null;
        _this.onComplete = null;
        return _this;
      }
      Notify.prototype.onLoad = function() {
        this.animation.on(cc.Animation.EventType.FINISHED, this.onFinished.bind(this), this);
        this.animation.play("notify");
      };
      Notify.prototype.onFinished = function() {
        this.node.parent.destroy();
        this.onComplete && this.onComplete();
      };
      Notify.prototype.toast = function(msg, useI18n) {
        this.lab_content.string = useI18n ? Global.languageManager.t(msg) : msg;
      };
      __decorate([ property(cc.Label) ], Notify.prototype, "lab_content", void 0);
      __decorate([ property(cc.Animation) ], Notify.prototype, "animation", void 0);
      Notify = __decorate([ ccclass ], Notify);
      return Notify;
    }(cc.Component);
    exports.default = Notify;
    cc._RF.pop();
  }, {} ],
  OpenBoxResult: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b674fWKikFN95iNyJSZoRCM", "OpenBoxResult");
    "use strict";
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        flash: sp.Skeleton,
        container: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        uiContainer: cc.Node,
        checkBox: cc.Toggle,
        boxGet10KeyNode: cc.Node,
        boxGet10DiamondNode: cc.Node,
        boxGet10DiamondLabel: cc.Node,
        boxGet10KeyLabel: cc.Node
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.itemList = _args.itemList;
        this.boxType = _args.boxType;
      },
      showItemList: function showItemList() {
        this.clearItems();
        for (var i = 0; i < this.itemList.length; i++) {
          var itemData = this.itemList[i];
          null != itemData.equipmentConfig ? this.generateEquipmentItem(itemData, i) : this.generateBagItem(itemData, i);
        }
        this.showUI();
      },
      reset: function reset() {
        this.uiContainer.opacity = 0;
        this.uiContainer.active = false;
      },
      showUI: function showUI() {
        cc.tween(this.uiContainer).to(.2, {
          opacity: 255
        }).start();
        var keyCount = Global.shopManager.getKeyCount(this.boxType);
        if (keyCount > 0) {
          this.boxGet10KeyNode.active = true;
          this.boxGet10DiamondNode.active = false;
          var maxCount = keyCount > 10 ? 10 : keyCount;
          this.boxGet10KeyLabel.getComponent("LabelUpdater").setString(keyCount + "/" + maxCount);
          this.uiContainer.active = true;
        } else if (this.boxType != Global.shopManager.PURPLE) {
          this.boxGet10KeyNode.active = false;
          this.boxGet10DiamondNode.active = true;
          var diamond10 = this.boxType == Global.shopManager.BLUE ? Global.shopManager.BLUE_BOX_DIAMOND_1 : Global.shopManager.RED_BOX_DIAMOND_10;
          this.boxGet10DiamondLabel.getComponent("LabelUpdater").setString(diamond10);
          this.uiContainer.active = true;
        }
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.container.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.container.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData, _index) {
        var startX = -310;
        var startY = 0;
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.OPEN_BOX_RESULT);
        this.container.addChild(equipmentItem);
        _index = 8 == _index || 9 == _index ? _index + 1 : _index;
        equipmentItem.x = startX + 210 * Math.floor(_index % 4);
        equipmentItem.y = startY + -1 * Math.floor(_index / 4) * 210;
      },
      generateBagItem: function generateBagItem(_itemData, _index) {
        var startX = -310;
        var startY = 0;
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.getComponent("BagItem").setData(_itemData, this.roleData, EnumType.ITEM_OWNER_TYPE.OPEN_BOX_RESULT);
        this.container.addChild(bagItem);
        _index = 8 == _index || 9 == _index ? _index + 1 : _index;
        bagItem.x = startX + 210 * Math.floor(_index % 4);
        bagItem.y = startY + -1 * Math.floor(_index / 4) * 210;
      },
      onEnable: function onEnable() {
        var _this = this;
        this.reset();
        this.flash.clearTrack(0);
        this.flash.setAnimation(0, "Card_Front", false);
        this.flash.setEventListener(function(trackEntry, event) {
          "Start" === event.data.name && _this.showItemList();
        });
      },
      onClickAgain: function onClickAgain() {
        var shopNode = Global.gui.get(gameConfig.UIID.ShopPagePanel);
        if (null == shopNode) return;
        var shopCom = shopNode.getComponent("ShopPanel");
        if (null == shopCom) return;
        this.onClickClose();
        switch (this.boxType) {
         case Global.shopManager.RED:
          shopCom.onClickGet10RedBox(null, this.checkBox.isChecked);
          break;

         case Global.shopManager.ORANGE:
          shopCom.onClickGet10OrangeBox(null, this.checkBox.isChecked);
          break;

         case Global.shopManager.PURPLE:
          shopCom.onClickGet10PurpleBox(null, this.checkBox.isChecked);
          break;

         case Global.shopManager.BLUE:
          shopCom.onClickGet10BlueBox(null, this.checkBox.isChecked);
        }
      },
      onClickClose: function onClickClose() {
        this.clearItems();
        Global.gui.remove(gameConfig.UIID.OpenBoxResult);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  OpenBox: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48a6agMyYZIwqwWfeTbfdfF", "OpenBox");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        equipmentItem: cc.Node,
        bagItem: cc.Node,
        itemName: cc.Node,
        box: sp.Skeleton,
        boxGlow: sp.Skeleton
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.itemList = _args.itemList;
        this.boxType = _args.boxType;
        this.currentIndex = 0;
        this.reset();
      },
      reset: function reset() {
        this.itemName.opacity = 0;
        this.equipmentItem.opacity = 0;
        this.bagItem.opacity = 0;
        this.boxGlow.node.active = false;
      },
      onEnable: function onEnable() {
        var currentItem = this.itemList[this.currentIndex];
        this.showAni(currentItem);
      },
      showAni: function showAni(_itemData) {
        var _this = this;
        var currentItem = null;
        if (null != _itemData.equipmentConfig) {
          this.equipmentItem.getComponent("EquipmentItem").setData(_itemData, Global.roleData);
          this.itemName.getComponent("LabelUpdater").setString(_itemData.equipmentConfig.name);
          this.itemName.getComponent("LabelUpdater").setColor(Global.utils.getEquipmentLabelColor(_itemData.rarity));
          currentItem = this.equipmentItem;
        } else {
          this.bagItem.getComponent("BagItem").setData(_itemData, Global.roleData);
          currentItem = this.bagItem;
        }
        var boxAniName;
        boxAniName = this.boxType == Global.shopManager.RED || this.boxType == Global.shopManager.ORANGE ? "OpenBox_3" : this.boxType == Global.shopManager.PURPLE ? "OpenBox_2" : "OpenBox_1";
        this.box.clearTrack(0);
        this.box.setAnimation(0, boxAniName, false);
        this.box.setEventListener(function(trackEntry, event) {
          if ("Start" === event.data.name) {
            _this.boxGlow.node.active = true;
            _this.boxGlow.clearTrack(0);
            _this.boxGlow.setAnimation(0, "Boxglow", false);
            _this.boxGlow.setCompleteListener(function(trackEntry) {
              _this.boxGlow.clearTrack(0);
              _this.boxGlow.setAnimation(0, "Glowidle", true);
              _this.boxGlow.setCompleteListener(null);
            });
            cc.tween(currentItem).to(.2, {
              opacity: 255
            }).start();
            cc.tween(_this.itemName).to(.2, {
              opacity: 255
            }).start();
          }
        });
      },
      onClickContinue: function onClickContinue() {
        this.currentIndex++;
        if (this.currentIndex < this.itemList.length) {
          this.reset();
          var currentItem = this.itemList[this.currentIndex];
          this.showAni(currentItem);
        } else {
          Global.gui.remove(gameConfig.UIID.OpenBox);
          var args = {};
          if (this.itemList.length > 1) {
            args.itemList = this.itemList;
            Global.gui.open(gameConfig.UIID.OpenBoxResult, args);
          } else {
            args.items = this.itemList;
            args.rewardType = EnumType.REWARD_TYPE.ITEM;
            Global.gui.open(gameConfig.UIID.RewardsPanel, args);
          }
        }
      },
      onClickSkip: function onClickSkip() {
        Global.gui.remove(gameConfig.UIID.OpenBox);
        var args = {};
        if (this.itemList.length > 1) {
          args.boxType = this.boxType;
          args.itemList = this.itemList;
          Global.gui.open(gameConfig.UIID.OpenBoxResult, args);
        } else {
          args.items = this.itemList;
          args.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        }
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  OptionItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "be779yAmnVCsLXBWz16rG+o", "OptionItem");
    "use strict";
    var SpineBase = require("SpineBase");
    var TIMER = 50;
    cc.Class({
      extends: cc.Component,
      properties: {
        choiceSpine: {
          type: SpineBase,
          default: null
        },
        disappearSpine: {
          type: SpineBase,
          default: null
        },
        animator: {
          type: cc.Node,
          default: null
        },
        descNode: {
          type: cc.Node,
          default: null
        },
        nameNode: {
          type: cc.Node,
          default: null
        },
        gainNode: {
          type: cc.Node,
          default: null
        },
        rewardNode: {
          type: cc.Node,
          default: null
        },
        icon: {
          type: cc.Sprite,
          default: null
        },
        _data: null,
        _parent: null
      },
      onLoad: function onLoad() {
        this.choiceSpine.animationCallBack = function() {
          this._parent.showSelectMessage(this._data);
        }.bind(this);
      },
      updateData: function updateData(parent, roleData, data, index) {
        this._data = data;
        this._parent = parent;
        var skillData = data.skillConfig;
        this.descNode.getComponent("RichTextUpdater").setContent(data.msgId);
        var self = this;
        var pathIcon = "icons/skillIcons/skill_" + skillData.id;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          res && (self.icon.spriteFrame = res);
        });
        this.nameNode.getComponent("RichTextUpdater").setContent("skill_" + skillData.id + "_name");
        var valueListStr = Global.languageManager.i18nData["skill_" + skillData.id + "_desc"].valueList;
        var valueList = null;
        var result = [];
        if ("" != valueListStr) {
          valueList = valueListStr.split(",");
          for (var i = 0; i < valueList.length; i++) {
            var item = valueList[i];
            item = item.split("|");
            var value = Math.floor(roleData.getStaticData()[item[1]] * Number(item[0]) * .01);
            result.push(value);
          }
          this.rewardNode.getComponent("RichTextUpdater").setContent("skill_" + skillData.id + "_desc", result);
        } else this.rewardNode.getComponent("RichTextUpdater").setContent("skill_" + skillData.id + "_desc");
        var timer = TIMER + index * TIMER;
        setTimeout(function() {
          this.animator.getComponent(cc.Animation).play("eventItem_popup");
        }.bind(this), timer);
      },
      onClickBtn: function onClickBtn(event, type) {
        this._parent.selectItem(this.node);
      },
      playAnimation: function playAnimation(animName) {
        var _this = this;
        this.getComponent(cc.Toggle).interactable = false;
        "Phone_Choice" == animName ? cc.tween(this.animator).delay(.5).to(.2, {
          opacity: 0
        }).call(function() {
          _this.choiceSpine.playAnimation(animName, false);
        }).start() : "Phone_Xiaoshi" == animName && cc.tween(this.animator).to(.2, {
          opacity: 0
        }).call(function() {
          _this.disappearSpine.playAnimation(animName, false);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    SpineBase: "SpineBase"
  } ],
  Option: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "11e08fbMyVIGaklZTbwaRyf", "Option");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: {
          type: cc.Node,
          default: null
        },
        optionItemPreb: {
          type: cc.Prefab,
          default: null
        },
        _optionList: []
      },
      updateData: function updateData(roleData, options) {
        this._optionList = [];
        this.content.removeAllChildren();
        var opts = options.split(";");
        for (var index = 0; index < opts.length; index++) {
          var optionData = opts[index];
          var optList = optionData.split("|");
          var skillId = optList[0];
          var msgId = optList[1];
          var percent = optList[2];
          var skillConfig = Global.skillManager.getSkillConfig(skillId);
          var obj = new Object();
          obj.skillId = skillId;
          obj.msgId = msgId;
          obj.percent = percent;
          obj.skillConfig = skillConfig;
          var optionItem = cc.instantiate(this.optionItemPreb);
          var itemCtrl = optionItem.getComponent("OptionItem");
          itemCtrl.updateData(this, roleData, obj, index);
          this.content.addChild(optionItem);
          obj.itemCtrl = itemCtrl;
          this._optionList.push(obj);
        }
      },
      selectItem: function selectItem(item) {
        for (var index = 0; index < this._optionList.length; index++) {
          var itemCtrl = this._optionList[index].itemCtrl;
          itemCtrl.playAnimation(item == itemCtrl.node ? "Phone_Choice" : "Phone_Xiaoshi");
        }
      },
      showSelectMessage: function showSelectMessage(data) {
        Global.gui.get(gameConfig.UIID.EventsPanel).getComponent("EventsView").showSelectMessage(this._optionList, data);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  PassiveHarvestingConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "657a0xo1+1EFqSFiTFXM4kQ", "PassiveHarvestingConfig");
    "use strict";
    var PassiveHarvestingConfig = cc.Class({
      name: "PassiveHarvestingConfig",
      statics: {
        data: [ {
          chapter: "1",
          coin: "4",
          diamond: "0.017",
          rewards: ""
        }, {
          chapter: "2",
          coin: "5",
          diamond: "0.017",
          rewards: "1001|0.033"
        }, {
          chapter: "3",
          coin: "6",
          diamond: "0.017",
          rewards: "1001|0.033"
        }, {
          chapter: "4",
          coin: "7",
          diamond: "0.034",
          rewards: "1001|0.036,1002|0.001,1003|0.001,1004|0.001,1005|0.001,1006|0.001,1007|0.001,2001|0.001,2002|0.001,2003|0.001"
        }, {
          chapter: "5",
          coin: "8",
          diamond: "0.034",
          rewards: "1001|0.042,1002|0.002"
        }, {
          chapter: "6",
          coin: "9",
          diamond: "0.034",
          rewards: "1001|0.05,1002|0.002"
        }, {
          chapter: "7",
          coin: "10",
          diamond: "0.05",
          rewards: "1001|0.0621,1002|0.002"
        }, {
          chapter: "8",
          coin: "11",
          diamond: "0.05",
          rewards: "1001|0.0734,1002|0.002"
        }, {
          chapter: "9",
          coin: "13",
          diamond: "0.05",
          rewards: "1001|0.0839,1002|0.002"
        }, {
          chapter: "10",
          coin: "15",
          diamond: "0.05",
          rewards: "1001|0.0937,1002|0.002"
        }, {
          chapter: "11",
          coin: "18",
          diamond: "0.05",
          rewards: "1001|0.1028,1002|0.003"
        }, {
          chapter: "12",
          coin: "20",
          diamond: "0.067",
          rewards: "1001|0.1110,1002|0.003"
        }, {
          chapter: "13",
          coin: "23",
          diamond: "0.067",
          rewards: "1001|0.1189,1002|0.003"
        }, {
          chapter: "14",
          coin: "26",
          diamond: "0.067",
          rewards: "1001|0.1260,1002|0.003"
        }, {
          chapter: "15",
          coin: "29",
          diamond: "0.067",
          rewards: "1001|0.1325,1002|0.003"
        }, {
          chapter: "16",
          coin: "32",
          diamond: "0.067",
          rewards: "1001|0.1390,1002|0.004"
        }, {
          chapter: "17",
          coin: "35",
          diamond: "0.083",
          rewards: "1001|0.1443,1002|0.004"
        }, {
          chapter: "18",
          coin: "38",
          diamond: "0.083",
          rewards: "1001|0.1490,1002|0.004"
        }, {
          chapter: "19",
          coin: "41",
          diamond: "0.083",
          rewards: "1001|0.1530,1002|0.004"
        }, {
          chapter: "20",
          coin: "44",
          diamond: "0.083",
          rewards: "1001|0.1563,1002|0.004"
        }, {
          chapter: "21",
          coin: "46",
          diamond: "0.083",
          rewards: "1001|0.1593,1002|0.004"
        }, {
          chapter: "22",
          coin: "50",
          diamond: "0.1",
          rewards: "1001|0.1632,1002|0.005"
        }, {
          chapter: "23",
          coin: "60",
          diamond: "0.1",
          rewards: "1001|0.1652,1002|0.005"
        }, {
          chapter: "24",
          coin: "70",
          diamond: "0.1",
          rewards: "1001|0.1673,1002|0.005"
        }, {
          chapter: "25",
          coin: "80",
          diamond: "0.1",
          rewards: "1001|0.1683,1002|0.005"
        }, {
          chapter: "26",
          coin: "90",
          diamond: "0.1167",
          rewards: "1001|0.1692,1002|0.005"
        }, {
          chapter: "27",
          coin: "100",
          diamond: "0.1167",
          rewards: "1001|0.1726,1002|0.005"
        }, {
          chapter: "28",
          coin: "110",
          diamond: "0.1167",
          rewards: "1001|0.1738,1002|0.006"
        }, {
          chapter: "29",
          coin: "120",
          diamond: "0.1167",
          rewards: "1001|0.174,1002|0.006"
        }, {
          chapter: "30",
          coin: "130",
          diamond: "0.1167",
          rewards: "1001|0.1752,1002|0.006"
        } ]
      }
    });
    module.exports = PassiveHarvestingConfig;
    cc._RF.pop();
  }, {} ],
  PassiveHarvestingManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cd1a0WHvytGrpt+jHC/gYsi", "PassiveHarvestingManager");
    "use strict";
    var _cc$Class;
    var BattleConfig = require("BattleConfig");
    var PassiveHarvestingConfig = require("PassiveHarvestingConfig");
    var gameConfig = require("GameConfig");
    var ItemData = require("ItemData");
    var PassiveHarvestingManager = cc.Class((_cc$Class = {
      extends: cc.Component,
      properties: {},
      start: function start() {},
      ctor: function ctor() {
        this.startTimer = null;
        this.endTimer = null;
        this.getRewardsTimer = null;
        this.adCount = 4;
        this.timer = Date.now();
        this.currentRewards = {};
        this.passiveHarvestingConfig = {};
        for (var i = 0; i < PassiveHarvestingConfig.data.length; i++) {
          var config = PassiveHarvestingConfig.data[i];
          var rewardsStr = config.rewards;
          var rewardsArr = rewardsStr.split(",");
          config.rewards = [];
          for (var j = 0; j < rewardsArr.length; j++) {
            var rewardStr = rewardsArr[j];
            var rewardArr = rewardStr.split("|");
            var reward = {};
            reward.itemId = rewardArr[0];
            reward.grow = rewardArr[1];
            config.rewards.push(reward);
          }
          this.passiveHarvestingConfig[config.chapter] = config;
        }
      }
    }, _cc$Class["start"] = function start() {
      if (null != this.startTimer) return;
      this.startTimer = Global.networkTimer;
      this.endTimer = Global.networkTimer;
      var storageData = this.getPassiveHarvestingStorageData();
      Global.storage.set(gameConfig.COMMON_KEYS.PASSIVE_HARVESTING_DATA, storageData);
    }, _cc$Class.getCurrentChapterData = function getCurrentChapterData() {
      var chapter = Global.chapterManager.curChapter + 1;
      return this.passiveHarvestingConfig[chapter];
    }, _cc$Class.init = function init() {
      var data = Global.storage.getJson(gameConfig.COMMON_KEYS.PASSIVE_HARVESTING_DATA);
      if (null == data) return;
      this.startTimer = data.startTimer;
      this.endTimer = data.endTimer;
      this.getRewardsTimer = data.getRewardsTimer;
      this.adCount = data.adCount;
    }, _cc$Class.getCurrentRewards = function getCurrentRewards() {
      return this.currentRewards;
    }, _cc$Class.getPassiveHarvestingStorageData = function getPassiveHarvestingStorageData() {
      var data = {};
      data.startTimer = this.startTimer;
      data.endTimer = this.endTimer;
      data.getRewardsTimer = this.getRewardsTimer;
      data.adCount = null == this.adCount ? 4 : this.adCount;
      return data;
    }, _cc$Class.reset = function reset() {
      this.startTimer = Global.networkTimer;
      this.endTimer = Global.networkTimer;
      this.getRewardsTimer = null;
      var storageData = this.getPassiveHarvestingStorageData();
      Global.storage.set(gameConfig.COMMON_KEYS.PASSIVE_HARVESTING_DATA, storageData);
    }, _cc$Class.claimRewards = function claimRewards() {
      var duration = (Global.networkTimer - this.startTimer) % 6e4;
      this.getRewardsTimer = Global.networkTimer - duration;
      this.currentRewards = {};
      this.currentRewards.coin = 0;
      this.currentRewards.diamond = 0;
      this.currentRewards.items = [];
      var total = Global.networkTimer - this.startTimer;
      total >= 288e5 && this.reset();
    }, _cc$Class.claim4HoursRewards = function claim4HoursRewards() {
      var result = {};
      var growCount = Math.floor(240);
      var currentConfig = this.getCurrentChapterData();
      result.coin = Math.floor(growCount * currentConfig.coin);
      result.diamond = Math.floor(growCount * currentConfig.diamond);
      result.items = [];
      for (var i = 0; i < currentConfig.rewards.length; i++) {
        var rewardConfig = currentConfig.rewards[i];
        if ("" == rewardConfig.itemId) continue;
        var itemConfig = Global.bagManager.getItemConfig(rewardConfig.itemId);
        var itemData = new ItemData();
        itemData.setData(Global.roleData, itemConfig);
        itemData.count = Math.floor(growCount * rewardConfig.grow);
        result.items.push(itemData);
      }
      this.adCount--;
      var storageData = this.getPassiveHarvestingStorageData();
      Global.storage.set(gameConfig.COMMON_KEYS.PASSIVE_HARVESTING_DATA, storageData);
      return result;
    }, _cc$Class.updateRewards = function updateRewards() {
      var total = Global.networkTimer - this.startTimer;
      total >= 288e5 && (total = 288e5);
      var getRewardsPoint = null != this.getRewardsTimer ? this.getRewardsTimer - this.startTimer : 0;
      var duration = total - getRewardsPoint;
      var growCount = Math.floor(duration / 6e4);
      if (Global.networkTimer - this.endTimer >= 6e4 || growCount > 0) {
        var currentConfig = this.getCurrentChapterData();
        this.currentRewards = {};
        this.currentRewards.coin = Math.floor(growCount * currentConfig.coin);
        this.currentRewards.diamond = Math.floor(growCount * currentConfig.diamond);
        this.currentRewards.items = [];
        for (var i = 0; i < currentConfig.rewards.length; i++) {
          var rewardConfig = currentConfig.rewards[i];
          if ("" == rewardConfig.itemId) continue;
          var itemConfig = Global.bagManager.getItemConfig(rewardConfig.itemId);
          var itemData = new ItemData();
          itemData.setData(Global.roleData, itemConfig);
          itemData.count = Math.floor(growCount * rewardConfig.grow);
          this.currentRewards.items.push(itemData);
        }
        this.endTimer = Global.networkTimer;
        var storageData = this.getPassiveHarvestingStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.PASSIVE_HARVESTING_DATA, storageData);
      }
    }, _cc$Class.update = function update(dt) {
      if (null == this.startTimer) return;
      if (Date.now() - this.timer >= BattleConfig.HEART_BEAT_ONE_SECOND) {
        this.timer = Date.now();
        this.updateRewards();
      }
    }, _cc$Class));
    module.exports = PassiveHarvestingManager;
    cc._RF.pop();
  }, {
    BattleConfig: "BattleConfig",
    GameConfig: "GameConfig",
    ItemData: "ItemData",
    PassiveHarvestingConfig: "PassiveHarvestingConfig"
  } ],
  PassiveHarvestingPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bbd85FvZWFGTLfPZkl+wr9K", "PassiveHarvestingPanel");
    "use strict";
    var gameConfig = require("GameConfig");
    var BattleConfig = require("BattleConfig");
    var EnumType = require("EnumType");
    var ItemData = require("ItemData");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: cc.Node,
        timeLabel: cc.Node,
        coinLabel: cc.Node,
        diamondLabel: cc.Node,
        adCountLabel: cc.Node,
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        scrollContent: cc.Node,
        claimBtn: cc.Button,
        adClaimBtn: cc.Button
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.content.y = 1e3;
        this.content.opacity = 255;
        cc.tween(this.node).to(.2, {
          opacity: 255
        }).start();
        cc.tween(this.content).to(.5, {
          position: cc.v2(0, 0)
        }, {
          easing: "elasticOut"
        }).start();
        this.timer = Date.now();
        this.green = new cc.color(66, 162, 4);
        this.red = new cc.color(222, 53, 35);
        this.updateUI();
      },
      updateUI: function updateUI() {
        if (Global.networkTimer - Global.passiveHarvestManager.startTimer >= 288e5) {
          this.timeLabel.getComponent("LabelUpdater").setString("08:00:00" + Global.languageManager.t("passive_harvesting_time_value"));
          this.timeLabel.getComponent("LabelUpdater").setColor(this.red);
        } else {
          this.timeLabel.getComponent("LabelUpdater").setString(Global.utils.formatTime(Global.networkTimer - Global.passiveHarvestManager.startTimer));
          this.timeLabel.getComponent("LabelUpdater").setColor(this.green);
        }
        var rewards = Global.passiveHarvestManager.getCurrentRewards();
        this.coinLabel.getComponent("LabelUpdater").setString(rewards.coin || 0);
        this.diamondLabel.getComponent("LabelUpdater").setString(rewards.diamond || 0);
        this.adCountLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("stamina_panel_remain_count") + Global.passiveHarvestManager.adCount);
        this.claimBtn.interactable = rewards.coin > 0 || rewards.diamond > 0 || rewards.items && rewards.items.length > 0;
        this.adClaimBtn.interactable = Global.passiveHarvestManager.adCount > 0;
        this.updateItems();
      },
      onClickClaim: function onClickClaim() {
        var rewards = Global.passiveHarvestManager.getCurrentRewards();
        var itemConfig, itemData;
        if (rewards.coin > 0) {
          Global.roleData.updateCoin(rewards.coin);
          itemConfig = Global.bagManager.getItemConfig(Global.bagManager.COIN_ITEM_ID);
          itemData = new ItemData();
          itemData.setData(null, itemConfig);
          itemData.count = rewards.coin;
          rewards.items.push(itemData);
        }
        if (rewards.diamond > 0) {
          Global.roleData.updateDiamond(rewards.diamond);
          itemConfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          itemData = new ItemData();
          itemData.setData(null, itemConfig);
          itemData.count = rewards.diamond;
          rewards.items.push(itemData);
        }
        if (rewards.items.length > 0) {
          var args = {};
          args.items = rewards.items;
          args.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        }
        Global.passiveHarvestManager.claimRewards();
        this.claimBtn.interactable = rewards.coin > 0 || rewards.diamond > 0 || rewards.items && rewards.items.length > 0;
        Global.taskManager.updateProgress(EnumType.TASK_TYPE.PASSIVE_HARVESTING_REWARD, 1);
      },
      onClickAdClaim: function onClickAdClaim() {
        if (Global.passiveHarvestManager.adCount <= 0) return;
        var rewards = Global.passiveHarvestManager.claim4HoursRewards();
        for (var i = 0; i < rewards.items.length; i++) {
          var _itemData2 = rewards.items[i];
          Global.bagManager.addItem2Bag(_itemData2, Global.roleData);
        }
        var itemConfig, itemData;
        if (rewards.coin > 0) {
          Global.roleData.updateCoin(rewards.coin);
          itemConfig = Global.bagManager.getItemConfig(2003);
          itemData = new ItemData();
          itemData.setData(null, itemConfig);
          itemData.count = rewards.coin;
          rewards.items.push(itemData);
        }
        if (rewards.diamond > 0) {
          Global.roleData.updateDiamond(rewards.diamond);
          itemConfig = Global.bagManager.getItemConfig(2002);
          itemData = new ItemData();
          itemData.setData(null, itemConfig);
          itemData.count = rewards.diamond;
          rewards.items.push(itemData);
        }
        if (rewards.items.length > 0) {
          var args = {};
          args.items = rewards.items;
          args.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        }
        this.adClaimBtn.interactable = Global.passiveHarvestManager.adCount > 0;
        Global.taskManager.updateProgress(EnumType.TASK_TYPE.PASSIVE_HARVESTING_REWARD, 1);
      },
      clearItems: function clearItems() {
        while (this.bagItemList.length > 0) {
          var item = this.bagItemList.pop();
          this.equipmentContainer.removeChild(item, false);
          this.bagItemPool.push(item);
        }
      },
      generateBagItem: function generateBagItem(_itemData, _index) {
        var startX = -340;
        var startY = -105;
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.getComponent("BagItem").setData(_itemData, this.roleData);
        this.scrollContent.addChild(bagItem);
        bagItem.setScale(.8);
        bagItem.x = startX + 170 * Math.floor(_index % 5);
        bagItem.y = startY + -1 * Math.floor(_index / 5) * 170;
      },
      updateItems: function updateItems() {
        this.clearItems();
        var rewards = Global.passiveHarvestManager.getCurrentRewards();
        var rewardItems = rewards.items;
        if (!rewardItems) return;
        var index = 0;
        for (var i = 0; i < rewardItems.length; i++) {
          var itemData = rewardItems[i];
          if (itemData.count > 0) {
            this.generateBagItem(itemData, index);
            index++;
          }
        }
        this.scrollContent.height = 170 * Math.ceil((index + 1) / 5) + 30;
      },
      onClickClose: function onClickClose() {
        cc.tween(this.node).stop();
        cc.tween(this.node).to(.2, {
          opacity: 0
        }).call(function() {
          Global.gui.remove(gameConfig.UIID.PassiveHarvestingPanel);
        }).start();
      },
      update: function update(dt) {
        if (Date.now() - this.timer >= BattleConfig.HEART_BEAT_ONE_SECOND) {
          this.timer = Date.now();
          this.updateUI();
        }
      }
    });
    cc._RF.pop();
  }, {
    BattleConfig: "BattleConfig",
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  PicItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f311bLY4BJA8rD5NpFtNibf", "PicItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var SPACE_ROOTNODE = {
      width: 60,
      height: 40
    };
    var SPACE_BG = {
      width: 20,
      height: 20
    };
    var SPACE_SKILL_ROOTNODE = {
      width: 70,
      height: 10
    };
    var SPACE_SKILL_BG = {
      width: 30,
      height: -10
    };
    var PATH_EVENTS = "events/";
    var PATH_SKILLS = "icons/skillIcons/";
    cc.Class({
      extends: cc.Component,
      properties: {
        animator: {
          type: cc.Animation,
          default: null
        },
        colorNode: {
          type: cc.Node,
          default: null
        },
        icon: {
          type: cc.Sprite,
          default: null
        },
        direction: {
          displayName: "\u65b9\u5411",
          type: gameConfig.DIRECTION_ENUM,
          default: gameConfig.DIRECTION_ENUM.LEFT
        }
      },
      updateData: function updateData(icon) {
        var self = this;
        var isSkill = -1 != icon.indexOf("skill_");
        var pathIcon = (isSkill ? PATH_SKILLS : PATH_EVENTS) + icon;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          if (res) {
            self.icon.spriteFrame = res;
            self.updateBaseUI(isSkill);
          }
        });
      },
      updateBaseUI: function updateBaseUI(isSkill) {
        var contentSize = this.icon.node.getContentSize();
        var SPACEROOTNODE = SPACE_ROOTNODE;
        var SPACEBG = SPACE_BG;
        var SCALE = 1;
        if (isSkill) {
          SCALE = .8;
          SPACEBG = SPACE_SKILL_BG;
          SPACEROOTNODE = SPACE_SKILL_ROOTNODE;
          contentSize.width = SCALE * contentSize.width;
          contentSize.height = SCALE * contentSize.height;
        }
        this.colorNode.setContentSize(contentSize.width + SPACEBG.width, contentSize.height + SPACEBG.height);
        this.animator.node.setContentSize(contentSize.width + SPACEROOTNODE.width, contentSize.height + SPACEROOTNODE.height);
        this.node.setContentSize(contentSize.width + SPACEROOTNODE.width, contentSize.height + SPACEROOTNODE.height);
        var widget = this.node.getComponent(cc.Widget);
        if (this.direction == gameConfig.DIRECTION_ENUM.LEFT) {
          widget.isAlignTop = widget.isAlignBottom = widget.isAlignRight = false;
          widget.isAlignLeft = true;
          widget.left = 10;
          this.node.setScale(1, 1);
          this.icon.node.setScale(SCALE, SCALE);
        } else {
          widget.isAlignTop = widget.isAlignBottom = widget.isAlignLeft = false;
          widget.isAlignRight = true;
          widget.right = 10;
          this.node.setScale(-1, 1);
          this.icon.node.setScale(-SCALE, SCALE);
        }
        this.playAnimation();
      },
      playAnimation: function playAnimation() {
        this.node.scale > 0 && this.animator.play("eventItem_popup");
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  PoolManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "83d87xlKMxJQ74BStgUQ5qf", "PoolManager");
    "use strict";
    var gameConfig = require("GameConfig");
    var PoolManager = function PoolManager() {
      this.resetData();
    }, poolMG = PoolManager.prototype, g_instance = null;
    poolMG.resetData = function() {
      this.pools = {};
      this.prefabs = {};
    };
    poolMG.loadPrefabs = function() {
      var _this = this;
      Global.res.load(gameConfig.POOLMANAGER_TYPE.bullet.path, cc.Prefab, function(err, ret) {
        if (err) {
          console.error(err);
          return;
        }
        _this.initPool(gameConfig.POOLMANAGER_TYPE.bullet.key, ret, 20);
      });
      Global.res.load(gameConfig.POOLMANAGER_TYPE.valueLabel.path, cc.Prefab, function(err, ret) {
        if (err) {
          console.error(err);
          return;
        }
        _this.initPool(gameConfig.POOLMANAGER_TYPE.valueLabel.key, ret, 20);
      });
      Global.res.load(gameConfig.POOLMANAGER_TYPE.abilityUpLabel.path, cc.Prefab, function(err, ret) {
        if (err) {
          console.error(err);
          return;
        }
        _this.initPool(gameConfig.POOLMANAGER_TYPE.abilityUpLabel.key, ret, 5);
      });
      Global.res.load(gameConfig.POOLMANAGER_TYPE.dialogueItem.path, cc.Prefab, function(err, ret) {
        if (err) {
          console.error(err);
          return;
        }
        _this.initPool(gameConfig.POOLMANAGER_TYPE.dialogueItem.key, ret, 10);
      });
      Global.res.load(gameConfig.POOLMANAGER_TYPE.money.path, cc.Prefab, function(err, ret) {
        if (err) {
          console.error(err);
          return;
        }
        _this.initPool(gameConfig.POOLMANAGER_TYPE.money.key, ret, 10);
      });
    };
    poolMG.initPool = function(key, prefab, count) {
      Global.utils.logMessage("PoolManager:" + key + " :" + count);
      this.prefabs[key] = prefab;
      this.pools[key] = new cc.NodePool();
      for (var i = 0; i < count; ++i) this.pools[key].put(cc.instantiate(prefab));
    };
    poolMG.get = function(key) {
      if (null == this.pools[key]) {
        console.error("\u6ca1\u6709" + key);
        return null;
      }
      if (this.pools[key].size() > 0) {
        var node = this.pools[key].get();
        return node;
      }
      Global.utils.logMessage("\u65b0\u521b\u5efa:" + key);
      return cc.instantiate(this.prefabs[key]);
    };
    poolMG.put = function(key, node) {
      this.pools[key].put(node);
    };
    module.exports = function() {
      g_instance || (g_instance = new PoolManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  PowerChange: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "394e2DUSqNOGZAFGeYtyKNA", "PowerChange");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        label_1: cc.Node,
        arrow_1: cc.Node,
        arrow_2: cc.Node,
        label_2: cc.Node
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.label_1.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(_args.power_1));
        this.arrow_1.active = true == _args.powerUp;
        this.arrow_2.active = true != _args.powerUp;
        this.label_2.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(_args.power_2));
        this.label_2.getComponent("LabelUpdater").setColor(true == _args.powerUp ? new cc.color(145, 255, 92) : new cc.color(255, 112, 126));
        this.node.y = 1e3;
        this.node.opacity = 255;
        cc.tween(this.node).stop();
        cc.tween(this.node).to(.5, {
          position: cc.v2(0, 200)
        }, {
          easing: "elasticOut"
        }).delay(1).to(.2, {
          opacity: 0
        }).call(function() {
          Global.gui.remove(gameConfig.UIID.PowerChange);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  PreloadConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cdde6VZnOhL4J1PHV8MkUhM", "PreloadConfig");
    "use strict";
    var gameConfig = require("GameConfig");
    var data = [];
    data.push({
      url: gameConfig.PRELOADCONFIG.player.path,
      type: gameConfig.PRELOADCONFIG.player.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy01.path,
      type: gameConfig.PRELOADCONFIG.enemy01.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy02.path,
      type: gameConfig.PRELOADCONFIG.enemy02.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy03.path,
      type: gameConfig.PRELOADCONFIG.enemy03.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy04.path,
      type: gameConfig.PRELOADCONFIG.enemy04.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy05.path,
      type: gameConfig.PRELOADCONFIG.enemy05.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy06.path,
      type: gameConfig.PRELOADCONFIG.enemy06.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy07.path,
      type: gameConfig.PRELOADCONFIG.enemy07.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy08.path,
      type: gameConfig.PRELOADCONFIG.enemy08.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy09.path,
      type: gameConfig.PRELOADCONFIG.enemy09.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy10.path,
      type: gameConfig.PRELOADCONFIG.enemy10.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy11.path,
      type: gameConfig.PRELOADCONFIG.enemy11.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy12.path,
      type: gameConfig.PRELOADCONFIG.enemy12.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.enemy13.path,
      type: gameConfig.PRELOADCONFIG.enemy13.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.boss01.path,
      type: gameConfig.PRELOADCONFIG.boss01.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.boss02.path,
      type: gameConfig.PRELOADCONFIG.boss02.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.boss03.path,
      type: gameConfig.PRELOADCONFIG.boss03.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.car.path,
      type: gameConfig.PRELOADCONFIG.car.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.coupon.path,
      type: gameConfig.PRELOADCONFIG.coupon.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.smallPhone.path,
      type: gameConfig.PRELOADCONFIG.smallPhone.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.gift.path,
      type: gameConfig.PRELOADCONFIG.gift.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1001.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1002.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1003.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1004.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1004.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1005.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1005.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1006.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1006.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1007.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1007.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1008.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1008.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1009.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1009.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1010.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1010.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1011.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1011.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1012.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1012.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1013.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1013.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1014.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1014.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1015.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1015.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1016.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1016.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1017.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1017.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1018.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1018.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1019.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1019.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_1020.path,
      type: gameConfig.PRELOADCONFIG.ultimate_1020.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_2001.path,
      type: gameConfig.PRELOADCONFIG.ultimate_2001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_2002.path,
      type: gameConfig.PRELOADCONFIG.ultimate_2002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_2003.path,
      type: gameConfig.PRELOADCONFIG.ultimate_2003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3001.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3002.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3003.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3004.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3004.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3005.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3005.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3006.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3006.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3007.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3007.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3008.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3008.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3009.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3009.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3010.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3010.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3011.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3011.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3012.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3012.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_3013.path,
      type: gameConfig.PRELOADCONFIG.ultimate_3013.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1001.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1002.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1003.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1004.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1004.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1005.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1005.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1006.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1006.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1007.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1007.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1008.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1008.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1009.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1009.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1010.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1010.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1011.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1011.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1012.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1012.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1013.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1013.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1014.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1014.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1015.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1015.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1016.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1016.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1017.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1017.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1019.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1019.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_1020.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_1020.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_2001.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_2001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_2002.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_2002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_2003.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_2003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3001.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3002.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3003.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3005.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3005.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3006.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3006.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3007.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3007.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.ultimate_boom_3009.path,
      type: gameConfig.PRELOADCONFIG.ultimate_boom_3009.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.font_zh.path,
      type: gameConfig.PRELOADCONFIG.font_zh.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.font_en.path,
      type: gameConfig.PRELOADCONFIG.font_en.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.font_bmt.path,
      type: gameConfig.PRELOADCONFIG.font_bmt.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.scrollbackground_1001.path,
      type: gameConfig.PRELOADCONFIG.scrollbackground_1001.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.scrollbackground_1002.path,
      type: gameConfig.PRELOADCONFIG.scrollbackground_1002.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.scrollbackground_1003.path,
      type: gameConfig.PRELOADCONFIG.scrollbackground_1003.type
    });
    data.push({
      url: gameConfig.PRELOADCONFIG.scrollbackground_1004.path,
      type: gameConfig.PRELOADCONFIG.scrollbackground_1004.type
    });
    module.exports = data;
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  PreloadManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "2bafe/AmadLSqM/ZhGJqep3", "PreloadManager");
    "use strict";
    var PreloadConfig = require("PreloadConfig");
    var PreloadManager = cc.Class({
      properties: {
        _loadingControl: null,
        _loadList: [],
        _loadCount: 0,
        _loadedCount: 0,
        _curResUrl: ""
      },
      startLoad: function startLoad(_loadingControl) {
        this._loadingControl = _loadingControl;
        this._loadList = PreloadConfig;
        this._loadCount = this._loadList.length;
        this.loadRes();
      },
      loadRes: function loadRes() {
        if (this._loadList.length <= 0) this._loadingControl.loadResComplete(); else {
          var data = this._loadList.shift();
          if (Global.res.hasRes(data.url)) {
            this.loadCompleteCallback({
              message: "Duplicated asset"
            }, null);
            return;
          }
          this._loadingControl.updateHelpInf("Loading..." + data.url);
          if ("scene" == data.type) {
            var self = this;
            cc.director.preloadScene(data.url, function() {
              Global.res.loadedScene[data.url] = true;
              self._loadedCount++;
              self._loadingControl.updateProgress(self._loadedCount, self._loadCount);
              self.loadRes();
            });
          } else "spriteAtlas" == data.type ? Global.res.load(data.url, cc.SpriteAtlas, this.loadCompleteCallback.bind(this)) : Global.res.load(data.url, this.loadCompleteCallback.bind(this));
          this._curResUrl = data.url;
        }
      },
      loadCompleteCallback: function loadCompleteCallback(_error, _res) {
        this._loadedCount++;
        this._loadingControl.updateProgress(this._loadedCount, this._loadCount);
        _error ? this._loadingControl.updateHelpInf(_error.message) : this.parseResource(_res);
        this.loadRes();
      },
      parseResource: function parseResource(_res) {}
    });
    module.exports = PreloadManager;
    cc._RF.pop();
  }, {
    PreloadConfig: "PreloadConfig"
  } ],
  PromotionView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50dd1WfOatDBo5NFmmfzIV8", "PromotionView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        playRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u4eba\u7269\u6839\u8282\u70b9"
        },
        desNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u664b\u5347\u63cf\u8ff0\u8be6\u60c5"
        },
        desLayout: {
          type: cc.Node,
          default: null,
          tooltip: "\u664b\u5347\u9879\u5217\u8868"
        },
        promotionItemPreb: {
          type: cc.Prefab,
          default: null,
          tooltip: "\u664b\u5347\u8be6\u60c5\u9884\u5236\u4f53"
        },
        _args: null
      },
      onAdded: function onAdded(args) {
        Global.utils.logMessage("RewardsPanel1 onAdded:", args);
        this.reset();
        this._args = args;
        var animator = this.getComponent(cc.Animation);
        animator.on("finished", this.initUI, this);
        animator.play("rewardsPanel1", false);
        return true;
      },
      initUI: function initUI() {},
      onCloseUI: function onCloseUI() {
        Global.audio.playEffect("audio/click");
        this.reset();
        Global.gui.remove(gameConfig.UIID.PromotionPanel);
      },
      reset: function reset() {
        this._args = null;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  Rarity: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cc202FK3ZFHJKPiCxPYMwQG", "Rarity");
    "use strict";
    var EnumType = require("EnumType");
    var sfClass = cc.Class({
      name: "sfClass",
      properties: {
        desc: {
          default: "",
          displayName: "\u8bf4\u660e"
        },
        sfList: {
          type: [ cc.SpriteFrame ],
          default: []
        }
      }
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        sfGroup: {
          type: [ sfClass ],
          default: []
        }
      },
      getSpriteFrames: function getSpriteFrames(skillType) {
        void 0 === skillType && (skillType = EnumType.SKILL_TYPE.BULLET);
        return this.sfGroup[skillType];
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType"
  } ],
  ResManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "bc53cHN0IpN1Lwz9IqiFpsV", "ResManager");
    "use strict";
    var utils = require("Utils")();
    var self = null;
    var ResManager = function ResManager() {
      this.resetData();
    }, resMG = ResManager.prototype, g_instance = null;
    resMG.resetData = function() {
      self = this;
      this.resCache = new Map();
      utils.addMethod(resMG, "load", function(_url, _callback) {
        if (self.hasRes(_url)) {
          _callback(null, self.getRes(_url));
          return;
        }
        cc.resources.load(_url, function(_error, _res) {
          _res && self.setRes(_url, _res);
          _callback(_error, _res);
        });
      });
      utils.addMethod(resMG, "load", function(_url, _type, _callback) {
        if (self.hasRes(_url)) {
          _callback(null, self.getRes(_url));
          return;
        }
        cc.resources.load(_url, _type, function(_error, _res) {
          _res && self.setRes(_url, _res);
          _callback(_error, _res);
        });
      });
      utils.addMethod(resMG, "loadAsync", function(_url) {
        return new Promise(function(resolve, reject) {
          resMG.load(_url, function(_error, _res) {
            _error && console.warn("loadAsync error:", _error);
            resolve(_res);
          });
        });
      });
      utils.addMethod(resMG, "loadAsync", function(_url, _type) {
        return new Promise(function(resolve, reject) {
          resMG.load(_url, _type, function(_error, _res) {
            _error && console.warn("loadAsync error:", _error);
            resolve(_res);
          });
        });
      });
      utils.addMethod(resMG, "preloadDir", function(_path) {
        cc.resources.preloadDir(_path);
      });
      utils.addMethod(resMG, "preloadDir", function(_path, _type, _onProgress, _onComplete) {
        cc.resources.preloadDir(_path, _type, _onProgress, _onComplete);
      });
      utils.addMethod(resMG, "loadDir", function(_path) {
        cc.resources.loadDir(_path);
      });
      utils.addMethod(resMG, "loadDir", function(_path, _onComplete) {
        cc.resources.loadDir(_path, _onComplete);
      });
      utils.addMethod(resMG, "loadDir", function(_path, _type, _onProgress, _onComplete) {
        cc.resources.loadDir(_path, _type, _onProgress, _onComplete);
      });
      utils.addMethod(resMG, "release", function(_url) {
        cc.resources.release(_url);
        self.resCache["delete"](_url);
      });
      utils.addMethod(resMG, "release", function(_url, _type) {
        cc.resources.release(_url, _type);
        self.resCache["delete"](_url);
      });
    };
    resMG.getSpriteFrameFromAtlas = function(_atlas, _spriteName) {
      var atlas = this.getRes(_atlas);
      var frame = atlas.getSpriteFrame(_spriteName);
      return frame;
    };
    resMG.hasRes = function(_url) {
      return this.resCache.has(_url);
    };
    resMG.getRes = function(_url) {
      return this.resCache.get(_url);
    };
    resMG.setRes = function(_url, _res) {
      this.resCache.set(_url, _res);
    };
    resMG.release = function(url) {
      Global.utils.logMessage("Res.release:" + url);
      var bundle = cc.assetManager.getBundle("resources");
      if (bundle) {
        var asset = bundle.get(url);
        asset && this.releasePrefabtDepsRecursively(asset);
      }
    };
    resMG.releasePrefabtDepsRecursively = function(uuid) {
      if (uuid instanceof Asset) uuid.decRef(); else {
        var asset = assetManager.assets.get(uuid);
        asset && asset.decRef();
      }
    };
    module.exports = function() {
      g_instance || (g_instance = new ResManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    Utils: "Utils"
  } ],
  ResultView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3c353eEmBBOeohIDicLeYeW", "ResultView");
    "use strict";
    var gameConfig = require("GameConfig");
    var ANIMATION_NAMES = [ "Victory", "failed" ];
    var EnumType = require("EnumType");
    var ItemData = require("ItemData");
    cc.Class({
      extends: cc.Component,
      properties: {
        spineList: {
          type: [ sp.Skeleton ],
          default: []
        },
        titleNodeList: {
          type: [ cc.Node ],
          default: []
        },
        chapterTitleNode: {
          type: cc.Node,
          default: null
        },
        clearNode: {
          type: cc.Node,
          default: null
        },
        journeyNode: {
          type: cc.Node,
          default: null
        },
        rewardsNode: {
          type: cc.Node,
          default: null
        },
        rewardRootNode: {
          type: cc.Node,
          default: null
        },
        rewardItemPreb: {
          type: cc.Prefab,
          default: null
        },
        claimNode: {
          type: cc.Node,
          default: null
        },
        _args: null,
        _curIndex: 0,
        _belongsToCT: null,
        _rewardItems: []
      },
      onAdded: function onAdded(args) {
        this._args = args;
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {},
      onLoad: function onLoad() {
        var names = [ "Win", "failed" ];
        for (var index = 0; index < 2; index++) {
          var spine = this.spineList[index];
          var attachUtil = spine.attachUtil;
          var nodes = attachUtil.generateAttachedNodes(names[index]);
          var parent = nodes[0];
          parent.removeAllChildren();
          spine.node.active = false;
          var titleNode = this.titleNodeList[index];
          titleNode.removeFromParent();
          parent.addChild(titleNode);
          titleNode.setPosition(0, 0);
          titleNode.active = false;
        }
      },
      onEnable: function onEnable() {
        this.initUI();
      },
      initUI: function initUI() {
        this._rewardItems = [];
        this.rewardRootNode.removeAllChildren();
        var chapterData = Global.chapterManager.getChapterDataByLevel(Global.chapterManager.curChapter);
        if (chapterData) {
          var rewardConfigs = chapterData.rewardConfig.split("_");
          var victoryRewards = rewardConfigs[0].split(",");
          var defeatRewards = rewardConfigs[1].split(",");
          var resultRewards = this._args.gameResult == gameConfig.GAME_RESULT_TYPE.VICTORY ? victoryRewards : defeatRewards;
          for (var index = 0; index < resultRewards.length; index++) {
            var rewardConfig = resultRewards[index].split("|");
            var itemConfig = Global.bagManager.getItemConfig(rewardConfig[0]);
            var itemData = new ItemData();
            itemData.setData(null, itemConfig);
            itemData.count = rewardConfig[1];
            this._rewardItems.push(itemData);
            var rewardItem = cc.instantiate(this.rewardItemPreb);
            rewardItem.getComponent("BagItem").setData(itemData);
            this.rewardRootNode.addChild(rewardItem);
          }
          console.log("_rewardItems:", this._rewardItems);
        }
        var spine = this.spineList[this._args.gameResult];
        spine.setAnimation(0, ANIMATION_NAMES[this._args.gameResult], false);
        spine.node.active = this.titleNodeList[this._args.gameResult].active = true;
        var animaList = [];
        animaList.push(this.chapterTitleNode);
        animaList.push(this.clearNode);
        animaList.push(this.journeyNode);
        animaList.push(this.rewardsNode);
        animaList.push(this.claimNode);
        var _loop = function _loop(_index) {
          var node = animaList[_index];
          node.active = false;
          node.setScale(2, 2);
          var delay = .1 * _index;
          cc.tween(node).delay(delay).call(function() {
            node.active = true;
          }).to(.2, {
            scale: 1
          }).start();
        };
        for (var _index = 0; _index < animaList.length; _index++) _loop(_index);
      },
      onClickToggleBtn: function onClickToggleBtn(event, data) {
        this._curIndex = data;
      },
      onClickOkBtn: function onClickOkBtn() {
        var _this = this;
        var items = this._rewardItems.reverse();
        var args = {
          items: items,
          rewardType: EnumType.REWARD_TYPE.ITEM
        };
        var uicallBack = {
          onAdded: function onAdded(node, params) {
            Global.utils.logMessage("RewardsPanel onAdded");
            for (var index = 0; index < _this._rewardItems.length; index++) {
              var itemData = _this._rewardItems[index];
              itemData.itemId == Global.bagManager.STAMINA_ITEM_ID ? Global.roleData.updateStamina(parseInt(itemData.count)) : itemData.itemId == Global.bagManager.COIN_ITEM_ID && Global.roleData.updateCoin(parseInt(itemData.count));
            }
          },
          onRemoved: function onRemoved(node, params) {
            Global.utils.logMessage("RewardsPanel onRemoved");
            Global.gui.remove(gameConfig.UIID.ResultPanel);
          },
          onLoadFailure: function onLoadFailure() {
            Global.utils.logMessage("RewardsPanel onLoadFailure");
          }
        };
        Global.gui.open(gameConfig.UIID.RewardsPanel, args, uicallBack);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  ReviveView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0c2deLQfGVJ74FSs0ebou6Z", "ReviveView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        playerNode: {
          type: cc.Node,
          default: null
        },
        _args: null,
        _result: false,
        _belongsToCT: null
      },
      onAdded: function onAdded(args) {
        this._args = args;
        this._belongsToCT = args.belongsToCT;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: gameConfig.CONTROLS.REVIVE_CT
        });
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        args.result = this._result;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: this._belongsToCT
        });
      },
      onEnable: function onEnable() {
        this.playerNode.removeAllChildren();
        if (!this._args) return;
        var basicData = Global.basicAttributesManager.getConfigByID(this._args.roleData.roleId);
        var rolePreb = Global.res.getRes(basicData.path);
        var role = cc.instantiate(rolePreb);
        this.playerNode.addChild(role);
        var roleView = role.getComponent("RoleView");
        roleView.direction = gameConfig.DIRECTION_ENUM.LEFT;
        roleView.updateData(this, this._args.roleData, null);
        roleView.showBar();
        roleView.updateAllUI();
        var messages = basicData.victoryMessages;
        messages && roleView.playDialogueAnimation(messages);
      },
      onClicReviveBtn: function onClicReviveBtn() {
        Global.utils.logMessage("\u73a9\u5bb6\u9009\u62e9\u590d\u6d3b");
        this._result = true;
        this.closeUI();
      },
      onClicGiveUpBtn: function onClicGiveUpBtn() {
        Global.utils.logMessage("\u73a9\u5bb6\u9009\u62e9\u653e\u5f03\u590d\u6d3b");
        this._result = false;
        this.closeUI();
      },
      closeUI: function closeUI() {
        Global.gui.remove(gameConfig.UIID.RevivePanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  RewardsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "50b8d9XPSZG+qWBNCnghNRv", "RewardsView");
    "use strict";
    var gameConfig = require("GameConfig");
    var DEFAULT_HEIGHT = 310;
    var OFF_HEIGHT = 110;
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        contentNode: {
          type: cc.Node,
          default: null
        },
        scrollView: {
          type: cc.ScrollView,
          default: null
        },
        starSpine: {
          type: sp.Skeleton,
          default: null
        },
        sgSpine: {
          type: cc.Node,
          default: null
        },
        _args: null,
        _interval: null,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ],
        sgSpineList: [ cc.Node ],
        sgSpinePool: [ cc.Node ],
        layoutComp: cc.Layout,
        itemNode: cc.Node,
        coinNode: cc.Node,
        skillNode: cc.Node,
        clerkNode: cc.Node,
        itemCoinContainer: cc.Node,
        coinLabel: cc.Node,
        skillIcon: cc.Sprite,
        skillName: cc.Node,
        skillDesc: cc.Node,
        skillFlash: sp.Skeleton,
        titleLabel_1: cc.Node,
        titleLabel_2: cc.Node,
        atkLabel_1: cc.Node,
        atkLabel_2: cc.Node,
        atkLabel_3: cc.Node,
        defLabel_1: cc.Node,
        defLabel_2: cc.Node,
        defLabel_3: cc.Node,
        hpLabel_1: cc.Node,
        hpLabel_2: cc.Node,
        hpLabel_3: cc.Node
      },
      onAdded: function onAdded(args) {
        Global.utils.logMessage("RewardsPanel onAdded:", args);
        this.reset();
        this.rewardType = args.rewardType;
        this._args = args;
        this.roleData = this._args.roleData;
        var animator = this.getComponent(cc.Animation);
        animator.on("finished", this.initUI, this);
        animator.play("rewardsPanel", false);
        return true;
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.scrollView.content.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.scrollView.content.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
        while (this.sgSpineList.length > 0) {
          var _item2 = this.sgSpineList.pop();
          _item2.removeFromParent();
          this.sgSpinePool.push(_item2);
        }
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData) {
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData);
        this.scrollView.content.addChild(equipmentItem);
        return equipmentItem;
      },
      generateBagItem: function generateBagItem(_itemData) {
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        this.bagItemList.push(bagItem);
        bagItem.getComponent("BagItem").setData(_itemData);
        this.scrollView.content.addChild(bagItem);
        return bagItem;
      },
      generateSgItem: function generateSgItem(_parent) {
        var sgItem;
        sgItem = this.sgSpinePool.length > 0 ? this.sgSpinePool.pop() : cc.instantiate(this.sgSpine);
        this.sgSpineList.push(sgItem);
        _parent.addChild(sgItem);
        sgItem.active = false;
        return sgItem;
      },
      initUI: function initUI() {
        var _this = this;
        if (this.rewardType == EnumType.REWARD_TYPE.SKILL) {
          this.skillNode.active = true;
          this.skillFlash.setAnimation(0, "Advanced_1", false);
          var pathIcon = "icons/skillIcons/skill_" + this._args.talentData.skill.i18n;
          Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
            res && (_this.skillIcon.spriteFrame = res);
          });
          this.skillName.getComponent("LabelUpdater").setString(Global.languageManager.t("talent_name_" + this._args.talentData.skill.i18n));
          this.skillDesc.getComponent("RichTextUpdater").setContent("talent_des_" + this._args.talentData.skill.i18n);
        } else if (this.rewardType == EnumType.REWARD_TYPE.ITEM) {
          this.itemCoinContainer.active = true;
          this.itemNode.active = true;
          var svContent = this.scrollView.content;
          if (this._args.items.length < 5) {
            this.layoutComp.type = cc.Layout.Type.HORIZONTAL;
            this.layoutComp.left = 0;
          } else {
            this.layoutComp.type = cc.Layout.Type.GRID;
            this.layoutComp.left = 25;
            this.layoutComp.node.width = 1100;
          }
          this._interval = setInterval(function() {
            var material = this._args.items.pop();
            if (material) {
              var item;
              item = material.equipmentConfig ? this.generateEquipmentItem(material) : this.generateBagItem(material);
              this._args.items.length < 5 && item.setPosition(0, -120);
              var tempSgSpine = this.generateSgItem(item);
              svContent.getComponent(cc.Layout).updateLayout();
              svContent.children.length < 15 && svContent.children.length > 5 && (this.contentNode.height = this.contentNode.getChildByName("bg").height = svContent.getContentSize().height + OFF_HEIGHT);
              item.setScale(.5, .5);
              cc.tween(item).call(function() {
                tempSgSpine.active = true;
              }).to(.2, {
                scale: 1
              }, {
                easing: cc.easing.backOut
              }).start();
              0 == this._args.items.length && clearInterval(this._interval);
            } else clearInterval(this._interval);
          }.bind(this), 100);
          this.starSpine.setAnimation(0, this._args.items.length < 6 ? "Rewards_Star_Loop" : "Rewards_Star_Loop2", true);
        } else if (this.rewardType == EnumType.REWARD_TYPE.COIN) {
          this.itemCoinContainer.active = true;
          this.coinNode.active = true;
          this.coinNode.opacity = 0;
          cc.tween(this.coinNode).to(.2, {
            opacity: 255
          }).start();
          this.coinLabel.getComponent("LabelUpdater").setString("X " + this._args.coinValue);
        } else if (this.rewardType == EnumType.REWARD_TYPE.CLERK) {
          this.clerkNode.active = true;
          this.clerkNode.opacity = 0;
          cc.tween(this.clerkNode).to(.2, {
            opacity: 255
          }).start();
          var lastTalentData = this.getLastClerk();
          null == lastTalentData ? this.titleLabel_1.getComponent("LabelUpdater").setContent("talent_title_1000") : this.titleLabel_1.getComponent("LabelUpdater").setContent("talent_title_" + lastTalentData.clerk.id);
          this.titleLabel_2.getComponent("LabelUpdater").setContent("talent_title_" + this._args.talentData.clerk.id);
          this.atkLabel_1.getComponent("LabelUpdater").setString(this.roleData.getStaticData().strength - parseInt(this._args.talentData.clerk.attack));
          this.atkLabel_2.getComponent("LabelUpdater").setString(this.roleData.getStaticData().strength);
          this.atkLabel_3.getComponent("LabelUpdater").setString("+" + this._args.talentData.clerk.attack);
          this.defLabel_1.getComponent("LabelUpdater").setString(this.roleData.getStaticData().armor - parseInt(this._args.talentData.clerk.armor));
          this.defLabel_2.getComponent("LabelUpdater").setString(this.roleData.getStaticData().armor);
          this.defLabel_3.getComponent("LabelUpdater").setString("+" + this._args.talentData.clerk.armor);
          this.hpLabel_1.getComponent("LabelUpdater").setString(this.roleData.getStaticData().basic_hp - parseInt(this._args.talentData.clerk.hp));
          this.hpLabel_2.getComponent("LabelUpdater").setString(this.roleData.getStaticData().basic_hp);
          this.hpLabel_3.getComponent("LabelUpdater").setString("+" + this._args.talentData.clerk.hp);
        }
      },
      getLastClerk: function getLastClerk() {
        var startIndex = this._args.talentData.level - 1;
        for (var i = startIndex; i >= 0; i--) {
          var talentData = Global.talentManager.getTalentData(i);
          if (talentData && null != talentData.clerk) return talentData;
        }
        return null;
      },
      onCloseUI: function onCloseUI() {
        Global.audio.playEffect("audio/click");
        if (true == this._args.fromDecompose) {
          var power = this.roleData.getPower();
          if (power != this.roleData.currentPower) {
            var args = {};
            args.power_1 = this.roleData.currentPower;
            args.power_2 = power;
            args.powerUp = power >= this.roleData.currentPower;
            Global.gui.open(gameConfig.UIID.PowerChange, args);
            this.roleData.currentPower = this.roleData.getPower();
          }
        }
        this.reset();
        Global.gui.remove(gameConfig.UIID.RewardsPanel);
      },
      reset: function reset() {
        this._args = null;
        this._interval && clearInterval(this._interval);
        this.contentNode.height = this.contentNode.getChildByName("bg").height = DEFAULT_HEIGHT;
        this.clearItems();
        this.clerkNode.active = false;
        this.coinNode.active = false;
        this.skillNode.active = false;
        this.itemNode.active = false;
        this.itemCoinContainer.active = false;
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  RichTextUpdater: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c6b65CoEUZGPY1KwOiJVjoc", "RichTextUpdater");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        richText: cc.RichText,
        key: "",
        args: [ cc.String ]
      },
      onLoad: function onLoad() {
        cc.systemEvent.on("language-changed", this.updateText, this);
        "" != this.key && this.updateText();
      },
      setContent: function setContent(_key, _args) {
        this.key = _key;
        this.args = _args;
        this.updateText();
      },
      onDestroy: function onDestroy() {
        cc.systemEvent.off("language-changed", this.updateText, this);
      },
      updateText: function updateText() {
        var text = Global.languageManager.t(this.key, this.args);
        try {
          var font = Global.res.getRes(gameConfig.PRELOADCONFIG["font_" + Global.languageManager.currentLang].path);
          font && (this.richText.font = font);
        } catch (error) {
          console.warn("\u66f4\u65b0" + Global.languageManager.currentLang + "\u5b57\u4f53\u5931\u8d25\uff1a", error);
        }
        this.richText.string = text;
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  RogueItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f7ce3WvKZdAI68Xbk7XuN5W", "RogueItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    var SpineBase = require("SpineBase");
    cc.Class({
      extends: cc.Component,
      properties: {
        glowBackSpine: {
          type: SpineBase,
          default: null
        },
        glowSpine: {
          type: SpineBase,
          default: null
        },
        spine: {
          type: SpineBase,
          default: null
        },
        animation: {
          type: cc.Animation,
          default: null
        },
        bg: {
          type: cc.Sprite,
          default: null
        },
        bgSpriteFrameList: [ cc.SpriteFrame ],
        icon: {
          type: cc.Sprite,
          default: null
        },
        nameLab: {
          type: cc.Node,
          default: null
        },
        desLab: {
          type: cc.Node,
          default: null
        },
        ownedLab: {
          type: cc.Label,
          default: null
        },
        _isSelected: false,
        _roleData: null,
        _skillData: null,
        _time: 0
      },
      onLoad: function onLoad() {
        this._isSelected = false;
        this.show(this._time);
        this.spine.animationCallBack = function() {
          var worldPos = this.icon.node.parent.convertToWorldSpaceAR(this.icon.node.getPosition());
          Global.gui.get(gameConfig.UIID.RoguePanel).getComponent("RogueView").selectItem(this.node, worldPos, this.selectItemId);
        }.bind(this);
      },
      onEnable: function onEnable() {
        this.node.on(cc.Node.EventType.MOUSE_ENTER, this.onEnter, this);
        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.onLeave, this);
        this.glowBackSpine.node.active = this.glowSpine.node.active = false;
      },
      updateData: function updateData(roleData, skillData, time) {
        this._roleData = roleData;
        this._skillData = skillData;
        this._time = time;
        this.nameLab.getComponent("RichTextUpdater").setContent("skill_" + skillData.id + "_name");
        var valueListStr = Global.languageManager.i18nData["skill_" + skillData.id + "_desc"].valueList;
        var valueList = null;
        var result = [];
        if ("" != valueListStr) {
          valueList = valueListStr.split(",");
          for (var i = 0; i < valueList.length; i++) {
            var item = valueList[i];
            item = item.split("|");
            var value = Math.floor(roleData.getStaticData()[item[1]] * Number(item[0]) * .01);
            result.push(value);
          }
          this.desLab.getComponent("RichTextUpdater").setContent("skill_" + skillData.id + "_desc", result);
        } else this.desLab.getComponent("RichTextUpdater").setContent("skill_" + skillData.id + "_desc");
        this.ownedLab.string = "Owned:" + (void 0 != roleData.ownSkills[skillData.id] ? roleData.ownSkills[skillData.id].length : 0);
        var self = this;
        this.bg.spriteFrame = this.bgSpriteFrameList[skillData.rarity];
        var pathIcon = "icons/skillIcons/skill_" + skillData.id;
        Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
          res && (self.icon.spriteFrame = res);
        });
      },
      show: function show(time) {
        var _this = this;
        void 0 === time && (time = 0);
        this.animation.node.active = false;
        cc.tween(this.node).delay(time).call(function() {
          _this.animation.node.active = true;
          _this.playAnimation("rogueItem");
          if (_this._skillData.rarity == EnumType.RARE_TYPE.EPIC || _this._skillData.rarity == EnumType.RARE_TYPE.LEGENDARY) {
            _this.glowBackSpine.node.active = _this.glowSpine.node.active = true;
            var animName = _this._skillData.rarity == EnumType.RARE_TYPE.EPIC ? "Purple" : "Orange";
            _this.glowBackSpine.playAnimation(animName, true);
            _this.glowSpine.playAnimation(animName, false);
          }
        }).start();
      },
      playAnimation: function playAnimation(animName) {
        this.animation.play(animName);
      },
      onClickBtn: function onClickBtn() {
        if (this._isSelected) return;
        this._isSelected = true;
        this.selectItemId = this._skillData.id;
        Global.gui.get(gameConfig.UIID.RoguePanel).getComponent("RogueView").disabledAllItems();
        Global.utils.logMessage("Get skills:" + this._skillData.id);
        this.playAnimation("QBomb");
        this.spine.playAnimation("animation", false);
        Global.skillManager.addSkill(this._skillData.id, this._roleData);
        null == Global.skillManager.skillFlag && (Global.skillManager.skillFlag = true);
      },
      onEnter: function onEnter() {
        this.animation.node.setScale(1.05, 1.05);
      },
      onLeave: function onLeave() {
        this.animation.node.setScale(1, 1);
      },
      onDisable: function onDisable() {
        this.node.off(cc.Node.EventType.MOUSE_ENTER, this.onEnter, this);
        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.onLeave, this);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    SpineBase: "SpineBase"
  } ],
  RogueView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "38d68IXcGBPhJjywrCbXA9Z", "RogueView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        titleLab: {
          type: cc.Label,
          default: null
        },
        rogueItemPreb: {
          type: cc.Prefab,
          default: null
        },
        layoutRootNode: {
          type: cc.Node,
          default: null
        },
        rerollBtn: {
          type: cc.Button,
          default: null
        },
        getallBtn: {
          type: cc.Button,
          default: null
        },
        rerollLab: {
          type: cc.RichText,
          default: null
        },
        getallLab: {
          type: cc.RichText,
          default: null
        },
        _type: null,
        _roleData: null,
        _skills: null,
        _belongsToCT: null
      },
      onAdded: function onAdded(args) {
        this._type = args.type;
        this._roleData = args.roleData;
        this._belongsToCT = args.belongsToCT;
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: gameConfig.CONTROLS.ROGUE_CT
        });
        this.titleLab.string = args.type == gameConfig.ROGUE_PANEL_TYPE.SHENQI ? "ShenQi" : "Reward";
        this.refreshItems(true);
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {
        Global.gui.get(gameConfig.UIID.GuiPanel).getComponent("GuiView").updateData({
          controls: this._belongsToCT
        });
      },
      disabledAllItems: function disabledAllItems() {
        for (var i = 0; i < this.itemList.length; i++) this.itemList[i].getComponent(cc.Button).interactable = false;
      },
      selectItem: function selectItem(_item, _worldPos, _skillId) {
        var _this = this;
        for (var i = 0; i < this.itemList.length; i++) {
          var item = this.itemList[i];
          item == _item ? function() {
            var abilityUps = function() {
              var skillData = Global.skillManager.getSkillConfig(_skillId);
              if (skillData && "" != skillData.ability_up) {
                var ability_ups = skillData.ability_up.split("|");
                if (0 == ability_ups[0]) {
                  var msg = Global.languageManager.i18nData["ability_up_" + ability_ups[1]];
                  msg && msg.content && cc.director.GlobalEvent.emit(gameConfig.GAME_EVENT.AbilityUp, {
                    roleId: this._roleData.roleId,
                    msg: msg.content
                  });
                }
              }
            }.bind(_this);
            var actions = [ cc.delayTime(.2) ];
            var roleView = _this._roleData.node.getComponent("RoleView");
            var hasCombineSkill = roleView && roleView._combineArr && roleView._isMergeAnimation;
            hasCombineSkill ? actions.push(cc.callFunc(function() {
              Global.gui.get(gameConfig.UIID.BattlePanel).getComponent("BattleView").showRogueItemEffect(_skillId, _worldPos, function() {
                abilityUps();
                var uiArgs = {
                  combineArr: roleView._combineArr
                };
                var uicallBack = {
                  onRemoved: function onRemoved(node, params) {
                    console.log("UIID.SkillMerge onRemoved");
                    roleView._combineArr = null;
                    roleView._isMergeAnimation = false;
                    _this.onCloseUI();
                  }
                };
                Global.gui.open(gameConfig.UIID.SkillMerge, uiArgs, uicallBack);
              });
            })) : actions.push(cc.callFunc(function() {
              Global.gui.get(gameConfig.UIID.BattlePanel).getComponent("BattleView").showRogueItemEffect(_skillId, _worldPos, abilityUps);
            }));
            actions.push(cc.fadeTo(.2, 0));
            hasCombineSkill || actions.push(cc.callFunc(function() {
              _this.onCloseUI();
            }));
            item.runAction(cc.sequence(actions));
          }() : cc.tween(item).to(.2, {
            opacity: 0
          }).start();
        }
      },
      refreshItems: function refreshItems(_isNew) {
        void 0 === _isNew && (_isNew = false);
        this.layoutRootNode.removeAllChildren();
        this._skills = this._type == gameConfig.ROGUE_PANEL_TYPE.ROGUE ? Global.skillManager.getRandomSkills(3, _isNew, this._roleData) : Global.skillManager.getRandomMagic_2(2, _isNew, this._roleData);
        globalThis.hasOwnProperty("temp_rogue_list") && globalThis.temp_rogue_list.length && (this._skills = globalThis.temp_rogue_list);
        this.itemList = [];
        for (var index = 0; index < this._skills.length; index++) {
          var skill = this._skills[index];
          var item = cc.instantiate(this.rogueItemPreb);
          item.getComponent("RogueItem").updateData(this._roleData, skill, .05 * index);
          this.layoutRootNode.addChild(item);
          this.itemList.push(item);
        }
      },
      getMoneyItem: function getMoneyItem(_skillId) {
        var item = null;
        for (var index = 0; index < this.itemList.length; index++) {
          var rogueItem = this.itemList[index];
          if (rogueItem) {
            var itemCtrl = rogueItem.getComponent("RogueItem");
            if (itemCtrl && itemCtrl._skillData.id == _skillId) {
              item = rogueItem;
              break;
            }
          }
        }
        return item;
      },
      onClickReRollBtn: function onClickReRollBtn() {
        Global.utils.logMessage("onClickReRollBtn");
        this.refreshItems();
      },
      onClickGetAllBtn: function onClickGetAllBtn() {
        Global.utils.logMessage("onClickGetAllBtn");
        for (var index = 0; index < this._skills.length; index++) {
          var skill = this._skills[index];
          Global.utils.logMessage("Get skills:" + skill.id);
          Global.skillManager.addSkill(skill.id, this._roleData);
        }
        this.onCloseUI();
      },
      onCloseUI: function onCloseUI() {
        Global.gui.remove(gameConfig.UIID.RoguePanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  RoleAnimatorSpine: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e8a78uohcVEqol7SeEFJMJt", "RoleAnimatorSpine");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorSpine_1 = require("../../animator/AnimatorSpine");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var RoleAnimatorSpine = function(_super) {
      __extends(RoleAnimatorSpine, _super);
      function RoleAnimatorSpine() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.onAttackComplete = null;
        _this.onDeathComplete = null;
        _this.trackEventCallBack = null;
        return _this;
      }
      RoleAnimatorSpine.prototype.onTrack = function(trackEntry, event) {
        this.trackEventCallBack && this.trackEventCallBack(trackEntry, event);
      };
      RoleAnimatorSpine.prototype.playAnimation = function(animName, loop) {
        if (animName) {
          var name = animName;
          this._spine.setAnimation(0, name, loop);
        } else this._spine.clearTrack(0);
      };
      RoleAnimatorSpine = __decorate([ ccclass ], RoleAnimatorSpine);
      return RoleAnimatorSpine;
    }(AnimatorSpine_1.default);
    exports.default = RoleAnimatorSpine;
    cc._RF.pop();
  }, {
    "../../animator/AnimatorSpine": "AnimatorSpine"
  } ],
  RoleData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4fdf3ZeCM1HmZ9eu4rPv7Ki", "RoleData");
    "use strict";
    var BulletData = require("BulletData");
    var UltimateAbilityData = require("UltimateAbilityData");
    var EnumType = require("EnumType");
    var BattleConfig = require("BattleConfig");
    var SkillData = require("SkillData");
    var gameConfig = require("GameConfig");
    var RoleData = cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      getTalentStorageData: function getTalentStorageData() {
        return this.talentIndexList;
      },
      getEquipmentStorageData: function getEquipmentStorageData() {
        var result = [];
        for (var rarity in this.bag[EnumType.BAG_TYPE.EQUIPMENT]) {
          var rarityList = this.bag[EnumType.BAG_TYPE.EQUIPMENT][rarity];
          for (var i = 0; i < rarityList.length; i++) {
            var equipmentData = rarityList[i];
            result.push({
              equipmentId: equipmentData.equipmentId,
              equipmentRarity: equipmentData.rarity,
              equipmentLevel: equipmentData.level,
              equipmentSlotPos: equipmentData.slotPos
            });
          }
        }
        for (var _i = 0; _i < this.equipmentList.length; _i++) {
          var _equipmentData = this.equipmentList[_i];
          result.push({
            equipmentId: _equipmentData.equipmentId,
            equipmentRarity: _equipmentData.rarity,
            equipmentLevel: _equipmentData.level,
            equipmentSlotPos: _equipmentData.slotPos
          });
        }
        return result;
      },
      getBagItemStorageData: function getBagItemStorageData() {
        var result = [];
        for (var rarity in this.bag[EnumType.BAG_TYPE.ITEM]) {
          var rarityList = this.bag[EnumType.BAG_TYPE.ITEM][rarity];
          for (var i = 0; i < rarityList.length; i++) {
            var bagItemData = rarityList[i];
            result.push({
              bagItemId: bagItemData.itemId,
              bagItemCount: bagItemData.count
            });
          }
        }
        return result;
      },
      addMoney: function addMoney(_value, _skillId) {
        this.currentMoney += _value || this.data.income;
        this.updateMoneyCallback && this.updateMoneyCallback(_value, _skillId);
      },
      getPower: function getPower() {
        var result = 0;
        result += 2 * parseInt(this.getStaticData().basic_hp);
        result += 80 * parseInt(this.getStaticData().strength);
        result += 240 * parseInt(this.getStaticData().armor);
        for (var i = 0; i < this.equipmentList.length; i++) {
          var equipment = this.equipmentList[i];
          result += Global.equipmentManager.getEquipmentPower(equipment);
        }
        return result;
      },
      updateStaticData: function updateStaticData() {
        this.staticData = Global.utils.deepClone(this.basicConfig);
        for (var t = 0; t < this.talentIndexList.length; t++) {
          var talentIndex = this.talentIndexList[t];
          var talentData = Global.talentManager.getTalentData(t + 1);
          switch (talentIndex) {
           case EnumType.TALENT_TYPE.HP:
            this.staticData.basic_hp += parseInt(talentData.hp);
            break;

           case EnumType.TALENT_TYPE.ATTACK:
            this.staticData.strength += parseInt(talentData.attack);
            break;

           case EnumType.TALENT_TYPE.ARMOR:
            this.staticData.armor += parseInt(talentData.armor);
          }
          if (null != talentData.clerk) {
            this.staticData.basic_hp += parseInt(talentData.clerk.hp);
            this.staticData.strength += parseInt(talentData.clerk.attack);
            this.staticData.armor += parseInt(talentData.clerk.armor);
          }
          null != talentData.skill && talentData.skill.propertyType == EnumType.TALENT_PROPERTY_TYPE.BATTLE && (this.staticData[talentData.skill.property] += parseInt(talentData.skill.propertyValue));
        }
        for (var i = 0; i < this.equipmentList.length; i++) {
          var equipment = this.equipmentList[i];
          if (equipment.constantProperty) for (var k = 0; k < equipment.constantProperty.length; k++) {
            var property = equipment.constantProperty[k];
            this.staticData[property.key] = property.value;
          }
          if (equipment.baseProperty) for (var j = 0; j < equipment.baseProperty.length; j++) {
            var _property = equipment.baseProperty[j];
            this.staticData[_property.key] += parseInt(_property.value);
          }
        }
      },
      getStaticData: function getStaticData() {
        null == this.staticData && this.updateStaticData();
        return this.staticData;
      },
      resetData: function resetData() {
        this.data = null;
        this.data = Global.utils.deepClone(this.basicConfig);
        for (var t = 0; t < this.talentIndexList.length; t++) {
          var talentIndex = this.talentIndexList[t];
          var talentData = Global.talentManager.getTalentData(t + 1);
          switch (talentIndex) {
           case EnumType.TALENT_TYPE.HP:
            this.data.basic_hp += parseInt(talentData.hp);
            break;

           case EnumType.TALENT_TYPE.ATTACK:
            this.data.strength += parseInt(talentData.attack);
            break;

           case EnumType.TALENT_TYPE.ARMOR:
            this.data.armor += parseInt(talentData.armor);
          }
          if (null != talentData.clerk) {
            this.data.basic_hp += parseInt(talentData.clerk.hp);
            this.data.strength += parseInt(talentData.clerk.attack);
            this.data.armor += parseInt(talentData.clerk.armor);
          }
          null != talentData.skill && talentData.skill.propertyType == EnumType.TALENT_PROPERTY_TYPE.BATTLE && (this.data[talentData.skill.property] += parseInt(talentData.skill.propertyValue));
        }
        for (var i = 0; i < this.equipmentList.length; i++) {
          var equipment = this.equipmentList[i];
          if (equipment.constantProperty) for (var k = 0; k < equipment.constantProperty.length; k++) {
            var property = equipment.constantProperty[k];
            this.data[property.key] = property.value;
          }
          if (equipment.baseProperty) for (var j = 0; j < equipment.baseProperty.length; j++) {
            var _property2 = equipment.baseProperty[j];
            this.data[_property2.key] += _property2.value;
          }
        }
        this.initBullets();
        for (var key in this.baseBulletDataList) {
          var bulletData = this.baseBulletDataList[key];
          bulletData.resetDamage();
        }
        this.ultimateAbility.updateTargetData(this.currentEnemy);
      },
      getCurrentUltimateAbilityId: function getCurrentUltimateAbilityId() {
        for (var i = 0; i < this.equipmentList.length; i++) {
          var equipment = this.equipmentList[i];
          if (equipment.slot == EnumType.EQUIPMENT_SLOT_POS.WEAPON) return equipment.equipmentConfig.ultimate_type;
        }
        return null;
      },
      resetAll: function resetAll() {
        this.additionalProperties = [];
        this.eventsDict = {};
        this.enchancementDict = {};
        this.timer = Date.now();
        this.timer1Sec = Date.now();
        this.timer1Min = Date.now();
        this.ultimateAbility || (this.ultimateAbility = new UltimateAbilityData());
        var ultimateAbilityId = this.getCurrentUltimateAbilityId();
        null == ultimateAbilityId ? this.ultimateAbility.setData(EnumType.ULTIMATE_ABILITY_TYPE.TYPE_1, this) : this.ultimateAbility.setData(ultimateAbilityId, this);
        this.baseBulletDataList = {};
        this.baseBulletDataList[EnumType.BULLET_TYPE.STONE] = new BulletData();
        this.baseBulletDataList[EnumType.BULLET_TYPE.STONE].setData(EnumType.BULLET_TYPE.STONE, this);
        this.baseBulletDataList[EnumType.BULLET_TYPE.AXE] = new BulletData();
        this.baseBulletDataList[EnumType.BULLET_TYPE.AXE].setData(EnumType.BULLET_TYPE.AXE, this);
        this.baseBulletDataList[EnumType.BULLET_TYPE.BRAIN] = new BulletData();
        this.baseBulletDataList[EnumType.BULLET_TYPE.BRAIN].setData(EnumType.BULLET_TYPE.BRAIN, this);
        this.baseBulletDataList[EnumType.BULLET_TYPE.MUSCLE] = new BulletData();
        this.baseBulletDataList[EnumType.BULLET_TYPE.MUSCLE].setData(EnumType.BULLET_TYPE.MUSCLE, this);
        this.baseBulletDataList[EnumType.BULLET_TYPE.BLEED] = new BulletData();
        this.baseBulletDataList[EnumType.BULLET_TYPE.BLEED].setData(EnumType.BULLET_TYPE.BLEED, this);
        this.baseBulletDataList[EnumType.BULLET_TYPE.ICE] = new BulletData();
        this.baseBulletDataList[EnumType.BULLET_TYPE.ICE].setData(EnumType.BULLET_TYPE.ICE, this);
        this.resetData();
        this.updateStaticData();
        this.stunTime = 0;
        this.stunStartTimer = 0;
        this.currentHp = this.getStaticData().basic_hp;
        this.currentEnergy = 0;
        this.minCurrentEnergy = 0;
        this.overdraw = 0;
        this.timeoutIds = [];
        this.rebornCount = 1;
        this.rebornCountMax = 1;
        this.rebornRate = .5;
        this.ownSkills = {};
        this.bag[EnumType.BAG_TYPE.SKILL] = {};
        this.bag[EnumType.BAG_TYPE.MAGIC] = {};
        this.ownSubSkills = [];
        this.stealBullets = [];
        this.removeBullets = [];
        this.enhancedDamage = [];
        this.enhancedCrit = [];
        this.damageReduction = [];
        this.currentMoney = 0;
        this.boostChanceScore = 0;
        if ("" != this.basicConfig.skills) {
          var skillsArr = this.basicConfig.skills.split(",");
          for (var i = 0; i < skillsArr.length; i++) {
            var skillItem = skillsArr[i];
            if (skillItem.indexOf("|") >= 0) {
              var skillItemArr = skillItem.split("|");
              var skillCount = skillItemArr[1];
              for (var j = 0; j < skillCount; j++) Global.skillManager.addSkill(skillItemArr[0], this);
            } else Global.skillManager.addSkill(skillItem, this);
          }
          this.getCurrentProperties();
        }
        var skillsCount = parseInt(this.basicConfig.random_skill_count);
        if (skillsCount > 0) {
          var skills = Global.skillManager.getRandomSkills(skillsCount, true, this);
          for (var _i2 = 0; _i2 < skills.length; _i2++) Global.skillManager.addSkill(skills[_i2].id, this);
        }
        for (var _i3 = 0; _i3 < this.equipmentList.length; _i3++) {
          var equipment = this.equipmentList[_i3];
          for (var _j = 0; _j < equipment.skills.length; _j++) {
            var skillId = equipment.skills[_j];
            Global.skillManager.addSkill(skillId, this);
          }
        }
      },
      reborn: function reborn() {
        if (this.rebornCount <= 0) return;
        this.getCurrentProperties();
        this.currentHp = this.data.basic_hp * this.rebornRate;
        this.rebornCount--;
        if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.REBORN)) for (var i = 0; i < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.REBORN].length; i++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.REBORN][i];
          this.eventListener(event);
        }
      },
      resetState: function resetState() {
        this.getCurrentProperties();
        this.currentHp = this.data.basic_hp;
      },
      recoveryStamina: function recoveryStamina() {
        var recoveryInternal = 108e4;
        recoveryInternal = Math.round(recoveryInternal / (.01 * this.data.stamina_recovery));
        if (0 != this.staminaRecoveryTimer) {
          var recoveryCount = Math.floor((Global.networkTimer - this.staminaRecoveryTimer) / recoveryInternal);
          var remainTimer = Math.floor((Global.networkTimer - this.staminaRecoveryTimer) % recoveryInternal);
          this.staminaRecoveryTimer = Global.networkTimer - remainTimer;
          if (this.currentStamina + recoveryCount > this.data.stamina_max) {
            recoveryCount = this.data.stamina_max - this.currentStamina;
            if (recoveryCount <= 0 && this.currentStamina >= this.data.stamina_max) {
              this.staminaRecoveryTimer = 0;
              var storageData = Global.roleData.getAdditionalData();
              Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
            }
          }
          recoveryCount > 0 && this.updateStamina(recoveryCount, true);
        }
      },
      updateStamina: function updateStamina(_value) {
        if (_value < 0 && this.currentStamina + _value < 0) return;
        _value < 0 && Global.taskManager.updateProgress(EnumType.TASK_TYPE.COST_STAMINA, -1 * _value);
        this.currentStamina += _value;
        if (this.currentStamina < Global.roleData.data.stamina_max) {
          this.staminaRecoveryTimer = Global.networkTimer;
          var storageData = this.getAdditionalData();
          Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
          this.updateTopUICallback && this.updateTopUICallback();
        } else {
          this.staminaRecoveryTimer = 0;
          var _storageData = this.getAdditionalData();
          Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, _storageData);
          this.updateTopUICallback && this.updateTopUICallback();
        }
      },
      updateCoin: function updateCoin(_coin) {
        _coin > 0 && true == Global.vipManager.vipData.hasPermanent && (_coin += _coin * Global.vipManager.PERMANENT_COIN_RATE);
        this.coin += _coin;
        var storageData = this.getAdditionalData();
        Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
        this.updateTopUICallback && this.updateTopUICallback();
      },
      updateDiamond: function updateDiamond(_diamond) {
        this.diamond += _diamond;
        var storageData = this.getAdditionalData();
        Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
        this.updateTopUICallback && this.updateTopUICallback();
      },
      getAdditionalData: function getAdditionalData() {
        var data = {};
        data.stamina = this.currentStamina;
        data.coin = this.coin;
        data.diamond = this.diamond;
        data.staminaRecoveryTimer = this.staminaRecoveryTimer;
        data.staminaRemainCount_ad = this.staminaRemainCount_ad;
        data.staminaRemainCount_diamond = this.staminaRemainCount_diamond;
        return data;
      },
      updateAdditionalData: function updateAdditionalData(_data) {
        this.currentStamina = _data.stamina || this.basicConfig.stamina_max;
        this.coin = null == _data.coin ? 0 : _data.coin;
        this.diamond = null == _data.diamond ? 0 : _data.diamond;
        this.staminaRemainCount_ad = null == _data.staminaRemainCount_ad ? 4 : _data.staminaRemainCount_ad;
        this.staminaRemainCount_diamond = null == _data.staminaRemainCount_diamond ? 4 : _data.staminaRemainCount_diamond;
        this.staminaRecoveryTimer = null == _data.staminaRecoveryTimer ? 0 : _data.staminaRecoveryTimer;
      },
      initData: function initData(_id) {
        this.roleId = _id;
        this.basicConfig = Global.basicAttributesManager.getConfigByID(_id);
        this.sortValue = {};
        this.sortValue["strength"] = 0;
        this.sortValue["basic_hp"] = 1;
        this.bag = {};
        this.bag[EnumType.BAG_TYPE.EQUIPMENT] = {};
        this.bag[EnumType.BAG_TYPE.ITEM] = {};
        this.equipmentList = [];
        this.talentLevel = 0;
        this.talentIndexList = [];
        this.coin = 0;
        this.staminaRemainCount_ad = 0;
        this.staminaRemainCount_diamond = 0;
        this.stamina_max = this.basicConfig.stamina_max;
        this.stamina_recovery = this.basicConfig.stamina_recovery;
        this.skill_reroll_count = this.basicConfig.skill_reroll_count;
        this.shop_restock_count = this.basicConfig.shop_restock_count;
        this.raid_trash_coin = this.basicConfig.raid_trash_coin;
        this.raid_boss_coin = this.basicConfig.raid_boss_coin;
        this.resetAll();
        this.currentPower = this.getPower();
      },
      getSkillEffect: function getSkillEffect() {
        var result = [];
        for (var skillId in this.ownSkills) if (Object.hasOwnProperty.call(this.ownSkills, skillId)) {
          var ownSkills = this.ownSkills[skillId];
          for (var index = 0; index < ownSkills.length; index++) {
            var skillSet = ownSkills[index];
            "" != skillSet.config.effect && result.push(skillSet.config.effect);
          }
        }
        return result;
      },
      spendMoney: function spendMoney(_money) {
        this.currentMoney -= _money;
        if (_money > 0 && true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.SPEND_MONEY)) for (var i = 0; i < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.SPEND_MONEY].length; i++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.SPEND_MONEY][i];
          this.eventListener(event, _money);
        }
        this.updateMoneyCallback && this.updateMoneyCallback();
      },
      setEnemy: function setEnemy(_roleData) {
        this.currentEnemy = _roleData;
        this.updateBullets();
        this.ultimateAbility.updateTargetData(this.currentEnemy);
      },
      removeEnchancementEffect: function removeEnchancementEffect(_skillData) {
        if (true == this.enchancementDict.hasOwnProperty(_skillData.property)) {
          var index = this.enchancementDict[_skillData.property].indexOf(_skillData);
          index >= 0 && this.enchancementDict[_skillData.property].splice(index, 1);
        }
      },
      updateEnchancementEffect: function updateEnchancementEffect(_skillData) {
        false == this.enchancementDict.hasOwnProperty(_skillData.property) && (this.enchancementDict[_skillData.property] = []);
        this.enchancementDict[_skillData.property].push(_skillData);
      },
      removeEvent: function removeEvent(_skillData) {
        if (true == this.eventsDict.hasOwnProperty(_skillData.condition)) {
          var index = this.eventsDict[_skillData.condition].indexOf(_skillData);
          index >= 0 && this.eventsDict[_skillData.condition].splice(index, 1);
        }
      },
      updateEvent: function updateEvent(_skillData) {
        false == this.eventsDict.hasOwnProperty(_skillData.condition) && (this.eventsDict[_skillData.condition] = []);
        _skillData.initialValue = 0;
        _skillData.currentTriggerCount = 0;
        _skillData.eventId = Date.now() + 1e3 * Math.random();
        this.eventsDict[_skillData.condition].push(_skillData);
        if (_skillData.conditionValueType == EnumType.VALUE_TYPE.RATE) {
          var result = 0;
          for (var i = 0; i < this.eventsDict[_skillData.condition].length; i++) {
            var event = this.eventsDict[_skillData.condition][i];
            event.initialValue > result && 1058 != event.skillId && (result = event.initialValue);
          }
          _skillData.initialValue = result;
        }
        _skillData.condition == EnumType.EVENT_TRIGGER_TYPE.INSTANT && this.eventListener(_skillData);
      },
      removeProperty: function removeProperty(_skillData) {
        var index = this.additionalProperties.indexOf(_skillData);
        index >= 0 && this.additionalProperties.splice(index, 1);
      },
      updateProperty: function updateProperty(_skillData) {
        if (_skillData.propertyType == EnumType.PROPERTY_TYPE.STEAL_COPY_RANDOM_BULLET) {
          var bulletCount = _skillData.getValue();
          for (var i = 0; i < bulletCount; i++) if (this.currentEnemy.data.bullets.length > 0) {
            var randomIndex = Math.round(Math.random(0, this.currentEnemy.data.bullets.length - 1));
            var bulletDataArr = this.currentEnemy.data.bullets.splice(randomIndex, 1);
            this.stealBullets.push(bulletDataArr[0].type);
            var bulletData = this.generateBullet(bulletDataArr[0].type);
            var bulletData_2 = this.generateBullet(bulletDataArr[0].type);
            this.data.bullets.push(bulletData);
            this.data.bullets.push(bulletData_2);
          }
        } else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.STEAL_RANDOM_BULLET) {
          var _bulletCount = _skillData.getValue();
          for (var _i4 = 0; _i4 < _bulletCount; _i4++) if (this.currentEnemy.data.bullets.length > 0) {
            var _randomIndex = Math.round(Math.random(0, this.currentEnemy.data.bullets.length - 1));
            var _bulletDataArr = this.currentEnemy.data.bullets.splice(_randomIndex, 1);
            this.stealBullets.push(_bulletDataArr[0].type);
            var _bulletData2 = this.generateBullet(_bulletDataArr[0].type);
            this.data.bullets.push(_bulletData2);
          }
        } else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.REMOVE_RANDOM_BULLET) {
          var _bulletCount2 = _skillData.getValue();
          for (var _i5 = 0; _i5 < _bulletCount2; _i5++) if (this.currentEnemy.data.bullets.length > 0) {
            var _randomIndex2 = Math.round(Math.random(0, this.currentEnemy.data.bullets.length - 1));
            var _bulletDataArr2 = this.currentEnemy.data.bullets.splice(_randomIndex2, 1);
            this.removeBullets.push(_bulletDataArr2[0].type);
          }
        } else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.BULLET_COUNT) {
          _skillData.bulletValue = [];
          for (var _i6 = 0; _i6 < _skillData.getValue(); _i6++) {
            var _bulletData3 = this.generateBullet(_skillData.property);
            _skillData.bulletValue.push(_bulletData3);
          }
          this.additionalProperties.push(_skillData);
        } else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.MONEY) this.addMoney(_skillData.getValue(), _skillData.skillId); else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.CURRENT_ENERGY) this.minCurrentEnergy += _skillData.getValue(); else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.SUB_SKILL) {
          var index = this.ownSubSkills.indexOf(_skillData.parentSet);
          if (index < 0) {
            Global.skillManager.addSkill(_skillData.value, this, _skillData.parentSet);
            this.ownSubSkills.push(_skillData.parentSet);
          }
        } else if (_skillData.propertyType == EnumType.PROPERTY_TYPE.REBORN_COUNT) {
          this.rebornCount += _skillData.getValue();
          this.rebornCountMax += _skillData.getValue();
        } else _skillData.propertyType == EnumType.PROPERTY_TYPE.REBORN_HP_RATE ? this.rebornRate = _skillData.getValue() : _skillData.propertyType == EnumType.PROPERTY_TYPE.DAMAGE_REDUCTION ? this.damageReduction.push(_skillData) : _skillData.propertyType == EnumType.PROPERTY_TYPE.ENHANCED_DAMAGE ? this.enhancedDamage.push(_skillData) : _skillData.propertyType == EnumType.PROPERTY_TYPE.ULTIMATEABILITY ? this.ultimateAbility.setData(_skillData.getValue(), this) : _skillData.propertyType == EnumType.PROPERTY_TYPE.OVERDRAW ? this.overdraw = _skillData.getValue() : this.additionalProperties.push(_skillData);
        if ((null == _skillData.eventId || 1055 == _skillData.skillId) && true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.CHANGE_PROPERTY)) for (var _i7 = 0; _i7 < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.CHANGE_PROPERTY].length; _i7++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.CHANGE_PROPERTY][_i7];
          this.eventListener(event, {
            key: _skillData.property,
            value: _skillData.getValue()
          });
        }
      },
      removeAdditionalProperty: function removeAdditionalProperty(_eventId) {
        for (var i = 0; i < this.additionalProperties.length; i++) {
          var item = this.additionalProperties[i];
          if (item.eventId == _eventId) {
            this.additionalProperties.splice(i, 1);
            return;
          }
        }
      },
      checkGameOver: function checkGameOver() {
        if (false == this.fighting) return;
        if (this.currentHp <= 0) {
          this.currentHp = 0;
          this.fighting = false;
          this.gameOverCallback && this.gameOverCallback(this);
          this.addBoostChanceScore();
        }
      },
      addBoostChanceScore: function addBoostChanceScore() {
        Global.levelManager.curLevel >= 0 && Global.levelManager.curLevel <= 10 ? this.boostChanceScore += 20 : Global.levelManager.curLevel > 10 && Global.levelManager.curLevel <= 20 ? this.boostChanceScore += 15 : Global.levelManager.curLevel > 20 && Global.levelManager.curLevel <= 30 && (this.boostChanceScore += 10);
      },
      getBoosChanceRate: function getBoosChanceRate() {
        var result;
        result = this.boostChanceScore >= 0 && this.boostChanceScore <= 20 ? 20 : this.boostChanceScore > 20 && this.boostChanceScore <= 40 ? 35 : this.boostChanceScore > 40 && this.boostChanceScore <= 60 ? 50 : this.boostChanceScore > 60 && this.boostChanceScore <= 80 ? 60 : this.boostChanceScore > 80 && this.boostChanceScore <= 100 ? 70 : 75;
        return result;
      },
      getCurrentProperties: function getCurrentProperties() {
        var _this = this;
        this.resetData(this.roleId);
        this.additionalProperties.sort(function(a, b) {
          var basicPropertyValueA = true == _this.sortValue.hasOwnProperty(a.property) ? _this.sortValue[a.property] : 100;
          var basicPropertyValueB = true == _this.sortValue.hasOwnProperty(b.property) ? _this.sortValue[b.property] : 100;
          return 1e3 * a.propertyType + basicPropertyValueA - (1e3 * b.propertyType + basicPropertyValueB);
        });
        for (var i = 0; i < this.additionalProperties.length; i++) {
          var item = this.additionalProperties[i];
          var value = item.getValue();
          if (item.propertyType == EnumType.PROPERTY_TYPE.BULLET_COUNT) for (var j = 0; j < item.bulletValue.length; j++) {
            var bullet = item.bulletValue[j];
            bullet.mutiDamage = {};
            this.data.bullets.push(bullet);
          } else if (item.propertyType == EnumType.PROPERTY_TYPE.BASIC || item.propertyType == EnumType.PROPERTY_TYPE.FINAL_BASIC || item.propertyType == EnumType.PROPERTY_TYPE.DEBUFF || item.propertyType == EnumType.PROPERTY_TYPE.BOTH_SIDE) {
            if (item.skillOwner != EnumType.ENHANCEMENT_EFFECT.CHARGE && item.skillOwner != EnumType.ENHANCEMENT_EFFECT.EMERGENCY || !this.enchancementDict.hasOwnProperty(item.skillOwner)) {
              "defeatEnemyCount" == item.baseValue ? this.data[item.property] += value * item.parentSet.ownerSkillSet.values[1].initialValue : item.condition == EnumType.EVENT_TRIGGER_TYPE.BLOOD && item.bloodBasicHpValue ? this.data[item.property] += item.bloodBasicHpValue : this.data[item.property] += value;
              if ("basic_hp" == item.property && true != item.hasAdded) {
                this.currentHp += value;
                this.currentHp > this.data.basic_hp && (this.currentHp = this.data.basic_hp);
                this.currentHp <= 0 && (this.currentHp = 1);
                this.checkGameOver();
                item.hasAdded = true;
              }
            } else this.data[item.property] += this.getExtraEffect(item.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.EFFECT, value);
            "basic_hp" != item.property && "strength" != item.property || (this.data[item.property] = this.data[item.property] < 1 ? 1 : this.data[item.property]);
            this.data[item.property] < 0 && "hp_regeneration" != item.property && (this.data[item.property] = 0);
            "critical_rate" != item.property && "ultimate_ability_critical_rate" != item.property || this.data[item.property] > 100 && (this.data[item.property] = 100);
            "dodge" != item.property && "ultimate_ability_dodge" != item.property || this.data[item.property] > 50 && (this.data[item.property] = 50);
            "attack_speed" == item.property && this.data[item.property] < .01 && (this.data[item.property] = .01);
          } else if (item.propertyType == EnumType.PROPERTY_TYPE.BULLET_DAMAGE) {
            for (var _j2 = 0; _j2 < this.data.bullets.length; _j2++) {
              var bulletData = this.data.bullets[_j2];
              bulletData.addDamage(item.property, {
                key: item.bulletDamageType,
                valueType: item.valueType,
                baseValue: item.baseValue,
                value: value,
                isDynamicValue: item.isDynamicValue,
                dependOnEnemy: item.dependOnEnemy
              });
            }
            for (var key in this.baseBulletDataList) {
              var _bulletData4 = this.baseBulletDataList[key];
              _bulletData4.addDamage(item.property, {
                key: item.bulletDamageType,
                valueType: item.valueType,
                baseValue: item.baseValue,
                value: value,
                isDynamicValue: item.isDynamicValue,
                dependOnEnemy: item.dependOnEnemy
              });
            }
          }
        }
        if (this.removeBullets.length > 0) for (var k = 0; k < this.removeBullets.length; k++) {
          var bulletType = this.removeBullets[k];
          for (var l = 0; l < this.currentEnemy.data.bullets.length; l++) {
            var _bulletData5 = this.currentEnemy.data.bullets[l];
            if (_bulletData5.type == bulletType) {
              this.currentEnemy.data.bullets.splice(l, 1);
              break;
            }
          }
        }
        if (this.stealBullets.length > 0) for (var _k = 0; _k < this.stealBullets.length; _k++) {
          var _bulletType = this.stealBullets[_k];
          for (var _l = 0; _l < this.currentEnemy.data.bullets.length; _l++) {
            var _bulletData6 = this.currentEnemy.data.bullets[_l];
            if (_bulletData6.type == _bulletType) {
              this.currentEnemy.data.bullets.splice(_l, 1);
              var _bulletData7 = this.generateBullet(_bulletType);
              this.data.bullets.push(_bulletData7);
              break;
            }
          }
        }
        if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.DEBUFF_COUNT)) for (var _i8 = 0; _i8 < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DEBUFF_COUNT].length; _i8++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DEBUFF_COUNT][_i8];
          this.eventListener(event);
        }
      },
      getExtraEffect: function getExtraEffect(_skillOwner, _type, _value) {
        if (!_skillOwner) return _value;
        var result = null != _value ? _value : 0;
        if (this.enchancementDict.hasOwnProperty(_skillOwner)) for (var i = 0; i < this.enchancementDict[_skillOwner].length; i++) {
          var item = this.enchancementDict[_skillOwner][i];
          item.baseValue == _type && (item.valueType == EnumType.VALUE_TYPE.RATE ? result += Math.floor(_value * item.getValue()) : result += item.getValue());
        }
        return result;
      },
      filterAdditionalProperties: function filterAdditionalProperties(_end) {
        var _this2 = this;
        this.additionalProperties = this.additionalProperties.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.ROUND || item.durationValue == Global.levelManager.curLevel && true != _end;
        });
        this.enhancedDamage = this.enhancedDamage.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.ROUND || item.durationValue == Global.levelManager.curLevel && true != _end;
        });
        this.enhancedCrit = this.enhancedCrit.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.ROUND || item.durationValue == Global.levelManager.curLevel && true != _end;
        });
        this.damageReduction = this.damageReduction.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.ROUND || item.durationValue == Global.levelManager.curLevel && true != _end;
        });
        this.additionalProperties = this.additionalProperties.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.SECOND || Date.now() - item.durationStartTimer < 1e3 * _this2.getExtraEffect(item.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.TIME, item.durationValue) && true != _end;
        });
        this.enhancedDamage = this.enhancedDamage.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.SECOND || Date.now() - item.durationStartTimer < 1e3 * _this2.getExtraEffect(item.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.TIME, item.durationValue) && true != _end;
        });
        this.enhancedCrit = this.enhancedCrit.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.SECOND || Date.now() - item.durationStartTimer < 1e3 * _this2.getExtraEffect(item.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.TIME, item.durationValue) && true != _end;
        });
        this.damageReduction = this.damageReduction.filter(function(item) {
          return item.durationType != EnumType.DURATION_TYPE.SECOND || Date.now() - item.durationStartTimer < 1e3 * _this2.getExtraEffect(item.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.TIME, item.durationValue) && true != _end;
        });
        true == _end && this.getCurrentProperties();
        this.updateDebuffCallback && this.updateDebuffCallback({
          attack_speed: this.getDebuffCount("attack_speed"),
          amplified_damage: this.data.amplified_damage
        });
        this.updateChargeState();
      },
      generateBullet: function generateBullet(_type) {
        var bulletData = new BulletData();
        bulletData.setData(parseInt(_type), this);
        var tagetData = this.currentEnemy;
        _type != EnumType.BULLET_TYPE.MUSCLE && _type != EnumType.BULLET_TYPE.MUSCLE_P || (tagetData = this);
        bulletData.updateTargetData(tagetData);
        return bulletData;
      },
      initBullets: function initBullets() {
        this.data.bullets = [];
        if ("" == this.data.magazine) return;
        var magazineArr = this.data.magazine.split(",");
        for (var i = 0; i < magazineArr.length; i++) this.data.bullets.push(this.generateBullet(magazineArr[i]));
      },
      updateBullets: function updateBullets() {
        for (var i = 0; i < this.data.bullets.length; i++) {
          var bullet = this.data.bullets[i];
          var tagetData = this.currentEnemy;
          bullet.type != EnumType.BULLET_TYPE.MUSCLE && bullet.type != EnumType.BULLET_TYPE.MUSCLE_P || (tagetData = this);
          bullet.updateTargetData(tagetData);
        }
        for (var j = 0; j < this.additionalProperties.length; j++) {
          var propertyItem = this.additionalProperties[j];
          if (null != propertyItem.bulletValue) {
            var _tagetData = this.currentEnemy;
            for (var k = 0; k < propertyItem.bulletValue.length; k++) {
              var _bullet = propertyItem.bulletValue[k];
              _bullet.type != EnumType.BULLET_TYPE.MUSCLE && _bullet.type != EnumType.BULLET_TYPE.MUSCLE_P || (_tagetData = this);
              _bullet.updateTargetData(_tagetData);
            }
          }
        }
      },
      updatePropertyFromEvent: function updatePropertyFromEvent(_event) {
        if (_event.currentTriggerCount >= _event.triggerCount) return;
        _event.currentTriggerCount++;
        var rate = Global.utils.getRandomByProbability(_event.triggerRate / 100);
        if (false == rate) return;
        _event.triggerEvent();
        if (_event.propertyType == EnumType.PROPERTY_TYPE.BULLET_FIRE) {
          var bullets = [];
          for (var i = 0; i < _event.getValue(); i++) {
            var bulletData = this.generateBullet(_event.property);
            bullets.push(bulletData);
          }
          this.fireBulletsFromEvent(bullets);
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.CURRENT_ENERGY) {
          this.currentEnergy += _event.getValue();
          this.currentEnergy < 0 && (this.currentEnergy = 0);
          this.currentEnergy >= this.data.energy_max && (this.currentEnergy = this.data.energy_max);
          this.showSkillEffectCallback && this.showSkillEffectCallback(_event.skillId);
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.DAMAGE) {
          var value = _event.getValue();
          value = value > 30 * this.data.strength ? 30 * this.data.strength : value;
          this.specialSkillCallback && this.specialSkillCallback("damage", value);
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.STUN) this.specialSkillCallback && this.specialSkillCallback("stun", _event.getValue()); else if (_event.propertyType == EnumType.PROPERTY_TYPE.DEBUFF) {
          this.currentEnemy.data.hasOwnProperty(_event.property) ? this.currentEnemy.updateProperty(_event) : this.currentEnemy[_event.property] += _event.getValue();
          this.currentEnemy.showSkillEffectCallback && this.currentEnemy.showSkillEffectCallback(_event.skillId);
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.ULTIMATE_ABILITY) this.fireUltimateAbility(false); else if (_event.propertyType == EnumType.PROPERTY_TYPE.CURRENT_HP) {
          _event.bloodCounter || (_event.bloodCounter = 5);
          var hpValue;
          hpValue = _event.condition == EnumType.EVENT_TRIGGER_TYPE.BLOOD ? _event.getValue() * Math.abs(this.currentEnemy.data.hp_regeneration) : _event.condition == EnumType.EVENT_TRIGGER_TYPE.REFLECT_DAMAGE && "reflect_damage" == _event.baseValue ? Math.floor(_event.reflectDamage + this.data.healing_boost) : Math.floor(_event.getValue() + this.data.healing_boost);
          this.currentHp += hpValue;
          this.currentHp = this.currentHp >= this.data.basic_hp ? this.data.basic_hp : this.currentHp;
          this.checkGameOver();
          this.healingCallback && this.healingCallback(hpValue);
          this.showSkillEffectCallback && this.showSkillEffectCallback(_event.skillId);
          if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION)) for (var _i9 = 0; _i9 < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION].length; _i9++) {
            var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION][_i9];
            this.eventListener(event, hpValue);
          }
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.MONEY) this.addMoney(_event.getValue(), _event.skillId); else if (_event.propertyType == EnumType.PROPERTY_TYPE.ENHANCED_DAMAGE) {
          this.enhancedDamage.push(_event);
          this.showSkillEffectCallback && this.showSkillEffectCallback(_event.skillId);
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.DAMAGE_REDUCTION) {
          this.damageReduction.push(_event);
          this.showSkillEffectCallback && this.showSkillEffectCallback(_event.skillId);
        } else if (_event.propertyType == EnumType.PROPERTY_TYPE.BOTH_SIDE) {
          this.updateProperty(_event);
          this.showSkillEffectCallback && this.showSkillEffectCallback(_event.skillId);
          this.currentEnemy.updateProperty(_event);
          this.currentEnemy.showSkillEffectCallback && this.currentEnemy.showSkillEffectCallback(_event.skillId);
        } else {
          this.updateProperty(_event);
          this.showSkillEffectCallback && this.showSkillEffectCallback(_event.skillId);
        }
      },
      specialSkilHit: function specialSkilHit(_type, _value) {
        if ("damage" == _type) {
          this.currentEnemy.currentHp -= _value;
          this.currentEnemy.reduceHpCallback && this.currentEnemy.reduceHpCallback(_value);
          this.currentEnemy.checkGameOver();
        } else {
          this.currentEnemy.stunTime += _value;
          this.currentEnemy.stunStartTimer = Date.now();
          this.currentEnemy.updateStunCallback && this.currentEnemy.updateStunCallback(this.currentEnemy.stunTime);
        }
      },
      hitByUltimateAbility: function hitByUltimateAbility(_ultimateAbilityData) {
        var isDodge = 0 != _ultimateAbilityData.config.dodge && 0 != _ultimateAbilityData.targetData.data.ultimate_ability_dodge && Global.utils.getRandomByProbability(_ultimateAbilityData.targetData.data.dodge / 100);
        if (true == isDodge) {
          if (true == _ultimateAbilityData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.DODGE)) for (var i = 0; i < _ultimateAbilityData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DODGE].length; i++) {
            var event = _ultimateAbilityData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DODGE][i];
            _ultimateAbilityData.targetData.eventListener(event, _ultimateAbilityData);
          }
          return "ultimateAbilityMiss";
        }
        var enhancedCrit = 0;
        for (var eventId in _ultimateAbilityData.fromData.enhancedCrit) {
          var enhancedValue = _ultimateAbilityData.fromData.enhancedCrit[eventId];
          enhancedCrit += enhancedValue;
        }
        _ultimateAbilityData.resetDamageType();
        var critRate = _ultimateAbilityData.fromData.data.critical_rate + enhancedCrit;
        critRate = critRate > 100 ? 100 : critRate;
        var isCrit = 0 != _ultimateAbilityData.config.crit && 0 != _ultimateAbilityData.fromData.data.ultimate_ability_critical_rate && Global.utils.getRandomByProbability(critRate / 100);
        true == isCrit && _ultimateAbilityData.setDamageType(EnumType.BULLET_DAMAGE_TYPE.CRIT);
        var damage = _ultimateAbilityData.getDamage();
        var value = damage.value;
        if (_ultimateAbilityData.damageType & EnumType.BULLET_DAMAGE_TYPE.HP) {
          value = damage.value + _ultimateAbilityData.fromData.data.ultimate_ability_damage * damage.value * .01;
          _ultimateAbilityData.damageType & EnumType.BULLET_DAMAGE_TYPE.CRIT && (value += value * _ultimateAbilityData.fromData.data.critical_damage * .01);
          value -= _ultimateAbilityData.targetData.data.armor;
          var amplifiedValue;
          if (_ultimateAbilityData.targetData.data.amplified_damage > 0) {
            amplifiedValue = Math.floor(value * _ultimateAbilityData.targetData.data.amplified_damage * .01);
            amplifiedValue = amplifiedValue < 1 ? 1 : amplifiedValue;
          } else amplifiedValue = 0;
          value += amplifiedValue;
          value = _ultimateAbilityData.targetData.overdraw > 0 && _ultimateAbilityData.targetData.currentMoney < 0 ? Math.floor(value + .3 * value) : value;
          value = value <= 0 ? 1 : value;
          value += this.getFinallyDamageRate(value, _ultimateAbilityData.fromData, _ultimateAbilityData.targetData);
          value = value <= 0 ? 1 : value;
          _ultimateAbilityData.targetData.currentHp -= value;
          _ultimateAbilityData.targetData.currentHp > _ultimateAbilityData.targetData.data.basic_hp && (_ultimateAbilityData.targetData.currentHp = _ultimateAbilityData.targetData.data.basic_hp);
          _ultimateAbilityData.targetData.reduceHpCallback && _ultimateAbilityData.targetData.reduceHpCallback(value);
          _ultimateAbilityData.targetData.checkGameOver();
          if (_ultimateAbilityData.targetData.currentHp <= 0) return {
            damageType: _ultimateAbilityData.damageType,
            value: value
          };
        }
        if (true == _ultimateAbilityData.fromData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE)) for (var _i10 = 0; _i10 < _ultimateAbilityData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE].length; _i10++) {
          var _event2 = _ultimateAbilityData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE][_i10];
          _ultimateAbilityData.fromData.eventListener(_event2, 1);
        }
        if (true == _ultimateAbilityData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.FEND)) for (var _i11 = 0; _i11 < _ultimateAbilityData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.FEND].length; _i11++) {
          var _event3 = _ultimateAbilityData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.FEND][_i11];
          _ultimateAbilityData.targetData.eventListener(_event3, _ultimateAbilityData.targetData.data.armor);
        }
        if (true == _ultimateAbilityData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BY_ULTIMATE_ABILITY_HIT)) for (var _i12 = 0; _i12 < _ultimateAbilityData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BY_ULTIMATE_ABILITY_HIT].length; _i12++) {
          var _event4 = _ultimateAbilityData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BY_ULTIMATE_ABILITY_HIT][_i12];
          _ultimateAbilityData.targetData.eventListener(_event4, _ultimateAbilityData);
        }
        if (true == _ultimateAbilityData.fromData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.ULTIMATE_ABILITY_HIT)) for (var _i13 = 0; _i13 < _ultimateAbilityData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.ULTIMATE_ABILITY_HIT].length; _i13++) {
          var _event5 = _ultimateAbilityData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.ULTIMATE_ABILITY_HIT][_i13];
          _ultimateAbilityData.fromData.eventListener(_event5, _ultimateAbilityData);
        }
        return {
          damageType: _ultimateAbilityData.damageType,
          value: value
        };
      },
      fireUltimateAbility: function fireUltimateAbility(_needWait) {
        if (this.stunTime > 0) return;
        if (this.fireUltimateAbilityTimer && true == _needWait && Date.now() - this.fireUltimateAbilityTimer < 1e3 * BattleConfig.FIRE_ULTIMATE_ABILITY_INTERVAL) return;
        this.fireUltimateAbilityTimer = Date.now();
        this.currentEnergy = 0;
        if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.FIRE_ULTIMATE_ABILITY)) for (var i = 0; i < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.FIRE_ULTIMATE_ABILITY].length; i++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.FIRE_ULTIMATE_ABILITY][i];
          this.eventListener(event, this.ultimateAbility);
        }
        this.fireUltimateAbilityCallback && this.fireUltimateAbilityCallback();
      },
      eventListener: function eventListener(_event, _arg) {
        var _this3 = this;
        var edge = _event.getConditionValue();
        switch (_event.condition) {
         case EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION:
         case EnumType.EVENT_TRIGGER_TYPE.REFLECT_DAMAGE:
          _event.initialValue += _arg;
          if (_event.initialValue >= edge) {
            _event.initialValue = 0;
            _event.condition == EnumType.EVENT_TRIGGER_TYPE.REFLECT_DAMAGE && (_event.reflectDamage = _arg);
            this.updatePropertyFromEvent(_event);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.BULLET_HIT:
         case EnumType.EVENT_TRIGGER_TYPE.BY_BULLET_HIT:
          if (0 != _event.subConditionValue && _arg.type != _event.subConditionValue) return;
          if (0 != _event.subCondition && 0 == (_event.subCondition & _arg.damageType)) return;
          _event.initialValue++;
          if (_event.initialValue >= edge) {
            _event.initialValue = 0;
            this.updatePropertyFromEvent(_event);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.HP_REDUCTION:
          if (this.currentHp < this.getExtraEffect(_event.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.LIMIT, edge)) {
            this.updatePropertyFromEvent(_event);
            this.updateEmergencyCallback && this.updateEmergencyCallback(true);
          } else {
            _event.triggerCount = 0;
            this.removeAdditionalProperty(_event.eventId);
            this.updateEmergencyCallback && this.updateEmergencyCallback(false);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.DEBUFF_COUNT:
          var debuffCount;
          debuffCount = "attack_speed" == _event.subCondition ? this.currentEnemy.getDebuffCount("attack_speed") : this.currentEnemy.data[_event.subCondition];
          if (debuffCount >= _event.conditionValue) {
            if (_event.propertyType == EnumType.PROPERTY_TYPE.ENHANCED_DAMAGE) {
              var index = this.enhancedDamage.indexOf(_event);
              index < 0 && this.enhancedDamage.push(_event);
            } else if (_event.propertyType == EnumType.PROPERTY_TYPE.ENHANCED_CRIT) {
              var _index = this.enhancedCrit.indexOf(_event);
              _index < 0 && this.enhancedCrit.push(_event);
            }
          } else if (_event.propertyType == EnumType.PROPERTY_TYPE.ENHANCED_DAMAGE) {
            var _index2 = this.enhancedDamage.indexOf(_event);
            this.enhancedDamage.splice(_index2, 1);
          } else if (_event.propertyType == EnumType.PROPERTY_TYPE.ENHANCED_CRIT) {
            var _index3 = this.enhancedCrit.indexOf(_event);
            this.enhancedCrit.splice(_index3, 1);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.DEFEAT_ENEMY:
         case EnumType.EVENT_TRIGGER_TYPE.BLOOD:
          _event.initialValue++;
          this.updatePropertyFromEvent(_event);
          break;

         case EnumType.EVENT_TRIGGER_TYPE.DODGE:
         case EnumType.EVENT_TRIGGER_TYPE.REBORN:
          _event.initialValue++;
          if (_event.initialValue >= edge) {
            _event.initialValue = 0;
            this.updatePropertyFromEvent(_event);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.BATTLE_START:
          if (_event.propertyType == EnumType.PROPERTY_TYPE.EVENT) {
            var eventIndex = parseInt(_event.property);
            if (true == this.eventsDict.hasOwnProperty(eventIndex)) {
              var _loop = function _loop(i) {
                var event = _this3.eventsDict[eventIndex][i];
                var index = _event.getValue().indexOf(event.skillId);
                index >= 0 && _this3.schedule(function() {
                  _this3.eventListener(event);
                }, _event.subConditionValue);
              };
              for (var i = 0; i < this.eventsDict[eventIndex].length; i++) _loop(i);
            }
          } else if (null != _event.subCondition) if (_event.subCondition == EnumType.EVENT_TRIGGER_SUB_TYPE.NOT_BOSS) {
            var curLevel = Global.levelManager.getCurrentLevel();
            var levelData = Global.levelManager.getLevelDataByLevel(curLevel);
            false == levelData.isBoss && this.updatePropertyFromEvent(_event);
          } else if (_event.subCondition == EnumType.EVENT_TRIGGER_SUB_TYPE.BOSS) {
            var _curLevel = Global.levelManager.getCurrentLevel();
            var _levelData = Global.levelManager.getLevelDataByLevel(_curLevel);
            _levelData.isBoss && this.updatePropertyFromEvent(_event);
          } else if (_event.subCondition == EnumType.EVENT_TRIGGER_SUB_TYPE.CHARGE) {
            var chargeTime;
            var skillData = Global.skillManager.getSkillByType(EnumType.ENHANCEMENT_EFFECT.CHARGE, this);
            if (null == skillData) return;
            chargeTime = 1e3 * this.getExtraEffect(skillData.skillOwner, EnumType.ENHANCEMENT_EFFECT_TYPE.TIME, skillData.durationValue);
            var timeoutId = setTimeout(function() {
              _this3.updatePropertyFromEvent(_event);
            }, chargeTime);
            this.timeoutIds.push(timeoutId);
          } else if (_event.subCondition == EnumType.EVENT_TRIGGER_SUB_TYPE.TIME) {
            var _timeoutId = setTimeout(function() {
              _this3.updatePropertyFromEvent(_event);
            }, 1e3 * _event.subConditionValue);
            this.timeoutIds.push(_timeoutId);
          } else _event.subCondition == EnumType.EVENT_TRIGGER_SUB_TYPE.EVERY_SECOND && this.schedule(function() {
            _this3.updatePropertyFromEvent(_event);
          }, _event.subConditionValue); else this.updatePropertyFromEvent(_event);
          break;

         case EnumType.EVENT_TRIGGER_TYPE.FEND:
         case EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE:
          _event.initialValue += _arg;
          if (_event.initialValue >= edge) {
            _event.initialValue = 0;
            this.updatePropertyFromEvent(_event);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.FIRE_ULTIMATE_ABILITY:
         case EnumType.EVENT_TRIGGER_TYPE.BY_ULTIMATE_ABILITY_HIT:
         case EnumType.EVENT_TRIGGER_TYPE.ULTIMATE_ABILITY_HIT:
         case EnumType.EVENT_TRIGGER_TYPE.INSTANT:
          this.updatePropertyFromEvent(_event);
          break;

         case EnumType.EVENT_TRIGGER_TYPE.CHANGE_PROPERTY:
          if (_event.subCondition == _arg.key) {
            _event.changePropertyValue = _arg.value;
            this.updatePropertyFromEvent(_event);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.GET_SKILL:
          if (_event.subCondition != _arg) return;
          _event.initialValue += 1;
          if (_event.initialValue >= edge) {
            _event.initialValue = 0;
            this.updatePropertyFromEvent(_event);
          }
          break;

         case EnumType.EVENT_TRIGGER_TYPE.SPEND_MONEY:
          _event.initialValue += _arg;
          var count = Math.floor(_event.initialValue / _event.conditionValue);
          if (count > 0) {
            _event.initialValue -= count * _event.conditionValue;
            for (var _i14 = 0; _i14 < count; _i14++) this.updatePropertyFromEvent(_event);
          }
        }
      },
      clearTimer: function clearTimer() {
        this.unscheduleAllCallbacks();
        this.timeoutIds.forEach(function(id) {
          return clearTimeout(id);
        });
      },
      fireBulletsFromEvent: function fireBulletsFromEvent(_bullets) {
        this.fireBulletsFromEventCallback && this.fireBulletsFromEventCallback(_bullets);
      },
      updateChargeState: function updateChargeState() {
        for (var i = 0; i < this.additionalProperties.length; i++) {
          var item = this.additionalProperties[i];
          if (item.skillConfig.skill_owner == EnumType.ENHANCEMENT_EFFECT.CHARGE) {
            this.updateChargeStateCallback && this.updateChargeStateCallback(true);
            return;
          }
        }
        this.updateChargeStateCallback && this.updateChargeStateCallback(false);
      },
      getDebuffCount: function getDebuffCount(_type) {
        var result = 0;
        for (var i = 0; i < this.additionalProperties.length; i++) {
          var item = this.additionalProperties[i];
          item.propertyType == EnumType.PROPERTY_TYPE.BASIC && item.property == _type && "bullet" == item.skillId && result++;
        }
        return result;
      },
      getFinallyDamageRate: function getFinallyDamageRate(_value, _fromData, _targetData) {
        var result = 0;
        var enchancedDamage = 0;
        for (var i = 0; i < _fromData.enhancedDamage.length; i++) {
          var enhancedValue = _fromData.enhancedDamage[i].getValue();
          enchancedDamage += enhancedValue;
        }
        var damageReduction = 0;
        for (var _i15 = 0; _i15 < _targetData.damageReduction.length; _i15++) {
          var reductionValue = _targetData.damageReduction[_i15].getValue();
          damageReduction += reductionValue;
        }
        result = _value * (enchancedDamage - damageReduction) * .01;
        result = result < 1 && result > 0 ? 1 : Math.floor(result);
        result = result < 0 && result > -1 ? -1 : Math.floor(result);
        return result;
      },
      getReflectCount: function getReflectCount(_roleData) {
        var result = [];
        result.push(1);
        if (_roleData.ownSkills.hasOwnProperty(1172)) {
          var skillSetList = _roleData.ownSkills[1172];
          for (var i = 0; i < skillSetList.length; i++) {
            var skillSet = skillSetList[i];
            result.push(skillSet.values[0].getValue());
          }
        }
        if (_roleData.ownSkills.hasOwnProperty(1173)) {
          var _skillSetList = _roleData.ownSkills[1173];
          for (var _i16 = 0; _i16 < _skillSetList.length; _i16++) {
            var _skillSet = _skillSetList[_i16];
            result.push(_skillSet.values[0].getValue());
          }
        }
        return result;
      },
      hitByBullet: function hitByBullet(_bulletData) {
        var isDodge = 0 != _bulletData.bulletConfig.dodge && Global.utils.getRandomByProbability(_bulletData.targetData.data.dodge / 100);
        if (true == isDodge) {
          if (true == _bulletData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.DODGE)) for (var i = 0; i < _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DODGE].length; i++) {
            var event = _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DODGE][i];
            _bulletData.targetData.eventListener(event, _bulletData);
          }
          return "miss";
        }
        var damageArr = _bulletData.getDamage();
        var value;
        var result = [];
        for (var damageType in damageArr) {
          value = damageArr[damageType];
          var valueObj = {};
          valueObj.isCrit = false;
          if (damageType & EnumType.BULLET_DAMAGE_TYPE.HP) {
            var enhancedCrit = 0;
            for (var _i17 = 0; _i17 < _bulletData.fromData.enhancedCrit.length; _i17++) {
              var enhancedCritValue = _bulletData.fromData.enhancedCrit[_i17].getValue();
              enhancedCrit += enhancedCritValue;
            }
            var critRate = _bulletData.fromData.data.critical_rate + enhancedCrit;
            critRate = critRate > 100 ? 100 : critRate;
            var isCrit = 0 != _bulletData.bulletConfig.crit && Global.utils.getRandomByProbability(critRate / 100);
            true == isCrit && _bulletData.setDamageType(EnumType.BULLET_DAMAGE_TYPE.CRIT);
            valueObj.isCrit = isCrit;
            valueObj.isCrit && (value += value * _bulletData.fromData.data.critical_damage * .01);
            value -= _bulletData.targetData.data.armor;
            var amplifiedValue = void 0;
            if (_bulletData.targetData.data.amplified_damage > 0) {
              amplifiedValue = Math.floor(value * _bulletData.targetData.data.amplified_damage * .01);
              amplifiedValue = amplifiedValue < 1 ? 1 : amplifiedValue;
            } else amplifiedValue = 0;
            value += amplifiedValue;
            value = _bulletData.targetData.overdraw > 0 && _bulletData.targetData.currentMoney < 0 ? Math.floor(value + .3 * value) : value;
            value = value <= 0 ? 1 : value;
            var finalEnhancedValue = this.getFinallyDamageRate(value, _bulletData.fromData, _bulletData.targetData);
            value += finalEnhancedValue;
            value = value <= 0 ? 1 : value;
            valueObj.value = value;
            _bulletData.targetData.currentHp -= value;
            _bulletData.targetData.currentHp > _bulletData.targetData.data.basic_hp && (_bulletData.targetData.currentHp = _bulletData.targetData.data.basic_hp);
            _bulletData.targetData.reduceHpCallback && _bulletData.targetData.reduceHpCallback(value);
            if (_bulletData.targetData.data["reflect_damage"] > 0) {
              var relfectCount = this.getReflectCount(_bulletData.targetData);
              for (var _i18 = 0; _i18 < relfectCount.length; _i18++) {
                var reflect = relfectCount[_i18];
                var damage = void 0;
                var relfectAmplifiedValue = void 0;
                if (_bulletData.fromData.data["amplified_damage"] > 0) {
                  relfectAmplifiedValue = Math.floor(_bulletData.targetData.data["reflect_damage"] * _bulletData.fromData.data["amplified_damage"] * .01);
                  relfectAmplifiedValue = relfectAmplifiedValue < 1 ? 1 : relfectAmplifiedValue;
                } else relfectAmplifiedValue = 0;
                var relfectValue = parseInt(_bulletData.targetData.data["reflect_damage"]);
                relfectValue += relfectAmplifiedValue;
                damage = Math.floor(relfectValue * reflect);
                damage += this.getFinallyDamageRate(damage, _bulletData.targetData, _bulletData.fromData);
                _bulletData.fromData.getHurtFromReflect(damage);
                if (true == _bulletData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.REFLECT_DAMAGE)) for (var _i19 = 0; _i19 < _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.REFLECT_DAMAGE].length; _i19++) {
                  var _event6 = _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.REFLECT_DAMAGE][_i19];
                  _bulletData.targetData.eventListener(_event6, damage);
                }
              }
            }
          }
          if (damageType & EnumType.BULLET_DAMAGE_TYPE.ENERGY) {
            valueObj.value = value;
            _bulletData.targetData.currentEnergy -= value;
            _bulletData.targetData.reduceEnergyCallback && _bulletData.targetData.reduceEnergyCallback(value);
            _bulletData.targetData.currentEnergy <= 0 && (_bulletData.targetData.currentEnergy = 0);
          }
          if (damageType & EnumType.BULLET_DAMAGE_TYPE.STRENGTH) {
            valueObj.value = value;
            var skillData = new SkillData();
            var tempConfig = {};
            tempConfig.id = "bullet";
            tempConfig.skill_owner = "";
            tempConfig.is_dynamic_value = "";
            tempConfig.is_dynamic_subValue = "";
            tempConfig.is_dynamic_condition = "";
            tempConfig.duration = "" + EnumType.DURATION_TYPE.ROUND;
            skillData.setData(_bulletData.targetData, tempConfig, "0|strength", "2&" + value, EnumType.CONDITION_TYPE.GET);
            skillData.triggerEvent();
            _bulletData.targetData.updateProperty(skillData);
          }
          if (damageType & EnumType.BULLET_DAMAGE_TYPE.BLEED) {
            value *= -1;
            valueObj.value = value;
            var _skillData2 = new SkillData();
            var _tempConfig = {};
            _tempConfig.id = "bullet";
            _tempConfig.skill_owner = "";
            _tempConfig.is_dynamic_value = "";
            _tempConfig.is_dynamic_subValue = "";
            _tempConfig.is_dynamic_condition = "";
            _tempConfig.duration = "" + EnumType.DURATION_TYPE.ROUND;
            _skillData2.setData(_bulletData.targetData, _tempConfig, "0|hp_regeneration", "2&" + value, EnumType.CONDITION_TYPE.GET);
            _skillData2.triggerEvent();
            _bulletData.targetData.updateProperty(_skillData2);
          }
          if (damageType & EnumType.BULLET_DAMAGE_TYPE.ATTACK_SPEED) {
            value *= -1;
            valueObj.value = value;
            var _skillData3 = new SkillData();
            var _tempConfig2 = {};
            _tempConfig2.id = "bullet";
            _tempConfig2.skill_owner = "";
            _tempConfig2.is_dynamic_value = "";
            _tempConfig2.is_dynamic_subValue = "";
            _tempConfig2.is_dynamic_condition = "";
            _tempConfig2.duration = EnumType.DURATION_TYPE.SECOND + "|" + BattleConfig.ICE_BULLET_DURATION;
            _skillData3.setData(_bulletData.targetData, _tempConfig2, "0|attack_speed", "2&" + value, EnumType.CONDITION_TYPE.GET);
            _skillData3.triggerEvent();
            _bulletData.targetData.updateProperty(_skillData3);
          }
          if (damageType & EnumType.BULLET_DAMAGE_TYPE.ENERGY_BACK) {
            valueObj.value = value;
            _bulletData.fromData.currentEnergy += value;
            _bulletData.fromData.currentEnergy > _bulletData.fromData.getStaticData().energy_max && (_bulletData.fromData.currentEnergy = _bulletData.fromData.getStaticData().energy_max);
          }
          result[damageType] = valueObj;
        }
        _bulletData.targetData.checkGameOver();
        if (_bulletData.targetData.hp <= 0) return result;
        if (_bulletData.type > EnumType.BULLET_TYPE.BOOMERANG) return result;
        if (_bulletData.damageType & EnumType.BULLET_DAMAGE_TYPE.HP) {
          if (true == _bulletData.fromData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE)) for (var _i20 = 0; _i20 < _bulletData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE].length; _i20++) {
            var _event7 = _bulletData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BULLET_ULTIMATE_ABILITY_DAMAGE][_i20];
            _bulletData.fromData.eventListener(_event7, 1);
          }
          if (true == _bulletData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.FEND)) for (var _i21 = 0; _i21 < _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.FEND].length; _i21++) {
            var _event8 = _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.FEND][_i21];
            _bulletData.targetData.eventListener(_event8, _bulletData.targetData.data.armor);
          }
        }
        if (true == _bulletData.fromData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BULLET_HIT)) for (var _i22 = 0; _i22 < _bulletData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BULLET_HIT].length; _i22++) {
          var _event9 = _bulletData.fromData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BULLET_HIT][_i22];
          _bulletData.fromData.eventListener(_event9, _bulletData);
        }
        if (true == _bulletData.targetData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BY_BULLET_HIT)) for (var _i23 = 0; _i23 < _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BY_BULLET_HIT].length; _i23++) {
          var _event10 = _bulletData.targetData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BY_BULLET_HIT][_i23];
          _bulletData.targetData.eventListener(_event10, _bulletData);
        }
        return result;
      },
      getHurtFromReflect: function getHurtFromReflect(_damage) {
        this.currentHp -= _damage;
        this.checkGameOver();
        this.reduceHpCallback && this.reduceHpCallback(_damage);
        this.getHurtFromReflectCallback && this.getHurtFromReflectCallback(_damage);
      },
      defeatEnemy: function defeatEnemy() {
        if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.DEFEAT_ENEMY)) for (var i = 0; i < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DEFEAT_ENEMY].length; i++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.DEFEAT_ENEMY][i];
          this.eventListener(event);
        }
        this.stealBullets = [];
        this.removeBullets = [];
        this.enhancedDamage = [];
        this.enhancedCrit = [];
        this.damageReduction = [];
        this.clearAdditionalProperties(this);
        this.clearAdditionalProperties(this.currentEnemy);
        this.fighting = false;
      },
      clearAdditionalProperties: function clearAdditionalProperties(_roleData) {
        _roleData.additionalProperties = _roleData.additionalProperties.filter(function(item) {
          return item.condition != EnumType.EVENT_TRIGGER_TYPE.BATTLE_START;
        });
        _roleData.filterAdditionalProperties(true);
        _roleData.clearTimer();
      },
      battleStart: function battleStart() {
        if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BATTLE_START)) for (var i = 0; i < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BATTLE_START].length; i++) {
          var event = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BATTLE_START][i];
          event.currentTriggerCount = 0;
          this.eventListener(event);
        }
        this.currentEnergy = this.minCurrentEnergy ? this.minCurrentEnergy : 0;
        this.currentEnergy >= this.data.energy_max && (this.currentEnergy = this.data.energy_max);
        this.fighting = true;
        this.initProgressBarCallback && this.initProgressBarCallback();
      },
      update: function update(dt) {
        if (Date.now() - this.timer1Min >= BattleConfig.HEART_BEAT_ONE_MINUTE) {
          this.timer1Min = Date.now();
          this.recoveryStamina();
        }
        if (true != this.fighting) return;
        if (this.stunTime > 0 && Date.now() - this.stunStartTimer >= 1e3 * this.stunTime) {
          this.stunTime = 0;
          this.updateStunCallback && this.updateStunCallback(this.stunTime);
        }
        if (Date.now() - this.timer1Sec >= BattleConfig.HEART_BEAT_ONE_SECOND) {
          this.timer1Sec = Date.now();
          var hp = this.data.hp_regeneration;
          var value = hp > 0 ? hp + this.data.healing_boost : hp;
          if (value < 0) {
            var amplifiedValue;
            if (this.data.amplified_damage > 0) {
              amplifiedValue = Math.floor(this.data.hp_regeneration * this.data.amplified_damage * .01);
              amplifiedValue = 0 == amplifiedValue ? -1 : amplifiedValue;
              value += amplifiedValue;
            }
            value += this.getFinallyDamageRate(value, this.currentEnemy, this);
            this.reduceHpCallback && this.reduceHpCallback(value);
            if (this.data.hp_regeneration < 0 && true == this.currentEnemy.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.BLOOD)) for (var i = 0; i < this.currentEnemy.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BLOOD].length; i++) {
              var event = this.currentEnemy.eventsDict[EnumType.EVENT_TRIGGER_TYPE.BLOOD][i];
              this.currentEnemy.eventListener(event, value);
            }
          } else if (this.data.hp_regeneration > 0 && true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION)) for (var _i24 = 0; _i24 < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION].length; _i24++) {
            var _event11 = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.HP_REGENERATION][_i24];
            this.eventListener(_event11, this.data.hp_regeneration);
          }
          this.currentHp += value;
          this.currentHp = this.currentHp >= this.data.basic_hp ? this.data.basic_hp : this.currentHp;
          this.checkGameOver();
          if (this.currentHp <= 0) return;
          0 != this.data.hp_regeneration && this.hpRegenerationCallback && this.hpRegenerationCallback(value);
          var energy = this.data.energy_recovery;
          this.currentEnergy += energy;
          if (this.currentEnergy >= this.data.energy_max) {
            this.currentEnergy = this.data.energy_max;
            this.fireUltimateAbility(true);
          }
        }
        if (Date.now() - this.timer >= BattleConfig.HEART_BEAT) {
          this.timer = Date.now();
          this.getCurrentProperties();
          this.filterAdditionalProperties();
          this.updateUICallback && this.updateUICallback();
          if (true == this.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.HP_REDUCTION)) for (var _i25 = 0; _i25 < this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.HP_REDUCTION].length; _i25++) {
            var _event12 = this.eventsDict[EnumType.EVENT_TRIGGER_TYPE.HP_REDUCTION][_i25];
            this.eventListener(_event12);
          }
        }
      }
    });
    module.exports = RoleData;
    cc._RF.pop();
  }, {
    BattleConfig: "BattleConfig",
    BulletData: "BulletData",
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    SkillData: "SkillData",
    UltimateAbilityData: "UltimateAbilityData"
  } ],
  RoleManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d3042a5OfNHzKftSu1WsRYP", "RoleManager");
    "use strict";
    var RoleData = require("RoleData");
    var gameConfig = require("GameConfig");
    var RoleManager = function RoleManager() {
      this.resetData();
    }, roleMG = RoleManager.prototype, g_instance = null;
    roleMG.resetData = function() {
      this.roleDataDict = {};
    };
    roleMG.generateRoleData = function(_id) {
      var roleData = new RoleData();
      roleData.initData(_id);
      this.roleDataDict[_id] = roleData;
      _id == gameConfig.GAME_CONST.selfId && (this.selfRoleData = roleData);
      return roleData;
    };
    roleMG.getRoleData = function(_id) {
      return this.roleDataDict[_id];
    };
    module.exports = function() {
      g_instance || (g_instance = new RoleManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig",
    RoleData: "RoleData"
  } ],
  RoleStateAtk: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f1722QciaRLqqrB9RtwY1Xs", "RoleStateAtk");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorStateLogic_1 = require("../../animator/core/AnimatorStateLogic");
    var RoleStateAtk = function(_super) {
      __extends(RoleStateAtk, _super);
      function RoleStateAtk(roleView) {
        var _this = _super.call(this) || this;
        _this.roleView = roleView;
        return _this;
      }
      RoleStateAtk.prototype.onExit = function() {
        var onAttackComplete = this.roleView._roleAnimator.onAttackComplete;
        onAttackComplete && onAttackComplete();
      };
      return RoleStateAtk;
    }(AnimatorStateLogic_1.default);
    exports.default = RoleStateAtk;
    cc._RF.pop();
  }, {
    "../../animator/core/AnimatorStateLogic": "AnimatorStateLogic"
  } ],
  RoleStateDeath: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f5c05n6Nu9Ht6OcalMBca92", "RoleStateDeath");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var AnimatorStateLogic_1 = require("../../animator/core/AnimatorStateLogic");
    var RoleStateDeath = function(_super) {
      __extends(RoleStateDeath, _super);
      function RoleStateDeath(roleView) {
        var _this = _super.call(this) || this;
        _this.roleView = roleView;
        return _this;
      }
      RoleStateDeath.prototype.onEntry = function() {
        var onDeathComplete = this.roleView._roleAnimator.onDeathComplete;
        onDeathComplete && onDeathComplete();
      };
      return RoleStateDeath;
    }(AnimatorStateLogic_1.default);
    exports.default = RoleStateDeath;
    cc._RF.pop();
  }, {
    "../../animator/core/AnimatorStateLogic": "AnimatorStateLogic"
  } ],
  RoleView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "01bbaRyGidIPr1YdqgXBp/W", "RoleView");
    "use strict";
    var _RoleAnimatorSpine = _interopRequireDefault(require("./animator/RoleAnimatorSpine"));
    var _BasketAnimatorSpine = _interopRequireDefault(require("./animator/BasketAnimatorSpine"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    var Debuff = require("Debuff");
    var HpProgressBar = require("HpProgressBar");
    var UltimateProgressBar = require("UltimateProgressBar");
    var DetailPanelView = require("DetailPanelView");
    var SpineBase = require("SpineBase");
    cc.Class({
      extends: cc.Component,
      properties: {
        emergencySpine: {
          type: cc.Node,
          default: null,
          tooltip: "\u7d27\u6025\u7279\u6548:\u89e6\u53d1\u5927\u4e8e\u7b49\u4e8e3\u5f20\u7d27\u6025\u5361\u65f6\u89e6\u53d1"
        },
        emergencySmallSpine: {
          type: cc.Node,
          default: null,
          tooltip: "\u7d27\u6025\u7279\u6548:\u89e6\u53d1\u5c0f\u4e8e3\u5f20\u7d27\u6025\u5361\u65f6\u89e6\u53d1"
        },
        battleSmokeSpine: {
          type: cc.Node,
          default: null,
          tooltip: "\u51b2\u950b\u70df\u96fe\u7279\u6548\uff1a\u89e6\u53d1Atk_2\uff08\u653b\u901f\u5feb\uff09\u65f6\u6fc0\u6d3b"
        },
        basketSpine: {
          type: sp.Skeleton,
          default: null
        },
        roleSpine: {
          type: sp.Skeleton,
          default: null
        },
        chargeSpine: {
          type: cc.Node,
          default: null,
          tooltip: "\u51b2\u950b\u95ea\u7535\u7279\u6548\uff1a\u89e6\u53d1\u51b2\u950b\u65f6\u663e\u793a"
        },
        boomRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u53d7\u51fb\u6253\u70df\u96fe\u7279\u6548\uff1a\u53d7\u5230\u5b50\u5f39\u4f24\u5bb3\u540e\u663e\u793a"
        },
        rebornSpine: {
          type: SpineBase,
          default: null,
          tooltip: "\u590d\u6d3b\u7279\u6548\uff1a\u590d\u6d3b\u65f6\u663e\u793a\u3002\u3010\u8bf7\u52ff\u9690\u85cf\u6b64\u8282\u70b9\u3011"
        },
        attackSpeedNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u51b0\u51bb\u7279\u6548\uff1a\u653b\u901f\u964d\u4f4e\u65f6\u663e\u793a"
        },
        amplifiedDamageNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u91cd\u4f24\u7279\u6548\uff1a\u53d7\u5230\u91cd\u4f24\u65f6\u663e\u793a"
        },
        stunNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u7729\u6655\u7279\u6548\uff1a\u7729\u6655\u671f\u95f4\u663e\u793a"
        },
        toxicSpine: {
          type: cc.Node,
          default: null,
          tooltip: "\u8d1f\u56de\u8840\u7279\u6548\uff1a\u6389\u8840\u65f6\u663e\u793a"
        },
        abilityUpSpine: {
          type: SpineBase,
          default: null,
          tooltip: "\u63d0\u5347\u7279\u6548\uff1a\u89d2\u8272\u80fd\u529b\u63d0\u5347\u65f6\u89e6\u53d1"
        },
        areaRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u5728\u6b64\u533a\u57df\u4e2d\u53d1\u5c04/\u63a5\u6536\u5b50\u5f39"
        },
        valueRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u5728\u6b64\u533a\u57df\u4e2d\u663e\u793a\u6570\u503c"
        },
        dialogueRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u5728\u6b64\u533a\u57df\u4e2d\u663e\u793a\u4eba\u7269\u5bf9\u8bdd"
        },
        debuffList: {
          type: [ Debuff ],
          default: [],
          tooltip: "\u5404\u79cdDebuff"
        },
        hpProgressBar: {
          type: HpProgressBar,
          default: null,
          tooltip: "\u8840\u91cf\u6761"
        },
        ultimateProgressBar: {
          type: UltimateProgressBar,
          default: null,
          tooltip: "\u80fd\u91cf\u6761"
        },
        detailPanelView: {
          type: DetailPanelView,
          default: null,
          tooltip: "\u5c5e\u6027\u9762\u677f"
        },
        direction: {
          displayName: "\u65b9\u5411",
          type: gameConfig.DIRECTION_ENUM,
          default: gameConfig.DIRECTION_ENUM.RIGHT,
          notify: function notify() {
            this.updateDirection();
          },
          tooltip: "\u89d2\u8272\u65b9\u5411\uff08\u5411\u5de6\u5411\u53f3\uff09"
        },
        _roleAnimator: {
          type: _RoleAnimatorSpine["default"],
          default: null
        },
        _basketAnimator: {
          type: _BasketAnimatorSpine["default"],
          default: null
        },
        _parent: null,
        _roleData: null,
        _isMoving: false,
        _posX: 0,
        _speed: 0,
        _moveCallBack: null,
        _nextBulletIndex: -1,
        _stunTime: 0,
        _fightIT: null,
        _lastAttackSpeed: 0,
        _abilityUpList: [],
        _combineArr: null,
        _isMergeAnimation: true
      },
      onEnable: function onEnable() {
        cc.director.GlobalEvent.on(gameConfig.GAME_EVENT.AbilityUp, this.AbilityUp, this);
      },
      AbilityUp: function AbilityUp(data) {
        var _this = this;
        if (!this.abilityUpSpine) return;
        if (data.roleId != this._roleData.roleId) return;
        this.abilityUpSpine.node.active = true;
        this.abilityUpSpine.animationCallBack = function() {
          _this.abilityUpSpine.node.active = false;
        };
        this.abilityUpSpine.playAnimation("UP", false);
        var valueNode = Global.poolManager.get(gameConfig.POOLMANAGER_TYPE.abilityUpLabel.key);
        if (valueNode) {
          this._abilityUpList.push(true);
          valueNode.getComponent(cc.Label).string = data.msg || "";
          var localPos = this.getValuePositon(true);
          var nodePos = Global.gui.effect.convertToNodeSpaceAR(localPos);
          valueNode.setAnchorPoint(.5, .5);
          valueNode.setPosition(nodePos);
          Global.gui.effect.addChild(valueNode);
          valueNode.setScale(0, 0);
          cc.tween(valueNode).delay(.3 * this._abilityUpList.length).to(.06, {
            scale: 1
          }).to(.06, {
            scale: 1.2
          }).to(.06, {
            scale: 1
          }).to(1, {
            position: cc.v2(nodePos.x, nodePos.y + 150)
          }).call(function() {
            _this._abilityUpList.pop();
            valueNode.removeFromParent();
            Global.poolManager.put(gameConfig.POOLMANAGER_TYPE.abilityUpLabel.key, valueNode);
          }).start();
        }
      },
      onLoad: function onLoad() {
        this._abilityUpList = [];
        this.cleanDebuff(true);
        this._roleAnimator = this.roleSpine.getComponent(_RoleAnimatorSpine["default"]);
        this._basketAnimator = this.basketSpine.getComponent(_BasketAnimatorSpine["default"]);
      },
      updateData: function updateData(parent, roleData) {
        this._parent = parent;
        this._roleData = roleData;
        this._roleData.node = this;
        this._roleAnimator || (this._roleAnimator = this.roleSpine.getComponent(_RoleAnimatorSpine["default"]));
        this._basketAnimator || (this._basketAnimator = this.basketSpine.getComponent(_BasketAnimatorSpine["default"]));
        this.hpProgressBar.initData(this._roleData);
        this.ultimateProgressBar.initData(this._roleData);
        this._basketAnimator.initData(this._roleData);
        this.changeSkin();
        this._roleData.updateUICallback = this.updateUICallback.bind(this);
        this._roleData.reduceHpCallback = this.reduceHpCallback.bind(this);
        this._roleData.reduceEnergyCallback = this.reduceEnergyCallback.bind(this);
        this._roleData.updateEmergencyCallback = this.updateEmergencyCallback.bind(this);
        this._roleData.updateChargeStateCallback = this.updateChargeStateCallback.bind(this);
        this._roleData.updateDebuffCallback = this.updateDebuffCallback.bind(this);
        this._roleData.hpRegenerationCallback = this.hpRegenerationCallback.bind(this);
        this._roleData.healingCallback = this.healingCallback.bind(this);
        this._roleData.getHurtFromReflectCallback = this.getHurtFromReflectCallback.bind(this);
        this._roleData.updateStunCallback = this.updateStunCallback.bind(this);
        this._roleData.showSkillEffectCallback = this.showSkillEffectCallback.bind(this);
        this._roleData.combineSkillCallback = this.combineSkillCallback.bind(this);
      },
      atk: function atk() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.ATK);
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.ATK);
      },
      atk_2: function atk_2() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.ATK_2);
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.ATK);
      },
      death: function death() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.DEATH);
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.DEATH);
      },
      idle: function idle() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.IDLE);
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.IDLE);
      },
      run: function run() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.RUN);
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.RUN);
      },
      vic: function vic() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.VIC);
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.VIC);
      },
      ultra: function ultra() {
        this._roleAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.ULTRA);
      },
      basketUp: function basketUp() {
        this._basketAnimator.autoTrigger(gameConfig.ANIMATION_TYPE.UP);
      },
      changeSkin: function changeSkin() {
        if (!this.roleSpine.skeletonData) {
          console.warn("\u9aa8\u9abc\u6570\u636e\u672a\u52a0\u8f7d");
          return;
        }
        if (!this._roleData) return;
        var skinName = "default";
        if (this._roleData.equipmentList) for (var index = 0; index < this._roleData.equipmentList.length; index++) {
          var equipment = this._roleData.equipmentList[index];
          if (equipment.slot == EnumType.EQUIPMENT_SLOT_POS.WEAPON) {
            skinName = equipment.equipmentConfig.skinName;
            break;
          }
        }
        try {
          this.roleSpine.setSkin(skinName);
        } catch (error) {
          console.warn("\u6362\u80a4\u5931\u8d25");
          this.roleSpine.setSkin(this.roleSpine.defaultSkin);
        }
      },
      showBoom: function showBoom() {
        this.boomRootNode.active || (this.boomRootNode.active = true);
      },
      hideBoom: function hideBoom() {
        this.boomRootNode.active && (this.boomRootNode.active = false);
      },
      showBattleSmoke: function showBattleSmoke() {
        this.battleSmokeSpine.active || (this.battleSmokeSpine.active = true);
      },
      hideBattleSmoke: function hideBattleSmoke() {
        this.battleSmokeSpine.active && (this.battleSmokeSpine.active = false);
      },
      cleanValueNode: function cleanValueNode() {
        this.valueRootNode.removeAllChildren();
      },
      showBar: function showBar() {
        this.hpProgressBar.node.active = this.ultimateProgressBar.node.active = true;
      },
      hideBar: function hideBar() {
        this.hpProgressBar.node.active = this.ultimateProgressBar.node.active = false;
      },
      showDetailPanel: function showDetailPanel() {
        this.detailPanelView && (this.detailPanelView.node.active = true);
      },
      hideDetailPanel: function hideDetailPanel() {
        this.detailPanelView && (this.detailPanelView.node.active = false);
      },
      fight: function fight() {
        Global.utils.logMessage("fight");
        this._nextBulletIndex = -1;
        this.startTimer();
        this.cleanValueNode();
      },
      stopFight: function stopFight() {
        Global.utils.logMessage("stopFight");
        clearInterval(this._fightIT);
        this.setExtraMulti(1);
        this.cleanDebuff();
      },
      startTimer: function startTimer() {
        var magLen = this._roleData.data.bullets.length;
        var roleId = this._roleData.roleId;
        var fightTimer = this.getTimer();
        this._fightIT = setInterval(function() {
          if (this._stunTime || 0 == magLen) this.idle(); else {
            var speed = .2 * magLen;
            speed = speed > 3 ? 3 : speed;
            this.setExtraMulti(speed);
            if (fightTimer > 50) {
              this.atk();
              this.hideBattleSmoke();
            } else {
              "1000" == roleId ? this.atk_2() : this.atk();
              this.showBattleSmoke();
            }
            this._parent.onAttackComplete(this);
          }
          clearInterval(this._fightIT);
          this.startTimer();
        }.bind(this), fightTimer);
      },
      getTimer: function getTimer() {
        var magLen = this._roleData.data.bullets.length;
        if (0 == magLen) return 1e3;
        var speed = this._roleData.data.attack_speed / 100;
        var timer1 = 1e3 / speed;
        var timer = timer1 / magLen;
        timer = timer > 1e3 ? 1e3 : timer;
        return timer;
      },
      moveTo: function moveTo(posX, speed, callback) {
        this._isMoving = true;
        this._posX = posX;
        this._speed = speed;
        this._moveCallBack = callback;
      },
      playDialogueAnimation: function playDialogueAnimation(msgIds) {
        Global.utils.logMessage("\u603b\u7ed3\u51fa\u4e86\u4ee5\u4e0b\u51e0\u70b9:", msgIds);
        this.dialogueRootNode.removeAllChildren();
        if ("" == msgIds) return;
        var msgIdsList = msgIds.split("|");
        if (!msgIdsList.length) return;
        var delay = 0;
        for (var index = 0; index < msgIdsList.length; index++) {
          var msgId = msgIdsList[index];
          var dialogueItemNode = Global.poolManager.get(gameConfig.POOLMANAGER_TYPE.dialogueItem.key);
          if (dialogueItemNode) {
            this.dialogueRootNode.addChild(dialogueItemNode);
            dialogueItemNode.getComponent("DialogueItem").show(delay, msgId, this._roleData.roleId);
          }
          delay += 1;
        }
      },
      setExtraMulti: function setExtraMulti(value) {
        this._roleAnimator.extraMulti = value;
        this._basketAnimator.extraMulti = value;
      },
      setTimeScale: function setTimeScale(value) {
        this.roleSpine.timeScale = value;
        this.basketSpine.timeScale = value;
      },
      getAreaLaunchPosition: function getAreaLaunchPosition() {
        var box = this.areaRootNode.getBoundingBoxToWorld();
        var randX = Global.utils.getRandomNumber(null == box ? void 0 : box.xMin, null == box ? void 0 : box.xMax);
        var randY = Global.utils.getRandomNumber(null == box ? void 0 : box.yMin, null == box ? void 0 : box.yMax);
        return new cc.Vec3(randX, randY, 0);
      },
      getReceivePositon: function getReceivePositon() {
        var box = this.areaRootNode.getBoundingBoxToWorld();
        var randX = Global.utils.getRandomNumber(null == box ? void 0 : box.xMin, null == box ? void 0 : box.xMax);
        var randY = Global.utils.getRandomNumber(null == box ? void 0 : box.yMin, null == box ? void 0 : box.yMax);
        return new cc.Vec3(randX, randY, 0);
      },
      getValuePositon: function getValuePositon(isTop) {
        void 0 === isTop && (isTop = false);
        var box = this.valueRootNode.getBoundingBoxToWorld();
        if (isTop) return new cc.Vec3((null == box ? void 0 : box.xMin) + (null == box ? void 0 : box.width) / 2, (null == box ? void 0 : box.yMin) + (null == box ? void 0 : box.height), 0);
        var randX = Global.utils.getRandomNumber(null == box ? void 0 : box.xMin, null == box ? void 0 : box.xMax);
        var randY = Global.utils.getRandomNumber(null == box ? void 0 : box.yMin, null == box ? void 0 : box.yMax);
        return new cc.Vec3(randX, randY, 0);
      },
      getNextBullet: function getNextBullet() {
        this._nextBulletIndex++;
        var magLen = this._roleData.data.bullets.length;
        this._nextBulletIndex = this._nextBulletIndex > magLen - 1 ? 0 : this._nextBulletIndex;
        this.detailPanelView && this.detailPanelView.getNextBullet(this._nextBulletIndex);
        return [ this._roleData.data.bullets[this._nextBulletIndex] ];
      },
      updateDirection: function updateDirection() {
        if (this.direction == gameConfig.DIRECTION_ENUM.RIGHT) {
          this.node.setScale(1, 1);
          this.valueRootNode.setScale(1, 1);
          this.dialogueRootNode.setScale(1, 1);
          this.hpProgressBar.direction = gameConfig.DIRECTION_ENUM.RIGHT;
          this.ultimateProgressBar.direction = gameConfig.DIRECTION_ENUM.RIGHT;
        } else {
          this.node.setScale(-1, 1);
          this.valueRootNode.setScale(-1, 1);
          this.dialogueRootNode.setScale(-1, 1);
          this.hpProgressBar.direction = gameConfig.DIRECTION_ENUM.LEFT;
          this.ultimateProgressBar.direction = gameConfig.DIRECTION_ENUM.LEFT;
        }
      },
      initProgressBar: function initProgressBar() {
        this.hpProgressBar.initData(this._roleData);
        this.ultimateProgressBar.initData(this._roleData);
      },
      updateAllUI: function updateAllUI() {
        this.hpProgressBar.updateUI();
        this.ultimateProgressBar.updateUI();
        if (this.detailPanelView) {
          this.detailPanelView.updateUI();
          this.detailPanelView.updateMagLayout();
        }
      },
      updateStunCallback: function updateStunCallback(value) {
        this._stunTime = value;
        this._stunTime || this.idle();
        this.stunNode.active = 0 != value;
      },
      showSkillEffectCallback: function showSkillEffectCallback(skillId) {
        var skillData = Global.skillManager.getSkillConfig(skillId);
        if (skillData && "" != skillData.ability_up) {
          var ability_ups = skillData.ability_up.split("|");
          if (1 == ability_ups[0]) {
            var msg = Global.languageManager.i18nData["ability_up_" + ability_ups[1]];
            msg && msg.content && this.AbilityUp({
              roleId: this._roleData.roleId,
              msg: msg.content
            });
          }
        }
      },
      combineSkillCallback: function combineSkillCallback(combineArr, isMergeAnimation) {
        this._combineArr = combineArr;
        this._isMergeAnimation = isMergeAnimation;
      },
      getHurtFromReflectCallback: function getHurtFromReflectCallback(value) {
        this._parent.playValueAnimation({
          damageType: "HurtFromReflect",
          value: value
        }, this.getValuePositon(), {
          roleData: this._roleData.currentEnemy
        });
      },
      hpRegenerationCallback: function hpRegenerationCallback(_value) {
        var damageType = _value >= 0 ? "hp_regeneration" : EnumType.BULLET_DAMAGE_TYPE.BLEED;
        this._parent.playValueAnimation({
          damageType: damageType,
          value: _value
        }, this.getValuePositon());
        this._roleData.data.hp_regeneration < 0 && (this.toxicSpine.active = true);
      },
      healingCallback: function healingCallback(_value) {
        this._parent.playValueAnimation({
          damageType: "healing",
          value: _value
        }, this.getValuePositon());
      },
      updateEmergencyCallback: function updateEmergencyCallback(flag) {
        void 0 === flag && (flag = false);
        var skills = Global.skillManager.getSkillsByType(EnumType.ENHANCEMENT_EFFECT.EMERGENCY, this._roleData);
        skills.length >= 3 ? flag && !this.emergencySpine.active ? this.emergencySpine.active = true : !flag && this.emergencySpine.active && (this.emergencySpine.active = false) : flag && !this.emergencySmallSpine.active ? this.emergencySmallSpine.active = true : !flag && this.emergencySmallSpine.active && (this.emergencySmallSpine.active = false);
      },
      updateChargeStateCallback: function updateChargeStateCallback(flag) {
        void 0 === flag && (flag = false);
        flag && !this.chargeSpine.active ? this.chargeSpine.active = true : !flag && this.chargeSpine.active && (this.chargeSpine.active = false);
      },
      updateDebuffCallback: function updateDebuffCallback(args) {
        for (var key in args) {
          var value = args[key];
          for (var index = 0; index < this.debuffList.length; index++) {
            var debuff = this.debuffList[index];
            debuff.updateData(key, value);
          }
        }
        args.hasOwnProperty("attack_speed") && (this.attackSpeedNode.active = 0 != args.attack_speed);
        args.hasOwnProperty("amplified_damage") && (this.amplifiedDamageNode.active = 0 != args.amplified_damage);
      },
      cleanDebuff: function cleanDebuff(isCleanAll) {
        void 0 === isCleanAll && (isCleanAll = false);
        for (var index = 0; index < this.debuffList.length; index++) {
          var debuff = this.debuffList[index];
          debuff.clean();
        }
        this.emergencySpine.active = this.battleSmokeSpine.active = this.chargeSpine.active = this.boomRootNode.active = this.attackSpeedNode.active = this.amplifiedDamageNode.active = this.stunNode.active = this.toxicSpine.active = false;
        isCleanAll && (this.abilityUpSpine.node.active = false);
      },
      reduceHpCallback: function reduceHpCallback(_value) {
        this.hpProgressBar.reduceHp(_value);
        this.detailPanelView && this.detailPanelView.reduceHp(_value);
      },
      reduceEnergyCallback: function reduceEnergyCallback(_value) {
        this.ultimateProgressBar.reduceEnergy(_value);
      },
      updateUICallback: function updateUICallback() {
        this.hpProgressBar.updateUI();
        this.ultimateProgressBar.updateUI();
        this.detailPanelView && this.detailPanelView.updateUI();
      },
      update: function update(dt) {
        if (null == this._roleData) return;
        this._roleData.update && this._roleData.update(dt);
        if (this._isMoving) if (this.node.x > this._posX) this.node.x -= this._speed; else {
          this._isMoving = false;
          this._moveCallBack && this._moveCallBack();
        }
      },
      onDisable: function onDisable() {
        cc.director.GlobalEvent.off(gameConfig.GAME_EVENT.AbilityUp);
      },
      onClickTest: function onClickTest() {
        this.showSkillEffectCallback(1050);
      }
    });
    cc._RF.pop();
  }, {
    "./animator/BasketAnimatorSpine": "BasketAnimatorSpine",
    "./animator/RoleAnimatorSpine": "RoleAnimatorSpine",
    Debuff: "Debuff",
    DetailPanelView: "DetailPanelView",
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    HpProgressBar: "HpProgressBar",
    SpineBase: "SpineBase",
    UltimateProgressBar: "UltimateProgressBar"
  } ],
  ScrollBackgroundView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4895fJD751OGLQLlZtGHPxX", "ScrollBackgroundView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        rootNode: {
          type: cc.Node,
          default: null
        },
        _curSBG: null,
        _curSBGName: null
      },
      onAdded: function onAdded(args) {
        return true;
      },
      onEnable: function onEnable() {
        cc.director.GlobalEvent.on(gameConfig.GAME_EVENT.ChangeScrollBackground, this.ChangeScrollBackground, this);
      },
      ChangeScrollBackground: function ChangeScrollBackground(arg) {
        var curSBGName = null;
        var chapter = null;
        var level = null;
        if (arg && void 0 != arg.level) {
          chapter = arg.chapter;
          level = arg.level;
          curSBGName = Global.chapterManager.getSBGByLevel(level, chapter);
        } else curSBGName = Global.chapterManager.getDefaultSBG();
        if (this._curSBGName == curSBGName) {
          this.updatePosition();
          return;
        }
        this._curSBGName = curSBGName;
        this.rootNode.removeAllChildren();
        var scrollBGPreb = Global.res.getRes(gameConfig.PRELOADCONFIG[curSBGName].path);
        if (scrollBGPreb) {
          var scrollBG = cc.instantiate(scrollBGPreb);
          this._curSBG = scrollBG.getComponent("ScrollBackground");
          this.rootNode.addChild(scrollBG);
          this.updatePosition();
        }
      },
      updatePosition: function updatePosition() {
        if (!this._curSBG) return;
        var homePagePanel = Global.gui.get(gameConfig.UIID.HomePagePanel);
        homePagePanel ? this.rootNode.setPosition(0, -180) : this.rootNode.setPosition(0, 0);
      },
      getBackGroundSpeed: function getBackGroundSpeed() {
        return this._curSBG ? this._curSBG.getBackGroundSpeed() : 10;
      },
      onDisable: function onDisable() {
        cc.director.GlobalEvent.off(gameConfig.GAME_EVENT.ScrollBackground);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  ScrollBackground: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b375cAedgJEboYQTieKx+OE", "ScrollBackground");
    "use strict";
    var gameConfig = require("GameConfig");
    var TEST_OFFX = 0;
    var ScrollGroup = cc.Class({
      name: "ScrollGroup",
      properties: {
        nodeList: {
          type: [ cc.Node ],
          default: [],
          displayName: "\u76ee\u6807\u8282\u70b9"
        },
        zIndex: {
          type: cc.Integer,
          default: 1,
          step: 1,
          displayName: "\u5c42\u7ea7"
        },
        speed: {
          type: cc.Integer,
          default: 1,
          step: 1,
          displayName: "\u79fb\u52a8\u901f\u5ea6"
        },
        autoMove: {
          default: false,
          displayName: "\u81ea\u52a8\u79fb\u52a8"
        },
        _totalWidth: {
          type: cc.Integer,
          default: 0,
          displayName: "\u6eda\u52a8\u603b\u5bbd\u5ea6"
        }
      }
    });
    cc.Class({
      extends: cc.Component,
      properties: {
        sgroup: {
          type: [ ScrollGroup ],
          default: [],
          displayName: "\u6eda\u52a8\u7ec4"
        },
        _scrollFlag: false
      },
      onEnable: function onEnable() {
        cc.director.GlobalEvent.on(gameConfig.GAME_EVENT.ScrollBackground, this.ScrollBackground, this);
      },
      onLoad: function onLoad() {
        var visibleSize = cc.view.getVisibleSize();
        for (var i = 0; i < this.sgroup.length; i++) {
          var group = this.sgroup[i];
          var node = group.nodeList[0];
          node.zIndex = group.zIndex;
          var nodeBox = node.getBoundingBox();
          node.x = -visibleSize.width / 2 + group._totalWidth;
          group._totalWidth += (null == nodeBox ? void 0 : nodeBox.width) + TEST_OFFX;
          while (group._totalWidth - visibleSize.width < (null == nodeBox ? void 0 : nodeBox.width)) {
            var _node$parent;
            var tempNode = cc.instantiate(node);
            tempNode.x = node.x + group._totalWidth;
            tempNode.zIndex = group.zIndex;
            null == (_node$parent = node.parent) ? void 0 : _node$parent.addChild(tempNode);
            group.nodeList.push(tempNode);
            group._totalWidth += (null == nodeBox ? void 0 : nodeBox.width) + TEST_OFFX;
          }
        }
      },
      ScrollBackground: function ScrollBackground(arg) {
        this._scrollFlag = arg.scrollFlag;
      },
      getBackGroundSpeed: function getBackGroundSpeed() {
        return this.sgroup[this.sgroup.length - 1].speed;
      },
      update: function update(dt) {
        for (var i = 0; i < this.sgroup.length; i++) {
          var group = this.sgroup[i];
          if (!group.autoMove && !this._scrollFlag) continue;
          for (var j = 0; j < group.nodeList.length; j++) {
            var node = group.nodeList[j];
            var nodeBox = node.getBoundingBox();
            node.x -= group.speed;
            if (node.x <= -cc.view.getVisibleSize().width / 2 - (null == nodeBox ? void 0 : nodeBox.width)) {
              var lastNode = group.nodeList[group.nodeList.length - 1];
              var lastNodeBox = lastNode.getBoundingBox();
              var tempNode = group.nodeList.shift();
              group.nodeList.push(tempNode);
              tempNode.x = lastNode.x + (null == lastNodeBox ? void 0 : lastNodeBox.width) + TEST_OFFX;
            }
          }
        }
      },
      onDisable: function onDisable() {
        cc.director.GlobalEvent.off(gameConfig.GAME_EVENT.ScrollBackground);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  SettingsView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2aa8cimtZA6J8aNDTwym4e", "SettingsView");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        languageNode: {
          type: cc.Node,
          default: null
        },
        playIdNode: {
          type: cc.Node,
          default: null
        },
        musicToggle: {
          type: cc.Toggle,
          default: null
        },
        soundToggle: {
          type: cc.Toggle,
          default: null
        },
        closeBtn: {
          type: cc.Node,
          default: null
        },
        continueBtn: {
          type: cc.Node,
          default: null
        },
        versionLab: {
          type: cc.Label,
          default: null
        },
        _args: null
      },
      onAdded: function onAdded(args) {
        this._args = args;
        this.initUI();
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {},
      initUI: function initUI() {
        this.playIdNode.getComponent("RichTextUpdater").setContent("settings_playerID");
        var currentLanguage = Global.storage.get(gameConfig.COMMON_KEYS.LANGUAGE, Global.config.languageDefault);
        this.languageNode.getComponent("RichTextUpdater").setContent("settings_language_" + currentLanguage);
        var flag = Global.audio.switchMusic;
        flag ? this.musicToggle.uncheck() : this.musicToggle.check();
        flag = Global.audio.switchEffect;
        flag ? this.soundToggle.uncheck() : this.soundToggle.check();
        var fromGame = this._args && true == this._args.fromGame;
        this.closeBtn.active = !fromGame;
        this.continueBtn.active = fromGame;
        this.versionLab.string = "V" + Global.config.version;
      },
      onClickCopyBtn: function onClickCopyBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.toast("\u529f\u80fd\u5f00\u53d1\u4e2d...");
      },
      onClickSwitchLanguageBtn: function onClickSwitchLanguageBtn() {
        Global.audio.playEffect("audio/click");
        Global.gui.open(gameConfig.UIID.LanguagesPanel);
      },
      onClickMusicBtn: function onClickMusicBtn() {
        Global.audio.playEffect("audio/click");
        var isChecked = this.musicToggle.isChecked;
        Global.audio.switchMusic = !isChecked;
        isChecked || Global.audio.playMusicLoop("audio/music");
      },
      onClickSoundBtn: function onClickSoundBtn() {
        Global.audio.playEffect("audio/click");
        Global.audio.switchEffect = !this.soundToggle.isChecked;
      },
      onClickQuitGameBtn: function onClickQuitGameBtn() {
        var _this = this;
        Global.audio.playEffect("audio/click");
        var fromGame = this._args && true == this._args.fromGame;
        var uiArgs = fromGame ? {
          title: "common_tips_title",
          content: "tips_quitbattle",
          okWord: "common_quit",
          cancelWord: "common_cancel",
          okFunc: function okFunc() {
            var _Global$gui$get;
            _this.onCloseUI();
            var battleView = null == (_Global$gui$get = Global.gui.get(gameConfig.UIID.BattlePanel)) ? void 0 : _Global$gui$get.getComponent("BattleView");
            null == battleView ? void 0 : battleView.gotoHomePage();
          },
          cancelFunc: function cancelFunc() {},
          needCancel: true
        } : {
          title: "common_tips_title",
          content: "tips_quitgame",
          okWord: "common_quit",
          cancelWord: "common_cancel",
          okFunc: function okFunc() {
            if (cc.sys.isNative) cc.game.end(); else {
              window.opener = null;
              window.open("", "_self");
              window.close();
            }
          },
          cancelFunc: function cancelFunc() {},
          needCancel: true
        };
        Global.gui.open(gameConfig.UIID.Confirm, uiArgs);
      },
      onClickContinueBtn: function onClickContinueBtn() {
        this.onCloseUI();
      },
      onCloseUI: function onCloseUI() {
        Global.audio.playEffect("audio/click");
        Global.gui.remove(gameConfig.UIID.SettingsPanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  ShopConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "9fdd8PXIjNBlaF8XPSLyV4y", "ShopConfig");
    "use strict";
    var ShopConfig = cc.Class({
      name: "ShopConfig",
      statics: {
        data: [ {
          id: "2001",
          name: "\u7ea2\u8272\u5b9d\u7bb1",
          equipmentIds: "1001,1003,1101,1201,1301",
          equipmentRarity: "3,2,1,0",
          allS: "",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "2002",
          name: "\u7ea2\u8272\u5b9d\u7bb1",
          equipmentIds: "1002,1009,1103,1202,1302",
          equipmentRarity: "3,2,1,0",
          allS: "",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "2003",
          name: "\u7ea2\u8272\u5b9d\u7bb1",
          equipmentIds: "1004,1007,1102,1203,1303",
          equipmentRarity: "3,2,1,0",
          allS: "",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "2004",
          name: "\u7ea2\u8272\u5b9d\u7bb1",
          equipmentIds: "1005,1008,1101,1201,1302",
          equipmentRarity: "3,2,1,0",
          allS: "",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "2005",
          name: "\u7ea2\u8272\u5b9d\u7bb1",
          equipmentIds: "1006,1010,1103,1202,1301",
          equipmentRarity: "3,2,1,0",
          allS: "",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "2006",
          name: "\u7ea2\u8272\u5b9d\u7bb1",
          equipmentIds: "1009,1005,1102,1203,1303",
          equipmentRarity: "3,2,1,0",
          allS: "",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "1002",
          name: "\u6a59\u8272\u5b9d\u7bb1",
          equipmentIds: "",
          equipmentRarity: "3,2,1,0",
          allS: "1",
          items: "",
          allWeight: "65,300,900,2500,6235"
        }, {
          id: "1003",
          name: "\u7d2b\u8272\u5b9d\u7bb1",
          equipmentIds: "",
          equipmentRarity: "3,2,1,0",
          allS: "1",
          items: "1001|20,1002|2",
          allWeight: "4,26,60,150,160,504,96"
        }, {
          id: "1004",
          name: "\u84dd\u8272\u5b9d\u7bb1",
          equipmentIds: "",
          equipmentRarity: "1,0",
          allS: "",
          items: "1001|20,1002|1",
          allWeight: "10,30,57,3"
        } ]
      }
    });
    module.exports = ShopConfig;
    cc._RF.pop();
  }, {} ],
  ShopManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3579bxMhz1GSI4FDtEt87Vt", "ShopManager");
    "use strict";
    var ShopConfig = require("ShopConfig");
    var EquipmentConfig = require("EquipmentConfig");
    var ItemData = require("ItemData");
    var EquipmentData = require("EquipmentData");
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    var WEIGHT_WEAPON = 25;
    var WEIGHT_BAG = 15;
    var WEIGHT_RING = 30;
    var WEIGHT_NECKLACE = 30;
    var WEIGHT_WEAPON_S = 25;
    var WEIGHT_BAG_S = 25;
    var WEIGHT_RING_S = 25;
    var WEIGHT_NECKLACE_S = 25;
    var ShopManager = cc.Class({
      extends: cc.Component,
      properties: {},
      ctor: function ctor() {
        this.RED = 0;
        this.ORANGE = 1;
        this.PURPLE = 2;
        this.BLUE = 3;
        this.DIAMOND_VALUE_LIST = [ 120, 600, 1800, 3600, 6e3, 12e3 ];
        this.DIAMOND_PRICE_LIST = [ .99, 4.99, 14.99, 29.99, 49.99, 99.99 ];
        this.COIN_COUNT = 500;
        this.COIN_DIAMOND_LIST = [ 180, 580 ];
        this.ANY_S_MAX_COUNT = 180;
        this.EPIC_MAX_COUNT = 10;
        this.EPIC_S_MAX_COUNT = 60;
        this.UNCOMMON_MAX_COUNT = 10;
        this.RED_BOX_DIAMOND_1 = 320;
        this.RED_BOX_DIAMOND_10 = 2980;
        this.ORANGE_BOX_DIAMOND_1 = 320;
        this.ORANGE_BOX_DIAMOND_10 = 2980;
        this.BLUE_BOX_DIAMOND_1 = 80;
        this.RED_EPIC_INDEX = 1;
        this.RED_EPIC_S_INDEX = 0;
        this.ORANGE_EPIC_INDEX = 1;
        this.ORANGE_EPIC_S_INDEX = 0;
        this.PURPLE_EPIC_INDEX = 1;
        this.BLUE_UNCOMMON_INDEX = 0;
        this.PURPLE_AD_MAX_COUNT = 1;
        this.BLUE_AD_MAX_COUNT = 3;
        this.BLUE_FREE_MAX_COUNT = 1;
        this.keyType = [];
        this.keyType[this.RED] = "1019";
        this.keyType[this.ORANGE] = "1019";
        this.keyType[this.PURPLE] = "1018";
        this.keyType[this.BLUE] = "1017";
      },
      getKeyCount: function getKeyCount(_boxType) {
        var itemId = this.keyType[_boxType];
        var itemCount = Global.bagManager.checkItemCount(itemId, Global.roleData);
        return itemCount;
      },
      getCurrentCoinCount: function getCurrentCoinCount(_index) {
        var currentChapterData = Global.passiveHarvestManager.getCurrentChapterData();
        switch (_index) {
         case 0:
          return this.COIN_COUNT + 125 * currentChapterData.coin;

         case 1:
          return 3 * (this.COIN_COUNT + 125 * currentChapterData.coin);

         case 2:
          return 12 * (this.COIN_COUNT + 125 * currentChapterData.coin);
        }
      },
      init: function init() {
        this.WEIGHT_SLOT = [ WEIGHT_WEAPON, WEIGHT_BAG, WEIGHT_NECKLACE, WEIGHT_RING ];
        this.WEIGHT_SLOT_S = [ WEIGHT_WEAPON_S, WEIGHT_BAG_S, WEIGHT_NECKLACE_S, WEIGHT_RING_S ];
        this.WEIGHT_COUNT = [];
        this.COUNT = [];
        this.WEIGHT_COUNT[20] = [ 1, 4, 15, 30, 50 ];
        this.COUNT[20] = [ 20, 10, 5, 2, 1 ];
        this.WEIGHT_COUNT[10] = [ 5, 15, 30, 50 ];
        this.COUNT[10] = [ 10, 5, 2, 1 ];
        this.WEIGHT_COUNT[5] = [ 20, 30, 50 ];
        this.COUNT[5] = [ 5, 2, 1 ];
        this.WEIGHT_COUNT[2] = [ 30, 70 ];
        this.COUNT[2] = [ 2, 1 ];
        this.WEIGHT_COUNT[1] = [ 100 ];
        this.COUNT[1] = [ 1 ];
        this.allBoxes = [];
        this.allBoxes[this.RED] = [];
        for (var i = 0; i < ShopConfig.data.length; i++) {
          var config = ShopConfig.data[i];
          config.id >= 2e3 && this.allBoxes[this.RED].push(config);
          1002 == config.id && (this.allBoxes[this.ORANGE] = config);
          1003 == config.id && (this.allBoxes[this.PURPLE] = config);
          1004 == config.id && (this.allBoxes[this.BLUE] = config);
          this.handleConfig(config);
        }
        this.storageData = Global.storage.getJson(gameConfig.COMMON_KEYS.SHOP_BOXES_DATA);
        if (null == this.storageData) {
          this.storageData = {};
          this.storageData.anySCount = 0;
          this.storageData.redBox = {};
          this.storageData.redBox.epicCount = 0;
          this.storageData.redBox.epicSCount = 0;
          this.storageData.orangeBox = {};
          this.storageData.orangeBox.epicCount = 0;
          this.storageData.orangeBox.epicSCount = 0;
          this.storageData.purpleBox = {};
          this.storageData.purpleBox.epicCount = 0;
          this.storageData.purpleBox.adCount = 0;
          this.storageData.blueBox = {};
          this.storageData.blueBox.uncommonCount = 0;
          this.storageData.blueBox.adCount = 0;
          this.storageData.blueBox.freeCount = 0;
        }
      },
      saveData: function saveData() {
        Global.storage.set(gameConfig.COMMON_KEYS.SHOP_BOXES_DATA, this.storageData);
      },
      calculateCurrentWeek: function calculateCurrentWeek() {
        var start = new Date("2025-05-01");
        var now = new Date(Global.networkTimer);
        var timezoneOffset = 6e4 * now.getTimezoneOffset();
        var localNow = new Date(now - timezoneOffset);
        var localStart = new Date(start - timezoneOffset);
        var diffTime = localNow - localStart;
        var diffWeeks = Math.floor(diffTime / 6048e5);
        return diffWeeks;
      },
      handleConfig: function handleConfig(_config) {
        _config.allItems = {};
        _config.allWeightList = [];
        var allWeightArr = _config.allWeight.split(",");
        for (var i = 0; i < allWeightArr.length; i++) _config.allWeightList.push(parseInt(allWeightArr[i]));
        var totalGroupWeight = _config.allWeightList.reduce(function(a, b) {
          return a + b;
        }, 0);
        var groupProbs = _config.allWeightList.map(function(w) {
          return w / totalGroupWeight;
        });
        var index = 0;
        _config.allItems[index] = {};
        _config.allItems[index].total = 0;
        if ("" != _config.equipmentIds) {
          var equipmentIdsArr = _config.equipmentIds.split(",");
          for (var _i = 0; _i < equipmentIdsArr.length; _i++) {
            var equipmentId = equipmentIdsArr[_i];
            var equipmentConfig = Global.equipmentManager.getEquipmentConfig(equipmentId);
            if (null == _config.allItems[index][equipmentConfig.slot]) {
              _config.allItems[index][equipmentConfig.slot] = [];
              _config.allItems[index][equipmentConfig.slot].slotTotal = 0;
            }
            _config.allItems[index][equipmentConfig.slot].push(equipmentConfig);
            _config.allItems[index][equipmentConfig.slot].slotTotal++;
            _config.allItems[index].type = "equipment";
            _config.allItems[index].isS = true;
            _config.allItems[index].rarity = equipmentConfig.rarity;
            _config.allItems[index].groupProbs = groupProbs[index];
            _config.allItems[index].total++;
          }
          index++;
        }
        if (1 == _config.allS) {
          for (var _i2 = 0; _i2 < EquipmentConfig.data.length; _i2++) {
            var _equipmentConfig = EquipmentConfig.data[_i2];
            if (_equipmentConfig.id < 2e3) {
              if (null == _config.allItems[index][_equipmentConfig.slot]) {
                _config.allItems[index][_equipmentConfig.slot] = [];
                _config.allItems[index][_equipmentConfig.slot].slotTotal = 0;
              }
              _config.allItems[index][_equipmentConfig.slot].push(_equipmentConfig);
              _config.allItems[index][_equipmentConfig.slot].slotTotal++;
              _config.allItems[index].type = "equipment";
              _config.allItems[index].isS = true;
              _config.allItems[index].rarity = _equipmentConfig.rarity;
              _config.allItems[index].groupProbs = groupProbs[index];
              _config.allItems[index].total++;
            }
          }
          index++;
        }
        _config.allItems[index] = {};
        _config.allItems[index].total = 0;
        if ("" != _config.equipmentRarity) {
          var equipmentRarityArr = _config.equipmentRarity.split(",");
          for (var j = 0; j < equipmentRarityArr.length; j++) {
            var rarity = equipmentRarityArr[j];
            for (var _k = 0; _k < EquipmentConfig.data.length; _k++) {
              var _equipmentConfig2 = EquipmentConfig.data[_k];
              if (_equipmentConfig2.id < 2e3) continue;
              if (_equipmentConfig2.rarity == rarity) {
                if (null == _config.allItems[index][_equipmentConfig2.slot]) {
                  _config.allItems[index][_equipmentConfig2.slot] = [];
                  _config.allItems[index][_equipmentConfig2.slot].slotTotal = 0;
                }
                _config.allItems[index][_equipmentConfig2.slot].push(_equipmentConfig2);
                _config.allItems[index][_equipmentConfig2.slot].slotTotal++;
                _config.allItems[index].type = "equipment";
                _config.allItems[index].rarity = rarity;
                _config.allItems[index].groupProbs = groupProbs[index];
                _config.allItems[index].total++;
              }
            }
            index++;
            _config.allItems[index] = {};
            _config.allItems[index].total = 0;
          }
        }
        if ("" != _config.items) {
          var itemsArr = _config.items.split(",");
          var combineWeight = 0;
          _config.itemsWeight = [];
          for (var k = groupProbs.length - 1; k > groupProbs.length - itemsArr.length - 1; k--) {
            var weight = groupProbs[k];
            _config.itemsWeight.unshift(weight);
            combineWeight += weight;
          }
          _config.allWeightList = _config.allWeightList.slice(0, _config.allWeightList.length - itemsArr.length);
          _config.allWeightList.push(combineWeight * totalGroupWeight);
          _config.allItems[index] = [];
          _config.allItems[index].total = 0;
          var itemConfig;
          for (var l = 0; l < itemsArr.length; l++) {
            var itemArr = itemsArr[l].split("|");
            itemConfig = {};
            itemConfig.config = Global.bagManager.getItemConfig(itemArr[0]);
            itemConfig.maxCount = itemArr[1];
            itemConfig.prob = groupProbs[index + l];
            _config.allItems[index].push(itemConfig);
            _config.allItems[index].type = "item";
            _config.allItems[index].groupProbs = combineWeight;
            _config.allItems[index].total++;
          }
        }
      },
      getBox: function getBox(_index) {
        if (_index == this.RED) {
          var weekNumber = this.calculateCurrentWeek();
          var rewardIndex = weekNumber % this.allBoxes[_index].length;
          return this.allBoxes[_index][rewardIndex];
        }
        return this.allBoxes[_index];
      },
      getNextChangeTime: function getNextChangeTime() {
        var now = new Date(Global.networkTimer);
        var nextChange = new Date(now);
        var daysUntilMonday = (7 - now.getDay() + 1) % 7;
        nextChange.setDate(now.getDate() + daysUntilMonday);
        nextChange.setHours(0, 0, 0, 0);
        now > nextChange && nextChange.setDate(nextChange.getDate() + 7);
        return nextChange;
      },
      weightedRandom: function weightedRandom(weights) {
        var totalWeight = weights.reduce(function(sum, weight) {
          return sum + weight;
        }, 0);
        var random = Math.random() * totalWeight;
        var weightSum = 0;
        for (var i = 0; i < weights.length; i++) {
          weightSum += weights[i];
          if (random <= weightSum) return i;
        }
        return weights.length - 1;
      },
      openBox: function openBox(_index, _specialIndex) {
        var result;
        var currentBox = this.getBox(_index);
        var typeIndex = this.weightedRandom(currentBox.allWeightList);
        var currentGroup = null != _specialIndex ? currentBox.allItems[_specialIndex] : currentBox.allItems[typeIndex];
        if (currentGroup.type && "item" == currentGroup.type) {
          var itemIndex = this.weightedRandom(currentBox.itemsWeight);
          var item = currentGroup[itemIndex];
          var countWeight = this.WEIGHT_COUNT[item.maxCount];
          var countIndex = this.weightedRandom(countWeight);
          var count = this.COUNT[item.maxCount][countIndex];
          result = new ItemData();
          result.setData(Global.roleData, item.config);
          result.count = count;
        } else {
          var weightSlot = currentGroup.isS ? this.WEIGHT_SLOT_S : this.WEIGHT_SLOT;
          var slotIndex = this.weightedRandom(weightSlot);
          var equipmentList = currentGroup[slotIndex];
          var randomIndex = 1 == equipmentList.length ? 0 : Math.round(Math.random(equipmentList.length - 1));
          result = new EquipmentData();
          result.setData(Global.roleData, equipmentList[randomIndex]);
        }
        Global.taskManager.updateProgress(EnumType.TASK_TYPE.OPEN_BOX, 1);
        return result;
      },
      hasEquipmentRedDot: function hasEquipmentRedDot() {
        if (this.storageData.anySCount >= this.ANY_S_MAX_COUNT) return true;
        if (this.getKeyCount(this.RED) > 0) return true;
        if (this.getKeyCount(this.ORANGE) > 0) return true;
        if (this.getKeyCount(this.PURPLE) > 0) return true;
        if (this.getKeyCount(this.BLUE) > 0) return true;
        if (this.storageData.purpleBox.adCount < this.PURPLE_AD_MAX_COUNT) return true;
        if (this.storageData.blueBox.adCount < this.BLUE_AD_MAX_COUNT) return true;
        if (this.storageData.blueBox.freeCount < this.BLUE_FREE_MAX_COUNT) return true;
        return false;
      },
      hasPaymentRedDot: function hasPaymentRedDot() {
        return 0 == this.getCoinAdCount();
      },
      getCoinAdCount: function getCoinAdCount() {
        var coinAdCount = Global.storage.getJson(gameConfig.COMMON_KEYS.SHOP_COIN_AD_COUNT);
        if (null == coinAdCount) {
          coinAdCount = 0;
          Global.storage.set(gameConfig.COMMON_KEYS.SHOP_COIN_AD_COUNT, coinAdCount);
        }
      },
      start: function start() {}
    });
    module.exports = ShopManager;
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentConfig: "EquipmentConfig",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig",
    ItemData: "ItemData",
    ShopConfig: "ShopConfig"
  } ],
  ShopPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "0b7ed6CTBJLN4ZCDaZ5aaIn", "ShopPanel");
    "use strict";
    var gameConfig = require("GameConfig");
    var EquipmentData = require("EquipmentData");
    var EnumType = require("EnumType");
    var ItemData = require("ItemData");
    cc.Class({
      extends: cc.Component,
      properties: {
        equipmentNode: cc.Node,
        diamondNode: cc.Node,
        equipmnetScrollView: cc.ScrollView,
        diamondScrollView: cc.ScrollView,
        toggleBtn_equipment: cc.Toggle,
        toggleBtn_diamond: cc.Toggle,
        diamondCountLabelList: [ cc.Node ],
        diamondPriceLabelList: [ cc.Node ],
        diamondFirstLabelList: [ cc.Node ],
        diamondFirstNodeList: [ cc.Node ],
        coinCountLabelList: [ cc.Node ],
        coinPriceLabelList: [ cc.Node ],
        coinAdIcon: cc.Node,
        paymentTitle_1: cc.Node,
        paymentTitle_2: cc.Node,
        paymentNodeList: [ cc.Node ],
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        equipmentContainer: cc.Node,
        anySLabel: cc.Node,
        progressBar: cc.Node,
        anySItem: cc.Node,
        redBoxTimeLabel: cc.Node,
        redBoxDescLabel: cc.Node,
        redBoxGet1DiamondLabel: cc.Node,
        redBoxGet10DiamondLabel: cc.Node,
        redBoxGet1KeyNode: cc.Node,
        redBoxGet1DiamondNode: cc.Node,
        redBoxGet10KeyNode: cc.Node,
        redBoxGet10DiamondNode: cc.Node,
        redBoxGet1KeyLabel: cc.Node,
        redBoxGet10KeyLabel: cc.Node,
        orangeBoxDescLabel: cc.Node,
        orangeBoxGet1DiamondLabel: cc.Node,
        orangeBoxGet10DiamondLabel: cc.Node,
        orangeBoxGet1KeyNode: cc.Node,
        orangeBoxGet1DiamondNode: cc.Node,
        orangeBoxGet10KeyNode: cc.Node,
        orangeBoxGet10DiamondNode: cc.Node,
        orangeBoxGet1KeyLabel: cc.Node,
        orangeBoxGet10KeyLabel: cc.Node,
        purpleBoxDescLabel: cc.Node,
        purpleBoxGet1DiamondLabel: cc.Node,
        purpleBoxGet1KeyNode: cc.Node,
        purpleBoxGet1DiamondNode: cc.Node,
        purpleBoxGet1KeyLabel: cc.Node,
        purpleBoxGet1KeyMaxLabel: cc.Node,
        purpleBoxAdCountLabel: cc.Node,
        purpleBoxAdBtn: cc.Node,
        blueBoxDescLabel: cc.Node,
        blueBoxGet1DiamondLabel: cc.Node,
        blueBoxGet1KeyNode: cc.Node,
        blueBoxGet1DiamondNode: cc.Node,
        blueBoxGet1KeyLabel: cc.Node,
        blueBoxAdCountLabel: cc.Node,
        blueBoxAdBtn: cc.Node,
        blueBoxFreeBtn: cc.Node,
        blueBtnLayout: cc.Node,
        title_1: cc.Node,
        node_1: cc.Node,
        node_2: cc.Node,
        node_3: cc.Node,
        equipmentItemFlash: sp.Skeleton,
        anySRedDot: cc.Node,
        purpleBoxRedDot: cc.Node,
        equipmentRedDot: cc.Node,
        paymentRedDot: cc.Node
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        var _this = this;
        this.roleData = _args.roleData;
        this.showBuyCoin = _args.showBuyCoin;
        for (var i = 0; i < this.diamondCountLabelList.length; i++) {
          this.diamondCountLabelList[i].getComponent("LabelUpdater").setString("" + Global.utils.formatNumberWithUnit(Global.shopManager.DIAMOND_VALUE_LIST[i]));
          this.diamondPriceLabelList[i].getComponent("LabelUpdater").setString("$" + Global.utils.formatNumberWithUnit(Global.shopManager.DIAMOND_PRICE_LIST[i]));
          this.diamondFirstLabelList[i].getComponent("LabelUpdater").setString(Global.languageManager.t("shop_first_desc", [ Global.utils.formatNumberWithUnit(Global.shopManager.DIAMOND_VALUE_LIST[i]) ]));
        }
        this.coinCountLabelList[0].getComponent("LabelUpdater").setString("" + Global.utils.formatNumberWithUnit(Global.shopManager.getCurrentCoinCount(0)));
        this.coinCountLabelList[1].getComponent("LabelUpdater").setString("" + Global.utils.formatNumberWithUnit(Global.shopManager.getCurrentCoinCount(1)));
        this.coinCountLabelList[2].getComponent("LabelUpdater").setString("" + Global.utils.formatNumberWithUnit(Global.shopManager.getCurrentCoinCount(2)));
        this.coinPriceLabelList[0].getComponent("LabelUpdater").setString(Global.shopManager.COIN_DIAMOND_LIST[0]);
        this.coinPriceLabelList[1].getComponent("LabelUpdater").setString(Global.shopManager.COIN_DIAMOND_LIST[1]);
        this.redColor = new cc.color(255, 0, 0);
        this.whiteColor = new cc.color(255, 255, 255);
        this.lastIndex = -1;
        this.timer = Date.now();
        this.EIGHT_SECONDS = 8e3;
        this.equipmentItemFlash.node.active = false;
        this.equipmentItemFlash.setCompleteListener(function(trackEntry) {
          _this.equipmentItemFlash.node.active = false;
        });
        this.updateUI();
      },
      onClickSelectEquipment: function onClickSelectEquipment() {
        if (Global.shopManager.storageData.anySCount < Global.shopManager.ANY_S_MAX_COUNT) {
          Global.gui.toast(Global.languageManager.t("shop_select_equipment_tip_2"));
          return;
        }
        var args = {};
        args.equipmentList = Global.shopManager.getBox(Global.shopManager.RED).allItems[0];
        Global.gui.open(gameConfig.UIID.ShopSelectEquipment, args);
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData) {
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        equipmentItem.setScale(.85);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, Global.roleData);
        this.equipmentContainer.addChild(equipmentItem);
        equipmentItem.opacity = 0;
        equipmentItem.rotation = 5;
        return equipmentItem;
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.equipmentContainer.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
      },
      updateCountdown: function updateCountdown() {
        var nextChange = Global.shopManager.getNextChangeTime();
        var now = new Date(Global.networkTimer);
        var diff = nextChange - now;
        if (diff <= 0) {
          clearInterval(this.countdownInterval);
          this.updateRedBoxUI();
          this.countdownInterval = setInterval(this.updateCountdown.bind(this), 1e3);
          return;
        }
        var days = Math.floor(diff / 864e5);
        var hours = Math.floor(diff % 864e5 / 36e5);
        var minutes = Math.floor(diff % 36e5 / 6e4);
        var seconds = Math.floor(diff % 6e4 / 1e3);
        var timeStr = days + Global.languageManager.t("day") + hours + Global.languageManager.t("hour");
        this.redBoxTimeLabel.getComponent("LabelUpdater").setString(timeStr);
      },
      updateUI: function updateUI() {
        this.diamondFirst = Global.storage.getJson(gameConfig.COMMON_KEYS.SHOP_DIAMOND_FIRST);
        if (null == this.diamondFirst) {
          this.diamondFirst = [ 0, 0, 0, 0, 0, 0 ];
          Global.storage.set(gameConfig.COMMON_KEYS.SHOP_DIAMOND_FIRST, this.diamondFirst);
        }
        for (var i = 0; i < this.diamondFirstNodeList.length; i++) this.diamondFirstNodeList[i].active = 0 == this.diamondFirst[i];
        this.coinAdCount = Global.shopManager.getCoinAdCount();
        this.coinAdIcon.active = 0 == this.coinAdCount;
        this.anySLabel.getComponent("LabelUpdater").setString(Global.shopManager.storageData.anySCount + "/" + Global.shopManager.ANY_S_MAX_COUNT);
        this.progressBar.width = 739 * Global.shopManager.storageData.anySCount / Global.shopManager.ANY_S_MAX_COUNT;
        if (null == this.anySItemData) {
          var itemConfig = Global.bagManager.getItemConfig(1015);
          this.anySItemData = new ItemData();
          this.anySItemData.setData(null, itemConfig);
          this.anySItem.getComponent("BagItem").setData(this.anySItemData);
        }
        this.anySRedDot.active = Global.shopManager.storageData.anySCount >= Global.shopManager.ANY_S_MAX_COUNT;
        this.updateRedBoxUI();
        this.updateOrangeBoxUI();
        this.updatePurpleBoxUI();
        this.updateBlueBoxUI();
        this.equipmentRedDot.active = Global.shopManager.hasEquipmentRedDot();
        this.paymentRedDot.active = Global.shopManager.hasPaymentRedDot();
        var homePageNode = Global.gui.get(gameConfig.UIID.HomePagePanel);
        homePageNode && homePageNode.getComponent("HomePageView").updateShopRedDot();
      },
      updateBlueBoxUI: function updateBlueBoxUI() {
        this.blueBoxDescLabel.getComponent("RichTextUpdater").setContent("shop_blue_desc_2", [ Global.shopManager.UNCOMMON_MAX_COUNT - Global.shopManager.storageData.blueBox.uncommonCount ]);
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.BLUE);
        if (keyCount > 0) {
          this.blueBoxGet1KeyNode.active = true;
          this.blueBoxGet1DiamondNode.active = false;
          var maxCount = keyCount > 10 ? 10 : keyCount;
          this.blueBoxGet1KeyLabel.getComponent("LabelUpdater").setString(keyCount + "/" + maxCount);
        } else {
          this.blueBoxGet1KeyNode.active = false;
          this.blueBoxGet1DiamondNode.active = true;
          this.blueBoxGet1DiamondLabel.getComponent("LabelUpdater").setString(Global.shopManager.BLUE_BOX_DIAMOND_1);
        }
        this.blueBoxAdCountLabel.getComponent("LabelUpdater").setString(Global.shopManager.BLUE_AD_MAX_COUNT - Global.shopManager.storageData.blueBox.adCount);
        this.blueBoxAdBtn.active = Global.shopManager.storageData.blueBox.adCount < Global.shopManager.BLUE_AD_MAX_COUNT;
        this.blueBoxFreeBtn.active = Global.shopManager.storageData.blueBox.freeCount < Global.shopManager.BLUE_FREE_MAX_COUNT;
        this.blueBtnLayout.active = !this.blueBoxFreeBtn.active;
      },
      updatePurpleBoxUI: function updatePurpleBoxUI() {
        this.purpleBoxDescLabel.getComponent("RichTextUpdater").setContent("shop_purple_desc_2", [ Global.shopManager.EPIC_MAX_COUNT - Global.shopManager.storageData.purpleBox.epicCount ]);
        this.purpleBoxGet1DiamondNode.active = false;
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.PURPLE);
        if (keyCount > 0) {
          var maxCount = keyCount > 10 ? 10 : keyCount;
          this.purpleBoxGet1KeyLabel.getComponent("LabelUpdater").setString(keyCount);
          this.purpleBoxGet1KeyLabel.getComponent("LabelUpdater").setColor(this.whiteColor);
          this.purpleBoxGet1KeyMaxLabel.getComponent("LabelUpdater").setString("/" + maxCount);
        } else {
          this.purpleBoxGet1KeyLabel.getComponent("LabelUpdater").setString("0");
          this.purpleBoxGet1KeyLabel.getComponent("LabelUpdater").setColor(this.redColor);
          this.purpleBoxGet1KeyMaxLabel.getComponent("LabelUpdater").setString("/1");
        }
        this.purpleBoxRedDot.active = keyCount > 0;
        this.purpleBoxAdCountLabel.getComponent("LabelUpdater").setString(Global.shopManager.PURPLE_AD_MAX_COUNT - Global.shopManager.storageData.purpleBox.adCount);
        this.purpleBoxAdBtn.active = Global.shopManager.storageData.purpleBox.adCount < Global.shopManager.PURPLE_AD_MAX_COUNT;
      },
      updateOrangeBoxUI: function updateOrangeBoxUI() {
        this.orangeBoxDescLabel.getComponent("RichTextUpdater").setContent("shop_desc_limited", [ Global.shopManager.EPIC_MAX_COUNT - Global.shopManager.storageData.orangeBox.epicCount, Global.shopManager.EPIC_S_MAX_COUNT - Global.shopManager.storageData.orangeBox.epicSCount ]);
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.ORANGE);
        if (keyCount > 0) {
          this.orangeBoxGet1KeyNode.active = true;
          this.orangeBoxGet1DiamondNode.active = false;
          this.orangeBoxGet10KeyNode.active = true;
          this.orangeBoxGet10DiamondNode.active = false;
          this.orangeBoxGet1KeyLabel.getComponent("LabelUpdater").setString(keyCount + "/1");
          var maxCount = keyCount > 10 ? 10 : keyCount;
          this.orangeBoxGet10KeyLabel.getComponent("LabelUpdater").setString(keyCount + "/" + maxCount);
        } else {
          this.orangeBoxGet1KeyNode.active = false;
          this.orangeBoxGet1DiamondNode.active = true;
          this.orangeBoxGet10KeyNode.active = false;
          this.orangeBoxGet10DiamondNode.active = true;
          this.orangeBoxGet1DiamondLabel.getComponent("LabelUpdater").setString(Global.shopManager.ORANGE_BOX_DIAMOND_1);
          this.orangeBoxGet10DiamondLabel.getComponent("LabelUpdater").setString(Global.shopManager.ORANGE_BOX_DIAMOND_10);
        }
      },
      getRandomIndexExcludingLast: function getRandomIndexExcludingLast(arr) {
        var _this2 = this;
        var availableIndices = arr.map(function(_, index) {
          return index;
        }).filter(function(index) {
          return index !== _this2.lastIndex;
        });
        var randomIndex = Math.floor(Math.random() * availableIndices.length);
        this.lastIndex = availableIndices[randomIndex];
        return this.lastIndex;
      },
      updateRedBoxUI: function updateRedBoxUI() {
        this.clearItems();
        var redBoxData = Global.shopManager.getBox(Global.shopManager.RED);
        var eqipmentIdsArr = redBoxData.equipmentIds.split(",");
        for (var i = 0; i < eqipmentIdsArr.length; i++) {
          var id = eqipmentIdsArr[i];
          var equipmentConfig = Global.equipmentManager.getEquipmentConfig(id);
          var equipmentData = new EquipmentData();
          equipmentData.setData(null, equipmentConfig);
          var equipmentItem = this.generateEquipmentItem(equipmentData);
          cc.tween(equipmentItem).delay(.1 * i + .2).to(.2, {
            opacity: 255,
            rotation: 0
          }).start();
        }
        this.updateCountdown();
        this.countdownInterval = setInterval(this.updateCountdown.bind(this), 1e3);
        this.redBoxDescLabel.getComponent("RichTextUpdater").setContent("shop_desc_limited", [ Global.shopManager.EPIC_MAX_COUNT - Global.shopManager.storageData.redBox.epicCount, Global.shopManager.EPIC_S_MAX_COUNT - Global.shopManager.storageData.redBox.epicSCount ]);
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.RED);
        if (keyCount > 0) {
          this.redBoxGet1KeyNode.active = true;
          this.redBoxGet1DiamondNode.active = false;
          this.redBoxGet10KeyNode.active = true;
          this.redBoxGet10DiamondNode.active = false;
          this.redBoxGet1KeyLabel.getComponent("LabelUpdater").setString(keyCount + "/1");
          var maxCount = keyCount > 10 ? 10 : keyCount;
          this.redBoxGet10KeyLabel.getComponent("LabelUpdater").setString(keyCount + "/" + maxCount);
        } else {
          this.redBoxGet1KeyNode.active = false;
          this.redBoxGet1DiamondNode.active = true;
          this.redBoxGet10KeyNode.active = false;
          this.redBoxGet10DiamondNode.active = true;
          this.redBoxGet1DiamondLabel.getComponent("LabelUpdater").setString(Global.shopManager.RED_BOX_DIAMOND_1);
          this.redBoxGet10DiamondLabel.getComponent("LabelUpdater").setString(Global.shopManager.RED_BOX_DIAMOND_10);
        }
      },
      openOrangeBox: function openOrangeBox() {
        var result = null;
        Global.shopManager.storageData.orangeBox.epicSCount++;
        Global.shopManager.storageData.orangeBox.epicCount++;
        Global.shopManager.storageData.anySCount++;
        Global.shopManager.storageData.anySCount = Global.shopManager.storageData.anySCount > Global.shopManager.ANY_S_MAX_COUNT ? Global.shopManager.ANY_S_MAX_COUNT : Global.shopManager.storageData.anySCount;
        if (Global.shopManager.storageData.orangeBox.epicSCount >= Global.shopManager.EPIC_S_MAX_COUNT) {
          Global.shopManager.storageData.orangeBox.epicSCount = 0;
          Global.shopManager.storageData.orangeBox.epicCount = 0;
          result = Global.shopManager.openBox(Global.shopManager.ORANGE, Global.shopManager.ORANGE_EPIC_S_INDEX);
        }
        if (Global.shopManager.storageData.orangeBox.epicCount >= Global.shopManager.EPIC_MAX_COUNT) {
          Global.shopManager.storageData.orangeBox.epicCount = 0;
          result = Global.shopManager.openBox(Global.shopManager.ORANGE, Global.shopManager.ORANGE_EPIC_INDEX);
        }
        null == result && (result = Global.shopManager.openBox(Global.shopManager.ORANGE));
        null != result.equipmentConfig ? Global.equipmentManager.addEquipment2Bag(result, Global.roleData) : Global.bagManager.addItem2Bag(result, Global.roleData);
        if (result.rarity == EnumType.RARE_TYPE_EQUIPMENT.EPIC && result.equipmentId < 2e3) {
          Global.shopManager.storageData.orangeBox.epicSCount = 0;
          Global.shopManager.storageData.orangeBox.epicCount = 0;
        } else result.rarity == EnumType.RARE_TYPE_EQUIPMENT.EPIC && (Global.shopManager.storageData.orangeBox.epicCount = 0);
        Global.shopManager.saveData();
        this.updateUI();
        return result;
      },
      onClickGet10BlueBox: function onClickGet10BlueBox(_event, _passAni) {
        var openCount = 0;
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.BLUE);
        if (keyCount > 0) {
          openCount = keyCount > 10 ? 10 : keyCount;
          Global.bagManager.removeItem(Global.shopManager.keyType[Global.shopManager.BLUE], null, openCount, Global.roleData);
        } else {
          if (!(Global.roleData.diamond >= Global.shopManager.BLUE_BOX_DIAMOND_1)) {
            Global.gui.toast(Global.languageManager.t("not_enough_diamond"));
            return;
          }
          Global.roleData.updateDiamond(-1 * Global.shopManager.BLUE_BOX_DIAMOND_1);
          openCount = 1;
        }
        var result = [];
        for (var i = 0; i < openCount; i++) result.push(this.openBlueBox());
        this.handleResult(result, Global.shopManager.BLUE, _passAni);
      },
      onClickGet1BlueBox_ad: function onClickGet1BlueBox_ad() {
        if (Global.shopManager.storageData.blueBox.adCount >= Global.shopManager.BLUE_AD_MAX_COUNT) {
          Global.gui.toast(Global.languageManager.t("not_enough_ad_count"));
          return;
        }
        Global.shopManager.storageData.blueBox.adCount++;
        var result = this.openBlueBox();
        var args = {};
        args.itemList = [ result ];
        args.boxType = Global.shopManager.BLUE;
        Global.gui.open(gameConfig.UIID.OpenBox, args);
      },
      onClickGet1BlueBox_free: function onClickGet1BlueBox_free() {
        if (Global.shopManager.storageData.blueBox.freeCount >= Global.shopManager.BLUE_FREE_MAX_COUNT) {
          Global.gui.toast(Global.languageManager.t("not_enough_free_count"));
          return;
        }
        Global.shopManager.storageData.blueBox.freeCount++;
        var result = this.openBlueBox();
        var args = {};
        args.itemList = [ result ];
        args.boxType = Global.shopManager.BLUE;
        Global.gui.open(gameConfig.UIID.OpenBox, args);
      },
      onClickGet1PurpleBox_ad: function onClickGet1PurpleBox_ad() {
        if (Global.shopManager.storageData.purpleBox.adCount >= Global.shopManager.PURPLE_AD_MAX_COUNT) {
          Global.gui.toast(Global.languageManager.t("not_enough_ad_count"));
          return;
        }
        Global.shopManager.storageData.purpleBox.adCount++;
        var result = this.openPurpleBox();
        var args = {};
        args.itemList = [ result ];
        args.boxType = Global.shopManager.PURPLE;
        Global.gui.open(gameConfig.UIID.OpenBox, args);
      },
      onClickGet10PurpleBox: function onClickGet10PurpleBox(_event, _passAni) {
        var openCount = 0;
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.PURPLE);
        if (!(keyCount > 0)) {
          Global.gui.toast(Global.languageManager.t("not_enough_key_count"));
          return;
        }
        openCount = keyCount > 10 ? 10 : keyCount;
        Global.bagManager.removeItem(Global.shopManager.keyType[Global.shopManager.PURPLE], null, openCount, Global.roleData);
        var result = [];
        for (var i = 0; i < openCount; i++) result.push(this.openPurpleBox());
        this.handleResult(result, Global.shopManager.PURPLE, _passAni);
      },
      openBlueBox: function openBlueBox() {
        var result = null;
        Global.shopManager.storageData.blueBox.uncommonCount++;
        if (Global.shopManager.storageData.blueBox.uncommonCount >= Global.shopManager.UNCOMMON_MAX_COUNT) {
          Global.shopManager.storageData.blueBox.uncommonCount = 0;
          result = Global.shopManager.openBox(Global.shopManager.BLUE, Global.shopManager.BLUE_UNCOMMON_INDEX);
        }
        null == result && (result = Global.shopManager.openBox(Global.shopManager.BLUE));
        null != result.equipmentConfig ? Global.equipmentManager.addEquipment2Bag(result, Global.roleData) : Global.bagManager.addItem2Bag(result, Global.roleData);
        result.rarity == EnumType.RARE_TYPE_EQUIPMENT.UNCOMMON && (Global.shopManager.storageData.blueBox.uncommonCount = 0);
        Global.shopManager.saveData();
        this.updateUI();
        return result;
      },
      openPurpleBox: function openPurpleBox() {
        var result = null;
        Global.shopManager.storageData.purpleBox.epicCount++;
        if (Global.shopManager.storageData.purpleBox.epicCount >= Global.shopManager.EPIC_MAX_COUNT) {
          Global.shopManager.storageData.purpleBox.epicCount = 0;
          result = Global.shopManager.openBox(Global.shopManager.PURPLE, Global.shopManager.PURPLE_EPIC_INDEX);
        }
        null == result && (result = Global.shopManager.openBox(Global.shopManager.PURPLE));
        null != result.equipmentConfig ? Global.equipmentManager.addEquipment2Bag(result, Global.roleData) : Global.bagManager.addItem2Bag(result, Global.roleData);
        result.rarity == EnumType.RARE_TYPE_EQUIPMENT.EPIC && (Global.shopManager.storageData.purpleBox.epicCount = 0);
        Global.shopManager.saveData();
        this.updateUI();
        return result;
      },
      onClickGet1OrangeBox: function onClickGet1OrangeBox() {
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.ORANGE);
        if (keyCount > 0) Global.bagManager.removeItem(Global.shopManager.keyType[Global.shopManager.ORANGE], null, 1, Global.roleData); else {
          if (!(Global.roleData.diamond >= Global.shopManager.ORANGE_BOX_DIAMOND_1)) {
            Global.gui.toast(Global.languageManager.t("not_enough_diamond"));
            return;
          }
          Global.roleData.updateDiamond(-1 * Global.shopManager.ORANGE_BOX_DIAMOND_1);
        }
        var result = this.openOrangeBox();
        var args = {};
        args.itemList = [ result ];
        args.boxType = Global.shopManager.ORANGE;
        Global.gui.open(gameConfig.UIID.OpenBox, args);
      },
      onClickGet10OrangeBox: function onClickGet10OrangeBox(_event, _passAni) {
        var openCount = 0;
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.ORANGE);
        if (keyCount > 0) {
          openCount = keyCount > 10 ? 10 : keyCount;
          Global.bagManager.removeItem(Global.shopManager.keyType[Global.shopManager.ORANGE], null, openCount, Global.roleData);
        } else {
          if (!(Global.roleData.diamond >= Global.shopManager.ORANGE_BOX_DIAMOND_10)) {
            Global.gui.toast(Global.languageManager.t("not_enough_diamond"));
            return;
          }
          Global.roleData.updateDiamond(-1 * Global.shopManager.ORANGE_BOX_DIAMOND_10);
          openCount = 10;
        }
        var result = [];
        for (var i = 0; i < openCount; i++) result.push(this.openOrangeBox());
        this.handleResult(result, Global.shopManager.ORANGE, _passAni);
      },
      openRedBox: function openRedBox() {
        var result = null;
        Global.shopManager.storageData.redBox.epicSCount++;
        Global.shopManager.storageData.redBox.epicCount++;
        Global.shopManager.storageData.anySCount++;
        Global.shopManager.storageData.anySCount = Global.shopManager.storageData.anySCount > Global.shopManager.ANY_S_MAX_COUNT ? Global.shopManager.ANY_S_MAX_COUNT : Global.shopManager.storageData.anySCount;
        if (Global.shopManager.storageData.redBox.epicSCount >= Global.shopManager.EPIC_S_MAX_COUNT) {
          Global.shopManager.storageData.redBox.epicSCount = 0;
          Global.shopManager.storageData.redBox.epicCount = 0;
          result = Global.shopManager.openBox(Global.shopManager.RED, Global.shopManager.RED_EPIC_S_INDEX);
        }
        if (Global.shopManager.storageData.redBox.epicCount >= Global.shopManager.EPIC_MAX_COUNT) {
          Global.shopManager.storageData.redBox.epicCount = 0;
          result = Global.shopManager.openBox(Global.shopManager.RED, Global.shopManager.RED_EPIC_INDEX);
        }
        null == result && (result = Global.shopManager.openBox(Global.shopManager.RED));
        null != result.equipmentConfig ? Global.equipmentManager.addEquipment2Bag(result, Global.roleData) : Global.bagManager.addItem2Bag(result, Global.roleData);
        if (result.rarity == EnumType.RARE_TYPE_EQUIPMENT.EPIC && result.equipmentId < 2e3) {
          Global.shopManager.storageData.redBox.epicSCount = 0;
          Global.shopManager.storageData.redBox.epicCount = 0;
        } else result.rarity == EnumType.RARE_TYPE_EQUIPMENT.EPIC && (Global.shopManager.storageData.redBox.epicCount = 0);
        Global.shopManager.saveData();
        this.updateUI();
        return result;
      },
      onClickGet1RedBox: function onClickGet1RedBox() {
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.RED);
        if (keyCount > 0) Global.bagManager.removeItem(Global.shopManager.keyType[Global.shopManager.RED], null, 1, Global.roleData); else {
          if (!(Global.roleData.diamond >= Global.shopManager.RED_BOX_DIAMOND_1)) {
            Global.gui.toast(Global.languageManager.t("not_enough_diamond"));
            return;
          }
          Global.roleData.updateDiamond(-1 * Global.shopManager.RED_BOX_DIAMOND_1);
        }
        var result = this.openRedBox();
        var args = {};
        args.itemList = [ result ];
        args.boxType = Global.shopManager.RED;
        Global.gui.open(gameConfig.UIID.OpenBox, args);
      },
      handleResult: function handleResult(_itemList, _boxType, _passAni) {
        if (true == _passAni) {
          var args = {};
          if (_itemList.length > 1) {
            args.boxType = _boxType;
            args.itemList = _itemList;
            Global.gui.open(gameConfig.UIID.OpenBoxResult, args);
          } else {
            args.items = _itemList;
            args.rewardType = EnumType.REWARD_TYPE.ITEM;
            Global.gui.open(gameConfig.UIID.RewardsPanel, args);
          }
        } else {
          var _args2 = {};
          _args2.itemList = _itemList;
          _args2.boxType = _boxType;
          Global.gui.open(gameConfig.UIID.OpenBox, _args2);
        }
      },
      onClickGet10RedBox: function onClickGet10RedBox(_event, _passAni) {
        var openCount = 0;
        var keyCount = Global.shopManager.getKeyCount(Global.shopManager.RED);
        if (keyCount > 0) {
          openCount = keyCount > 10 ? 10 : keyCount;
          Global.bagManager.removeItem(Global.shopManager.keyType[Global.shopManager.RED], null, openCount, Global.roleData);
        } else {
          if (!(Global.roleData.diamond >= Global.shopManager.RED_BOX_DIAMOND_10)) {
            Global.gui.toast(Global.languageManager.t("not_enough_diamond"));
            return;
          }
          Global.roleData.updateDiamond(-1 * Global.shopManager.RED_BOX_DIAMOND_10);
          openCount = 10;
        }
        var result = [];
        for (var i = 0; i < openCount; i++) result.push(this.openRedBox());
        this.handleResult(result, Global.shopManager.RED, _passAni);
      },
      onClickDiamondCard: function onClickDiamondCard(_event, _index) {
        var isFirst = this.diamondFirst[_index];
        if (0 == isFirst) {
          this.diamondFirst[_index] = 1;
          Global.storage.set(gameConfig.COMMON_KEYS.SHOP_DIAMOND_FIRST, this.diamondFirst);
          Global.roleData.updateDiamond(2 * Global.shopManager.DIAMOND_VALUE_LIST[_index]);
          this.diamondFirstNodeList[_index].active = 0 == this.diamondFirst[_index];
        } else Global.roleData.updateDiamond(Global.shopManager.DIAMOND_VALUE_LIST[_index]);
      },
      onClickCoinCard: function onClickCoinCard(_event, _index) {
        switch (_index) {
         case "ad":
          if (1 == this.coinAdCount) {
            Global.gui.toast(Global.languageManager.t("not_enough_ad_count"));
            return;
          }
          this.coinAdCount = 1;
          Global.storage.set(gameConfig.COMMON_KEYS.SHOP_COIN_AD_COUNT, this.coinAdCount);
          var coin = Global.shopManager.getCurrentCoinCount(0);
          Global.roleData.updateCoin(coin);
          this.coinAdIcon.active = 0 == this.coinAdCount;
          Global.taskManager.updateProgress(EnumType.TASK_TYPE.BUY_COIN, 1);
          break;

         case "0":
         case "1":
          var currentChapterCoin = Global.shopManager.getCurrentCoinCount(parseInt(_index) + 1);
          var needDiamond = Global.shopManager.COIN_DIAMOND_LIST[_index];
          if (Global.roleData.diamond < needDiamond) {
            Global.gui.toast(Global.languageManager.t("not_enough_diamond"));
            return;
          }
          Global.roleData.updateDiamond(-1 * needDiamond);
          Global.roleData.updateCoin(currentChapterCoin);
          Global.taskManager.updateProgress(EnumType.TASK_TYPE.BUY_COIN, 1);
        }
      },
      onClickRateInfo: function onClickRateInfo(_event, _index) {
        var args = {};
        args.allItems = Global.shopManager.getBox(_index).allItems;
        Global.gui.open(gameConfig.UIID.ShopProbsPanel, args);
      },
      showEquipmentAni: function showEquipmentAni() {
        this.title_1.opacity = 0;
        this.node_1.opacity = 0;
        this.node_1.rotation = 5;
        this.node_2.opacity = 0;
        this.node_2.rotation = 5;
        this.node_3.opacity = 0;
        this.node_3.rotation = 5;
        cc.tween(this.title_1).to(.2, {
          opacity: 255
        }).start();
        cc.tween(this.node_1).delay(.1).to(.2, {
          opacity: 255,
          rotation: 0
        }).start();
        cc.tween(this.node_2).delay(.2).to(.2, {
          opacity: 255,
          rotation: 0
        }).start();
        cc.tween(this.node_3).delay(.3).to(.2, {
          opacity: 255,
          rotation: 0
        }).start();
      },
      resetPaymentNode: function resetPaymentNode() {
        for (var i = 0; i < this.paymentNodeList.length; i++) {
          var paymentNode = this.paymentNodeList[i];
          paymentNode.setScale(0, 0);
        }
      },
      showPaymentAni: function showPaymentAni() {
        this.paymentTitle_1.opacity = 0;
        this.paymentTitle_2.opacity = 0;
        cc.tween(this.paymentTitle_1).to(.2, {
          opacity: 255
        }).start();
        for (var j = 0; j < this.paymentNodeList.length; j++) {
          var paymentNode = this.paymentNodeList[j];
          cc.tween(paymentNode).delay(.1 * j + .1).to(.2, {
            scale: 1
          }, {
            easing: "backOut"
          }).start();
        }
        cc.tween(this.paymentTitle_2).delay(.5).to(.2, {
          opacity: 255
        }).start();
      },
      onEnable: function onEnable() {
        this.resetPaymentNode();
        if (true == this.showBuyCoin) {
          this.equipmentNode.active = false;
          this.diamondNode.active = true;
          this.toggleBtn_equipment.isChecked = false;
          this.toggleBtn_diamond.isChecked = true;
          this.diamondScrollView.scrollToBottom();
          this.showPaymentAni();
        } else {
          this.equipmentNode.active = true;
          this.diamondNode.active = false;
          this.toggleBtn_equipment.isChecked = true;
          this.toggleBtn_diamond.isChecked = false;
          this.equipmnetScrollView.scrollToTop();
          this.showEquipmentAni();
        }
      },
      onClickEquipment: function onClickEquipment() {
        this.equipmentNode.active = true;
        this.diamondNode.active = false;
        this.equipmnetScrollView.scrollToTop();
        this.showEquipmentAni();
        this.updateUI();
        this.resetPaymentNode();
      },
      onClickDiamond: function onClickDiamond() {
        this.equipmentNode.active = false;
        this.diamondNode.active = true;
        this.diamondScrollView.scrollToTop();
        this.showPaymentAni();
      },
      update: function update(dt) {
        if (Date.now() - this.timer >= this.EIGHT_SECONDS) {
          this.timer = Date.now();
          var index = this.getRandomIndexExcludingLast(this.equipmentItemList);
          var currentNode = this.equipmentItemList[index];
          this.equipmentItemFlash.node.active = true;
          this.equipmentItemFlash.node.setPosition(currentNode.x, currentNode.y);
          this.equipmentItemFlash.setAnimation(0, "Limited_Sg", false);
        }
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  ShopProbItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e79f3DeF+NLI6uAxu9yx2Fi", "ShopProbItem");
    "use strict";
    var EnumType = require("EnumType");
    var EquipmentData = require("EquipmentData");
    var ItemData = require("ItemData");
    cc.Class({
      extends: cc.Component,
      properties: {
        sIcon: cc.Node,
        titleLabel: cc.Node,
        rateLabel: cc.Node,
        container: cc.Node,
        containerBg: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ],
        bagItemPrefab: cc.Prefab,
        bagItemPool: [ cc.Node ],
        bagItemList: [ cc.Node ]
      },
      ctor: function ctor() {
        this.labelColorList = [];
        this.labelColorList[0] = new cc.color(220, 221, 221);
        this.labelColorList[1] = new cc.color(142, 227, 95);
        this.labelColorList[2] = new cc.color(79, 217, 245);
        this.labelColorList[3] = new cc.color(221, 139, 255);
      },
      start: function start() {},
      setContent: function setContent(_itemList) {
        this.clearItems();
        this.sIcon.active = true == _itemList.isS;
        if ("item" == _itemList.type) {
          this.titleLabel.getComponent("LabelUpdater").setContent("shop_prob_item_title_item");
          this.titleLabel.getComponent("LabelUpdater").setColor(this.labelColorList[0]);
          var index = 0;
          for (var c = 0; c < _itemList.length; c++) {
            var item = _itemList[c];
            var countList = Global.shopManager.COUNT[item.maxCount];
            for (var i = 0; i < countList.length; i++) {
              var itemData = new ItemData();
              itemData.setData(null, item.config);
              itemData.count = countList[i];
              var weight = item.prob * Global.shopManager.WEIGHT_COUNT[item.maxCount][i] * .01;
              var prob = Global.utils.removeTrailingZeros(100 * weight);
              this.generateBagItem(itemData, index, Number(prob).toFixed(3) + "%");
              index++;
            }
          }
          this.containerBg.height = this.container.height = 170 * Math.ceil(index / 5) + 50;
        } else {
          this.titleLabel.getComponent("LabelUpdater").setContent("equipment_rarity_" + _itemList.rarity);
          this.titleLabel.getComponent("LabelUpdater").setColor(this.labelColorList[parseInt(_itemList.rarity)]);
          var _index2 = 0;
          for (var _i in _itemList) {
            var slotList = _itemList[_i];
            if (!Array.isArray(slotList)) continue;
            for (var j = 0; j < slotList.length; j++) {
              var equipConfig = slotList[j];
              var equipmentData = new EquipmentData();
              equipmentData.setData(null, equipConfig);
              var weightSlot = _itemList.isS ? _itemList.groupProbs / 5 : _itemList.groupProbs * Global.shopManager.WEIGHT_SLOT[equipConfig.slot] * .01 / slotList.slotTotal;
              var _prob2 = Global.utils.removeTrailingZeros(100 * weightSlot);
              this.generateEquipmentItem(equipmentData, _index2, Number(_prob2).toFixed(3) + "%");
              _index2++;
            }
          }
          this.containerBg.height = this.container.height = 170 * Math.ceil(_index2 / 5) + 50;
        }
        this.rateLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("shop_prob_item_rate") + Global.utils.removeTrailingZeros((100 * _itemList.groupProbs).toFixed(3)) + "%");
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.container.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
        while (this.bagItemList.length > 0) {
          var _item = this.bagItemList.pop();
          this.container.removeChild(_item, false);
          this.bagItemPool.push(_item);
        }
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData, _index, _prob) {
        var startX = -300;
        var startY = -100;
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        equipmentItem.setScale(.66);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, null, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.NONE, EnumType.EQUIPMENT_ITEM_SHOW_TYPE.PROB_FLAG, _prob);
        this.container.addChild(equipmentItem);
        equipmentItem.x = startX + 150 * Math.floor(_index % 5);
        equipmentItem.y = startY + -1 * Math.floor(_index / 5) * 170;
      },
      generateBagItem: function generateBagItem(_itemData, _index, _prob) {
        var startX = -300;
        var startY = -100;
        var bagItem;
        bagItem = this.bagItemPool.length > 0 ? this.bagItemPool.pop() : cc.instantiate(this.bagItemPrefab);
        bagItem.setScale(.66);
        this.bagItemList.push(bagItem);
        bagItem.getComponent("BagItem").setData(_itemData, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.PROB_FLAG, _prob);
        this.container.addChild(bagItem);
        bagItem.x = startX + 150 * Math.floor(_index % 5);
        bagItem.y = startY + -1 * Math.floor(_index / 5) * 170;
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentData: "EquipmentData",
    ItemData: "ItemData"
  } ],
  ShopProbs: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "47f43T59lJFLLinGA4ekGls", "ShopProbs");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        shopProbItemPrefab: cc.Prefab,
        probItemList: [ cc.Node ],
        probItemPool: [ cc.Node ],
        container: cc.Node
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        this.updateUI(_args.allItems);
      },
      clearItems: function clearItems() {
        while (this.probItemList.length > 0) {
          var item = this.probItemList.pop();
          this.container.removeChild(item, false);
          this.probItemPool.push(item);
        }
      },
      updateUI: function updateUI(_allItems) {
        this.clearItems();
        for (var index in _allItems) {
          var list = _allItems[index];
          if (0 == list.total) continue;
          if (0 === Object.keys(list).length && list.constructor === Object) continue;
          this.generateProbItem(list);
        }
      },
      generateProbItem: function generateProbItem(_list) {
        var shopProbItem;
        shopProbItem = this.probItemPool.length > 0 ? this.probItemPool.pop() : cc.instantiate(this.shopProbItemPrefab);
        this.probItemList.push(shopProbItem);
        shopProbItem.getComponent("ShopProbItem").setContent(_list);
        this.container.addChild(shopProbItem);
      },
      onClickClose: function onClickClose() {
        Global.gui.remove(gameConfig.UIID.ShopProbsPanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  ShopSelectEquipment: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1ca6fmKG3xCaIFVANhgU9jg", "ShopSelectEquipment");
    "use strict";
    var gameConfig = require("GameConfig");
    var EquipmentData = require("EquipmentData");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        container: cc.Node,
        equipmentItemPrefab: cc.Prefab,
        equipmentItemPool: [ cc.Node ],
        equipmentItemList: [ cc.Node ]
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        this.currentSelect = null;
        this.updateUI(_args.equipmentList);
      },
      clearItems: function clearItems() {
        while (this.equipmentItemList.length > 0) {
          var item = this.equipmentItemList.pop();
          this.container.removeChild(item, false);
          this.equipmentItemPool.push(item);
        }
      },
      updateUI: function updateUI(_list) {
        this.clearItems();
        var index = 0;
        for (var i in _list) {
          var slotList = _list[i];
          if (!Array.isArray(slotList)) continue;
          for (var j = 0; j < slotList.length; j++) {
            var equipConfig = slotList[j];
            var equipmentData = new EquipmentData();
            equipmentData.setData(null, equipConfig);
            this.generateEquipmentItem(equipmentData, index);
            index++;
          }
        }
        this.container.height = 170 * Math.ceil(index / 5) + 50;
      },
      onSelectEquipment: function onSelectEquipment(_equipmentItem) {
        for (var i = 0; i < this.equipmentItemList.length; i++) {
          var equipmentItem = this.equipmentItemList[i];
          equipmentItem.getComponent("EquipmentItem").showSelect(_equipmentItem == equipmentItem);
        }
        this.currentSelect = _equipmentItem;
      },
      onClickChange: function onClickChange() {
        if (null == this.currentSelect) {
          Global.gui.toast(Global.languageManager.t("shop_select_equipment_tip"));
          return;
        }
        var equipmentData = this.currentSelect.getComponent("EquipmentItem").equipmentData;
        Global.equipmentManager.addEquipment2Bag(equipmentData, Global.roleData);
        Global.shopManager.storageData.anySCount = 0;
        Global.shopManager.saveData();
        this.onClickClose();
        var args = {};
        args.items = [ equipmentData ];
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        var shopNode = Global.gui.get(gameConfig.UIID.ShopPagePanel);
        shopNode && shopNode.getComponent("ShopPanel").updateUI();
      },
      generateEquipmentItem: function generateEquipmentItem(_equipmentData, _index) {
        var startX = -300;
        var startY = -100;
        var equipmentItem;
        equipmentItem = this.equipmentItemPool.length > 0 ? this.equipmentItemPool.pop() : cc.instantiate(this.equipmentItemPrefab);
        equipmentItem.setScale(.66);
        this.equipmentItemList.push(equipmentItem);
        equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, null, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.SELECT_EQUIPMENT);
        this.container.addChild(equipmentItem);
        equipmentItem.x = startX + 150 * Math.floor(_index % 5);
        equipmentItem.y = startY + -1 * Math.floor(_index / 5) * 170;
      },
      onClickClose: function onClickClose() {
        Global.gui.remove(gameConfig.UIID.ShopSelectEquipment);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig"
  } ],
  SigninBaseData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b2cb18iG9FLe6+OFDKoLjyJ", "SigninBaseData");
    "use strict";
    var data = [];
    data["0"] = {
      id: "0",
      weekType: "0",
      rewardType: "0",
      rewardId: "",
      amount: "50",
      comment: "50\u94bb"
    };
    data["1"] = {
      id: "1",
      weekType: "0",
      rewardType: "3",
      rewardId: "",
      amount: "3",
      comment: "\u91d1\u526a\u5200x3"
    };
    data["2"] = {
      id: "2",
      weekType: "0",
      rewardType: "4",
      rewardId: "1003",
      amount: "1",
      comment: "\u7d2b\u88c5\u6750\u6599x1"
    };
    data["3"] = {
      id: "3",
      weekType: "0",
      rewardType: "1",
      rewardId: "",
      amount: "5",
      comment: "\u94dc\u526a\u5200x5"
    };
    data["4"] = {
      id: "4",
      weekType: "0",
      rewardType: "2",
      rewardId: "",
      amount: "10",
      comment: "\u94f6\u526a\u5200x10"
    };
    data["5"] = {
      id: "5",
      weekType: "0",
      rewardType: "0",
      rewardId: "0",
      amount: "100",
      comment: "100\u94bb"
    };
    data["6"] = {
      id: "6",
      weekType: "0",
      rewardType: "5|0",
      rewardId: "2004|0",
      amount: "1|300",
      comment: "\u7d2b\u88c5\u5907x1"
    };
    data["7"] = {
      id: "7",
      weekType: "1",
      rewardType: "2",
      rewardId: "",
      amount: "3",
      comment: "\u94f6\u526a\u5200x3"
    };
    data["8"] = {
      id: "8",
      weekType: "1",
      rewardType: "0",
      rewardId: "",
      amount: "100",
      comment: "100\u94bb"
    };
    data["9"] = {
      id: "9",
      weekType: "1",
      rewardType: "2",
      rewardId: "",
      amount: "3",
      comment: "\u94f6\u526a\u5200x3"
    };
    data["10"] = {
      id: "10",
      weekType: "1",
      rewardType: "0",
      rewardId: "",
      amount: "100",
      comment: "100\u94bb"
    };
    data["11"] = {
      id: "11",
      weekType: "1",
      rewardType: "2",
      rewardId: "",
      amount: "3",
      comment: "\u94f6\u526a\u5200x3"
    };
    data["12"] = {
      id: "12",
      weekType: "1",
      rewardType: "0",
      rewardId: "",
      amount: "100",
      comment: "100\u94bb"
    };
    data["13"] = {
      id: "13",
      weekType: "1",
      rewardType: "0",
      rewardId: "",
      amount: "1000",
      comment: "1000\u94bb"
    };
    module.exports = data;
    cc._RF.pop();
  }, {} ],
  SigninManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "48c11t4E8FHQpuweaizFPiY", "SigninManager");
    "use strict";
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        "value" in descriptor && (descriptor.writable = true);
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      protoProps && _defineProperties(Constructor.prototype, protoProps);
      staticProps && _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var gameConfig = require("GameConfig");
    var SigninBaseData = require("SigninBaseData");
    var SigninModel = function() {
      function SigninModel(data) {
        this.id = data.id;
        this.weekType = data.weekType;
        this.rewardType = data.rewardType;
        this.amount = data.amount;
      }
      _createClass(SigninModel, [ {
        key: "id",
        get: function get() {
          return this._id;
        },
        set: function set(value) {
          this._id = value;
        }
      }, {
        key: "weekType",
        get: function get() {
          return this._weekType;
        },
        set: function set(value) {
          this._weekType = value;
        }
      }, {
        key: "rewardType",
        get: function get() {
          return this._rewardType;
        },
        set: function set(value) {
          this._rewardType = value;
        }
      }, {
        key: "amount",
        get: function get() {
          return this._amount;
        },
        set: function set(value) {
          this._amount = value;
        }
      } ]);
      return SigninModel;
    }();
    var SigninManager = function SigninManager() {
      this.resetData();
    }, SigninMG = SigninManager.prototype, g_instance = null;
    SigninMG.resetData = function() {
      this.signinWeekBaseData = [];
      this.signinWeekData = [];
      this.signinYearData = {};
      this.initData();
    };
    SigninMG.initData = function() {
      var firstWeekDone = Global.storage.get(gameConfig.COMMON_KEYS.SIGNIN_FREST_WEEK_DONE, false);
      this.signinWeekBaseData = SigninBaseData.filter(function(data, index) {
        return (firstWeekDone ? 1 == data.weekType : 0 == data.weekType) && new SigninModel(data);
      });
      console.log("signinWeekBaseData:", this.signinWeekBaseData);
      this.load();
    };
    SigninMG.load = function() {
      this.signinWeekData = Global.storage.getJson(gameConfig.COMMON_KEYS.SIGNIN_DATA_WEEK, []);
      this.signinYearData = Global.storage.getJson(gameConfig.COMMON_KEYS.SIGNIN_DATA_YEAR, {});
    };
    SigninMG.saveInfo = function() {
      Global.storage.set(gameConfig.COMMON_KEYS.SIGNIN_DATA_WEEK, this.signinWeekData);
      Global.storage.set(gameConfig.COMMON_KEYS.SIGNIN_DATA_YEAR, this.signinYearData);
    };
    SigninMG.isNewDay = function() {
      var oneDayMillsecond = 864e5;
      var lastTime = this.signinWeekData.at(-1) || 0;
      var isNewDay = Date.now() - lastTime > oneDayMillsecond;
      console.log("isNew:", isNewDay);
      return isNewDay;
    };
    SigninMG.checkSigninWeek = function() {
      var isNewDay = this.isNewDay();
      if (isNewDay && this.signinWeekData.length >= 6) {
        Global.storage.set(gameConfig.COMMON_KEYS.SIGNIN_FREST_WEEK_DONE, true);
        this.signinWeekData = [];
        this.saveInfo();
        this.resetData();
      }
    };
    SigninMG.getSigninWeekByDay = function(_day) {
      return this.signinWeekData.at(_day) || 0;
    };
    SigninMG.setSigninWeekByDay = function(_day, args) {
      if (this.getSigninWeekByDay(_day)) return false;
      this.signinWeekData[_day] = args;
      this.saveInfo();
      return true;
    };
    SigninMG.getSigninByMonth = function(_month) {
      return this.signinYearData[_month] || 0;
    };
    SigninMG.setSignin = function(_month, _day) {
      var serverTime = Global.timer.getServerTime();
      var date = new Date(serverTime);
      _month = _month || date.getMonth();
      _day = _day || date.getDate();
      var element = this.getSigninByMonth(_month);
      var old = element;
      element |= 1 << _day - 1;
      var result = element != old;
      if (result) {
        this.signinYearData[_month] = element;
        this.saveInfo();
      }
      return result;
    };
    SigninMG.getSignin = function(_month, _day) {
      var serverTime = Global.timer.getServerTime();
      var date = new Date(serverTime);
      _month = _month || date.getMonth();
      _day = _day || date.getDate();
      var element = this.getSigninByMonth(_month);
      var result = 0 != (element & 1 << _day - 1);
      return result;
    };
    SigninMG.getSigninDays = function(_month) {
      var serverTime = Global.timer.getServerTime();
      var date = new Date(serverTime);
      _month = _month || date.getMonth();
      var element = this.getSigninByMonth(_month);
      return this.bitCount(element);
    };
    SigninMG.bitCount = function(element) {
      element -= element >> 1 & 1431655765;
      element = (858993459 & element) + (element >> 2 & 858993459);
      element = element + (element >> 4) & 252645135;
      element += element >> 8;
      element += element >> 16;
      return 63 & element;
    };
    SigninMG.timeSlotChange = function(dateType) {
      var startTime, endTime;
      var now = new Date();
      var nowDayOfWeek = now.getDay();
      var nowDay = now.getDate();
      var nowMonth = now.getMonth();
      var nowYear = now.getFullYear();
      var jd = Math.ceil((nowMonth + 1) / 3);
      switch (dateType) {
       case gameConfig.SIGNIN_DATE_TYPE.WEEK:
        startTime = new Date(nowYear, nowMonth, nowDay - nowDayOfWeek);
        endTime = new Date(nowYear, nowMonth, nowDay + 6 - nowDayOfWeek);
        break;

       case gameConfig.SIGNIN_DATE_TYPE.MONTH:
        startTime = new Date(nowYear, nowMonth, 1);
        endTime = new Date(nowYear, nowMonth + 1, 0);
        break;

       case gameConfig.SIGNIN_DATE_TYPE.SEASON:
        startTime = new Date(nowYear, 3 * (jd - 1), 1);
        endTime = new Date(nowYear, 3 * jd, 0);
        break;

       case gameConfig.SIGNIN_DATE_TYPE.YEAR:
        startTime = new Date(nowYear, 0, 1);
        endTime = new Date(nowYear, 11, 31);
      }
      return {
        startTime: startTime,
        endTime: endTime
      };
    };
    module.exports = function() {
      g_instance || (g_instance = new SigninManager());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig",
    SigninBaseData: "SigninBaseData"
  } ],
  SkillConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ee1edt+JuNFpLi1Vxc85TQq", "SkillConfig");
    "use strict";
    var SkillConfig = cc.Class({
      name: "SkillConfig",
      statics: {
        data: [ {
          id: "1001",
          name: "\u7eb8\u56e2",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1002",
          name: "\u7eb8\u56e2X2",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&2",
          property_affected_list: "1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1003",
          name: "\u786c\u5316\u77f3\u5934",
          ownership: "0",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&10&strength",
          property_affected_list: "2|1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1004",
          name: "\u62bd\u7eb8",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "2",
          duration: "0",
          value_list: "2&2,1&-16.67&strength",
          property_affected_list: "1|1001,0|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1005",
          name: "\u808c\u8089\u8bb0\u5fc6",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1004",
          skill_type: "1|0|1&10&basic_hp|100|0",
          skill_owner: "value",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1006|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1006",
          name: "\u52aa\u529b\u953b\u70bc",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "2",
          duration: "0",
          value_list: "1&3.34&strength",
          property_affected_list: "0|strength",
          skill_type: "1|2-0-1004|2&66|100|0",
          skill_owner: "value",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1006|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|1"
        }, {
          id: "1007",
          name: "\u9a6c\u5f62\u6c34\u602a",
          ownership: "2",
          spawn_probability: "5",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "2&2,1&27.5&basic_hp,2&60",
          property_affected_list: "1|1004,0|basic_hp,12|money",
          skill_type: "0,0,1|12-1-0|2&1|100|0",
          skill_owner: "value",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1008",
          name: "\u518d\u6765\u4e00\u7ec4",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1009",
          skill_type: "1|2-0-1004|2&1|20|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1006|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1009",
          name: "\u9a6c",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "2&1,1&18.34&basic_hp",
          property_affected_list: "1|1004,0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|2"
        }, {
          id: "1010",
          name: "\u4e00\u5305\u808c\u8089",
          ownership: "1",
          spawn_probability: "2",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&2",
          property_affected_list: "1|1004",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|2,1003|2,1006|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1011",
          name: "\u86cb\u767d\u7c89",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1005",
          skill_type: "1|2-0-1004|2&1|33|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1006|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1012",
          name: "\u80fd\u91cf\u996e\u6599",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1004",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|2,1003|2,1006|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1013",
          name: "\u5438\u8840",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1005",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1014",
          name: "\u4e00\u5305\u5438\u8840",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&2",
          property_affected_list: "1|1005",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1015",
          name: "\u601d\u8003",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1003",
          skill_type: "1|2-0-1005|2&1|33|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1016",
          name: "\u5438\u8840\u8759\u8760",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "1&100&1005",
          property_affected_list: "2|16|1005",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "1_5",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1017",
          name: "\u4e00\u5305\u65a7\u5934",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&2",
          property_affected_list: "1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1018",
          name: "\u53c9\u5b50",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1019",
          name: "\u786c\u65a7",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "1&50&1002",
          property_affected_list: "2|1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|2,1003|4,",
          combine: "",
          effect: "0_2",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1020",
          name: "\u6e9c\u51b0",
          ownership: "0",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1006",
          skill_type: "1|2-0-1002|2&1|33|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3,1008|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1021",
          name: "\u8fde\u73af\u9501",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1004",
          skill_type: "1|2-64-1002|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|4,1006|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1022",
          name: "\u6cd5\u68cd",
          ownership: "1",
          spawn_probability: "13",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "1&50&1002",
          property_affected_list: "2|1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|2,1003|4,",
          combine: "",
          effect: "0_2",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1023",
          name: "\u77f3\u5934+1",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1023|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1024",
          name: "\u624b\u67c4",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1025",
          name: "\u4e00\u5305\u8111\u5b50",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&2",
          property_affected_list: "1|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1026",
          name: "\u5b66\u4e60",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&10",
          property_affected_list: "2|2|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "0_3",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1027",
          name: "\u94c1\u5934",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1002",
          skill_type: "1|2-0-1003|2&1|33|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1028",
          name: "\u7ecf\u6d4e\u5b66\u5bb6",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&100&strength",
          property_affected_list: "2|1|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|4",
          combine: "",
          effect: "2_3",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1029",
          name: "\u5934\u8111\u98ce\u66b4",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "1&50&1003",
          property_affected_list: "2|4|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3,1001|2,",
          combine: "",
          effect: "0_3",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1030",
          name: "\u5927\u62db\u4f24\u5bb3",
          ownership: "1",
          spawn_probability: "12",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&20",
          property_affected_list: "0|ultimate_ability_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|4"
        }, {
          id: "1031",
          name: "\u51b0",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "4",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1008|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1032",
          name: "\u51b0\u6676\u5316",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "3",
          duration: "0",
          value_list: "1&100&1006",
          property_affected_list: "2|32|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1008|4",
          combine: "",
          effect: "3_6",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1033",
          name: "\u6ee1\u8db3",
          ownership: "2",
          spawn_probability: "0",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "2&1,1&62.5&basic_hp",
          property_affected_list: "1|1006,0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1034+1082=1033",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1034",
          name: "\u60f3\u5403",
          ownership: "1",
          spawn_probability: "41",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1008|3",
          combine: "1034+1082=1033",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1035",
          name: "\u5de7\u514b\u529b",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "2|3",
          value_list: "1&33.34&strength",
          property_affected_list: "0|strength",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1036",
          name: "\u6218\u524d\u6cbb\u7597",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "2|3",
          value_list: "1&6.67&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1037",
          name: "\u6218\u524d\u88c5\u7532",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "2|3",
          value_list: "1&100&armor",
          property_affected_list: "0|armor",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1038",
          name: "\u6781\u901f\u5f00\u5c40",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "2|3",
          value_list: "2&20",
          property_affected_list: "0|attack_speed",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1039",
          name: "\u6301\u4e45\u91cd\u590d",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&1&time",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1040",
          name: "\u996e\u8336\u5566",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "2|3",
          value_list: "2&15",
          property_affected_list: "0|dodge",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1041",
          name: "\u51b2\u950b\u5f3a\u5316",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "0",
          duration: "0",
          value_list: "1&100&effect",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1042",
          name: "\u8d85\u957f\u5f85\u673a",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "0",
          duration: "0",
          value_list: "2&2&time",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1043",
          name: "\u8d85\u7ea7\u836f\u4e38",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "2&1.5&time",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4",
          combine: "1043+1142=1232",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1044",
          name: "\u7d27\u6025\u6cbb\u7597",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "1&4.17&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "1|3|1&50&basic_hp|100|1",
          skill_owner: "emergency",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "dynamic",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1045",
          name: "\u7d27\u6025\u5145\u7535",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&90",
          property_affected_list: "0|energy_recovery",
          skill_type: "1|3|1&50&basic_hp|100|1",
          skill_owner: "emergency",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "dynamic",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1046",
          name: "\u7d27\u6025\u53e0\u7532",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "1&80&armor",
          property_affected_list: "0|armor",
          skill_type: "1|3|1&50&basic_hp|100|1",
          skill_owner: "emergency",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "dynamic",
          style: "1002|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1047",
          name: "\u7d27\u6025\u53cd\u4f24",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&50&strength",
          property_affected_list: "0|reflect_damage",
          skill_type: "1|3|1&50&basic_hp|100|1",
          skill_owner: "emergency",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "dynamic",
          style: "1002|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1048",
          name: "\u8b66\u7b1b",
          ownership: "1",
          spawn_probability: "25",
          rarity: "3",
          importance: "0",
          duration: "0",
          value_list: "1&15&limit",
          property_affected_list: "4|emergency",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1049",
          name: "\u53e3\u7f69",
          ownership: "1",
          spawn_probability: "33",
          rarity: "3",
          importance: "0",
          duration: "0",
          value_list: "1&100&effect",
          property_affected_list: "4|emergency",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1050",
          name: "\u52a0\u6cb9",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "2",
          duration: "0",
          value_list: "1&3.34&strength",
          property_affected_list: "0|strength",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|1"
        }, {
          id: "1051",
          name: "\u7ef4\u751f\u7d20C",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "1&0.34&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|7"
        }, {
          id: "1052",
          name: "\u6253\u5750",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "1&0.34&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|7"
        }, {
          id: "1053",
          name: "\u591a\u9910",
          ownership: "0",
          spawn_probability: "12",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "1&4.17&basic_hp",
          property_affected_list: "0|basic_hp",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|2"
        }, {
          id: "1054",
          name: "\u6012\u6c14\u79ef\u6512",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "0|critical_rate",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|8"
        }, {
          id: "1055",
          name: "\u4efb\u52a1\uff1a\u53cd\u4f24",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "1&3.34&strength",
          property_affected_list: "0|reflect_damage",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|9"
        }, {
          id: "1056",
          name: "\u7ec8\u70b9\u7ebf",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "0|attack_speed",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|10"
        }, {
          id: "1057",
          name: "\u9c7f\u9c7c",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&4",
          property_affected_list: "0|income",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|11"
        }, {
          id: "1058",
          name: "\u85af\u7247",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "2",
          duration: "0",
          value_list: "1&100&strength,2&2001",
          property_affected_list: "0|strength,14|sub_skill",
          skill_type: "0,1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1070+1058=1065",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1059",
          name: "\u6218\u524d\u5145\u7535",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "2",
          duration: "0",
          value_list: "2&300",
          property_affected_list: "6|currentEnergy",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|12"
        }, {
          id: "1060",
          name: "\u53f3\u5df4\u638c",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "1&5&basic_hp&enemy",
          property_affected_list: "7|damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "value",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1061",
          name: "\u5de6\u5df4\u638c",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&0.5",
          property_affected_list: "8|stunTime",
          skill_type: "1|5|0|100|0",
          skill_owner: "value",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1062",
          name: "\u5f31\u5316",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "2|3",
          value_list: "2&3",
          property_affected_list: "9|amplified_damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1010|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1063",
          name: "\u53cc\u624b",
          ownership: "0",
          spawn_probability: "0",
          rarity: "4",
          importance: "4",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "10|ultimate_skill",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "1154+1155=1063",
          effect: "",
          onlyOne: "1",
          delete: "",
          ability_up: "0|18"
        }, {
          id: "1064",
          name: "\u653b\u51fb\u63d0\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&16.67&strength",
          property_affected_list: "0|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1065",
          name: "\u74f6\u88c5\u5371\u673a",
          ownership: "1",
          spawn_probability: "25",
          rarity: "4",
          importance: "2",
          duration: "0",
          value_list: "1&116.67&strength",
          property_affected_list: "0|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1070+1058=1065",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1066",
          name: "\u756a\u8304",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "6",
          duration: "0",
          value_list: "1&16.67&strength",
          property_affected_list: "0|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1067",
          name: "\u9f99\u5fc3",
          ownership: "1",
          spawn_probability: "0",
          rarity: "3",
          importance: "3",
          duration: "0",
          value_list: "1&16.67&strength,1&18.34&basic_hp,1&1&basic_hp",
          property_affected_list: "0|strength,0|basic_hp,0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1068",
          name: "\u793c\u76d2",
          ownership: "1",
          spawn_probability: "0",
          rarity: "3",
          importance: "3",
          duration: "0",
          value_list: "1&16.67&strength,2&4,2&4,2&4",
          property_affected_list: "0|strength,0|attack_speed,0|critical_rate,0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1069",
          name: "\u7f50\u5934",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&-50,1&33.34&strength",
          property_affected_list: "12|money,0|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1070",
          name: "\u73bb\u7483\u5927\u70ae",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "3",
          duration: "0",
          value_list: "1&33.34&strength,2&2002",
          property_affected_list: "0|strength,14|sub_skill",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1070+1058=1065",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|1"
        }, {
          id: "1071",
          name: "\u8d2a\u5a6a",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "2",
          duration: "0",
          value_list: "1&3.34&strength",
          property_affected_list: "0|strength",
          skill_type: "1|13|2&30|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|1"
        }, {
          id: "1072",
          name: "\u81ea\u6108",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&2.09&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1073",
          name: "\u6cbb\u7597\u6548\u679c\u63d0\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&0.17&basic_hp",
          property_affected_list: "0|healing_boost",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|13"
        }, {
          id: "1074",
          name: "\u610f\u9762",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "1&2.09&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1074+1162=1233",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1075",
          name: "\u786c\u6c49",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&2&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1076",
          name: "\u6ce2\u9738\u5976\u8336",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "3",
          duration: "1",
          value_list: "1&2.09&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1077",
          name: "\u5de8\u9b54",
          ownership: "1",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&1&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1078",
          name: "\u5bff\u53f8",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&83.34&basic_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|5-0-6|0|100|1",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1079",
          name: "\u751f\u6c23\u7684\u5de8\u9b54",
          ownership: "0",
          spawn_probability: "12",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "1&3&basic_hp,2&60",
          property_affected_list: "0|hp_regeneration,0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1080",
          name: "\u81ea\u6211\u6cbb\u7642",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&100&strength",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1081",
          name: "\u6127\u759a",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "2",
          duration: "0",
          value_list: "1&2.09&basic_hp,1&-18.34&basic_hp",
          property_affected_list: "0|hp_regeneration,0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1082",
          name: "\u6c89\u9ed8",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "1&18.34&basic_hp",
          property_affected_list: "0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1034+1082=1033",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|2"
        }, {
          id: "1083",
          name: "\u4f53\u529b\u63d0\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&27.5&basic_hp",
          property_affected_list: "0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|2"
        }, {
          id: "1084",
          name: "\u6709\u6c27\u8fd0\u52a8",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&10|strength&basic_hp",
          property_affected_list: "0|basic_hp",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "dynamic",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|2"
        }, {
          id: "1085",
          name: "\u5feb\u9910",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "3",
          duration: "0",
          value_list: "1&58&basic_hp,2&2002",
          property_affected_list: "0|basic_hp,14|sub_skill",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|2"
        }, {
          id: "1086",
          name: "\u5496\u5561",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "2&40",
          property_affected_list: "0|energy_recovery",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|14"
        }, {
          id: "1087",
          name: "\u77ff\u6cc9\u6c34",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&33",
          property_affected_list: "0|energy_recovery",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "1087+1098=1234",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|14"
        }, {
          id: "1088",
          name: "\u84c4\u80fd\u5927\u62db",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&190",
          property_affected_list: "6|currentEnergy",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1089",
          name: "\u866b\u821e",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "3",
          duration: "0",
          value_list: "2&10",
          property_affected_list: "6|currentEnergy",
          skill_type: "1|8|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1090",
          name: "\u8774\u8776\u9762\u5305",
          ownership: "1",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&250",
          property_affected_list: "6|currentEnergy",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1091",
          name: "\u996d\u56e2",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "1&2.09&basic_hp,2&75",
          property_affected_list: "0|hp_regeneration,0|energy_recovery",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1092",
          name: "\u52e4\u7ec3\u5e26\u6765\u529b\u91cf",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&3",
          property_affected_list: "0|ultimate_ability_damage",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|4"
        }, {
          id: "1093",
          name: "\u5927\u62db\u4f24\u5bb3",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&30",
          property_affected_list: "0|ultimate_ability_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1094",
          name: "\u6076\u9b3c",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1004",
          skill_type: "1|2-64-0|2&1|20|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3,1006|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1095",
          name: "\u66b4\u51fb\u7387\u4e0a\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&5",
          property_affected_list: "0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1096",
          name: "\u66b4\u51fb\u4f24\u5bb3",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&66",
          property_affected_list: "0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|15"
        }, {
          id: "1097",
          name: "\u6012",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&50",
          property_affected_list: "0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "1097+1101=1235",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|15"
        }, {
          id: "1098",
          name: "\u6b63\u4e49",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&3",
          property_affected_list: "0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "1087+1098=1234",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1099",
          name: "\u5c0f\u9ec4\u9e2d",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "2&6",
          property_affected_list: "0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "1134+1099=1136",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1100",
          name: "\u5c0f\u5200",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1, 2&6",
          property_affected_list: "0|ultimate_ability_critical_rate,0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4,1003|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1101",
          name: "\u6076\u9b54",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&33",
          property_affected_list: "0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "1097+1101=1235",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|15"
        }, {
          id: "1102",
          name: "\u82b1\u6930\u83dc\u6076\u9b54",
          ownership: "2",
          spawn_probability: "0",
          rarity: "4",
          importance: "2",
          duration: "0",
          value_list: "1&-33.34&strength,2&77",
          property_affected_list: "0|amplified_damage,0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1103",
          name: "UPhone",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "2",
          duration: "0",
          value_list: "2&-75,2&6,1&50&basic_hp",
          property_affected_list: "12|money,0|critical_rate,0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1103+1115=1107",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1104",
          name: "\u53e0\u52a0\u66b4\u51fb",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "0|critical_rate",
          skill_type: "1|2-64-0|2&60|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|8"
        }, {
          id: "1105",
          name: "\u53e0\u52a0\u95ea\u907f",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "0|dodge",
          skill_type: "1|8|2&60|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|16"
        }, {
          id: "1106",
          name: "\u67af\u840e\u7a7f\u5fc3\u653b\u51fb",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1005",
          skill_type: "1|2-64-0|2&1|50|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|4,1009|4,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1107",
          name: "\u5e73\u679c\u624b\u673a",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "2",
          duration: "0",
          value_list: "1&90&armor,2&9,1&75&basic_hp",
          property_affected_list: "0|armor,0|critical_rate,0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "1103+1115=1107",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1108",
          name: "\u55b7\u568f",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&8",
          property_affected_list: "3|1006",
          skill_type: "1|9|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1109",
          name: "\u53cd\u64ca",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1001",
          skill_type: "1|1-0-0|2&1|15|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1002|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1110",
          name: "\u5c31\u8fd9",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&16.67&strength",
          property_affected_list: "11|currentHp",
          skill_type: "1|1-0-0|2&1|30|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1002|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1111",
          name: "\u51b0\u76fe\u53cd\u523a",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "3",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1006",
          skill_type: "1|1-1-0|2&1|5|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1008|8,1002|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1112",
          name: "\u5e26\u523a\u62a4\u7532",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "1&50&armor,1&20&strength",
          property_affected_list: "0|armor,0|reflect_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1113",
          name: "\u656c\u793c",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "1&40&armor",
          property_affected_list: "0|armor",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1113+1132=1236",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1114",
          name: "\u53e0\u7532",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&40&armor",
          property_affected_list: "0|armor",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1115",
          name: "\u82f9\u679c",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&80&armor",
          property_affected_list: "0|armor",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "1103+1115=1107",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1116",
          name: "\u6bd2\u82f9\u679c",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "3",
          duration: "0",
          value_list: "1&100&armor,1&-45.84&basic_hp",
          property_affected_list: "0|armor,0|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1117",
          name: "\u9f99\u867e",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1|reflect_damage&strength",
          property_affected_list: "0|strength",
          skill_type: "1|10-reflect_damage-0|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|1"
        }, {
          id: "1118",
          name: "\u5c16\u523a",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "1&20&strength",
          property_affected_list: "0|reflect_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|9"
        }, {
          id: "1119",
          name: "\u590d\u4ec7",
          ownership: "2",
          spawn_probability: "20",
          rarity: "1",
          importance: "2",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1002",
          skill_type: "1|11|2&1|10|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1120",
          name: "\u4ed9\u4eba\u638c",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&33.34&strength",
          property_affected_list: "0|reflect_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|9"
        }, {
          id: "1121",
          name: "\u7d20\u98df\u6076\u9b3c",
          ownership: "2",
          spawn_probability: "0",
          rarity: "4",
          importance: "0",
          duration: "0",
          value_list: "1&50&strength,2&1",
          property_affected_list: "0|reflect_damage,3|1004",
          skill_type: "0,1|2-64-0|2&1|50|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1122",
          name: "\u5927\u849c",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&1&basic_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|11|2&1|10|0",
          skill_owner: "rate",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1123",
          name: "\u95ea\u907f\u63d0\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&5",
          property_affected_list: "0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|16"
        }, {
          id: "1124",
          name: "\u732b",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "2&6",
          property_affected_list: "0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "1139+1124=1144",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|16"
        }, {
          id: "1125",
          name: "\u52c7\u6562\u7684\u5fc3",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1002",
          skill_type: "1|0|1&8.34&basic_hp|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1126",
          name: "\u8776\u821e",
          ownership: "1",
          spawn_probability: "20",
          rarity: "1",
          importance: "3",
          duration: "0",
          value_list: "1&2.09&basic_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|8|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1127",
          name: "\u677e\u53e3\u6c14",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "1&20.84&basic_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1128",
          name: "\u79c3\u5934",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&1,2&4",
          property_affected_list: "0|ultimate_ability_dodge,0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|16"
        }, {
          id: "1129",
          name: "\u660e\u955c\u6b62\u6c34",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1003",
          skill_type: "1|8|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1130",
          name: "\u901f\u5ea6\u63d0\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "0",
          duration: "0",
          value_list: "2&10",
          property_affected_list: "0|attack_speed",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1131",
          name: "\u9b3c\u8138",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&6",
          property_affected_list: "0|attack_speed",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1132",
          name: "\u56fe\u9488",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "1&20&strength",
          property_affected_list: "0|reflect_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1113+1132=1236",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|9"
        }, {
          id: "1133",
          name: "\u9ad8\u8ddf\u978b",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "2",
          duration: "0",
          value_list: "2&15,1&-16.67&strength",
          property_affected_list: "0|attack_speed,0|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1134",
          name: "\u7ea2\u8fa3\u6912",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&25",
          property_affected_list: "0|attack_speed",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1134+1099=1136",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1135",
          name: "\u4f1a\u8d70\u8def\u7684\u7ae0\u9c7c",
          ownership: "2",
          spawn_probability: "0",
          rarity: "4",
          importance: "0",
          duration: "0",
          value_list: "2&25,1&-16.67&strength,2&100",
          property_affected_list: "0|attack_speed,0|strength,12|money",
          skill_type: "0,0,1|12-2-0|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1136",
          name: "\u8d85\u7ea7\u8fa3\u70ed\u72d7",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "0",
          duration: "0",
          value_list: "2&35,2&10",
          property_affected_list: "0|attack_speed,0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1134+1099=1136",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1137",
          name: "\u706f\u795e",
          ownership: "0",
          spawn_probability: "0",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "2&12",
          property_affected_list: "0|attack_speed",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1138",
          name: "\u4fe1\u7528\u5361",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "3",
          duration: "0",
          value_list: "2&40,2&-25",
          property_affected_list: "0|discount,0|income",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1139",
          name: "\u7ea2\u5305",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "1",
          duration: "0",
          value_list: "2&25",
          property_affected_list: "0|income",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1139+1124=1144",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|11"
        }, {
          id: "1140",
          name: "\u4f01\u9e45\u5382\u80a1\u7968",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&-50,2&10",
          property_affected_list: "12|money,0|income",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|11"
        }, {
          id: "1141",
          name: "\u517b\u732a\u573a\u80a1\u7968",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "2",
          duration: "0",
          value_list: "2&-20,2&250",
          property_affected_list: "0|income,12|money",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1142",
          name: "\u9500\u552e\u5956\u724c",
          ownership: "1",
          spawn_probability: "0",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&8",
          property_affected_list: "0|income",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1043+1142=1232",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|11"
        }, {
          id: "1143",
          name: "\u6536\u5165\u63d0\u5347",
          ownership: "0",
          spawn_probability: "41",
          rarity: "0",
          importance: "1",
          duration: "0",
          value_list: "2&10",
          property_affected_list: "0|income",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|11"
        }, {
          id: "1144",
          name: "\u5e78\u8fd0\u5c0f\u732b",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "0",
          duration: "0",
          value_list: "2&30,2&10",
          property_affected_list: "0|income,0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1139+1124=1144",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|11"
        }, {
          id: "1145",
          name: "\u699c\u4e00\u5927\u54e5",
          ownership: "2",
          spawn_probability: "0",
          rarity: "4",
          importance: "0",
          duration: "0",
          value_list: "2&50,2&-25",
          property_affected_list: "0|discount,0|income",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1146",
          name: "\u94b1\uff01",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "1",
          duration: "0",
          value_list: "2&400",
          property_affected_list: "12|money",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1147",
          name: "\u7d2b\u8272\u7684\u9c7c",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&50",
          property_affected_list: "12|money",
          skill_type: "1|12-2-0|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1148",
          name: "\u84dd\u8272\u7684\u9c7c",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&20",
          property_affected_list: "12|money",
          skill_type: "1|12-1-0|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1149",
          name: "\u91d1\u8272\u7684\u9c7c",
          ownership: "1",
          spawn_probability: "25",
          rarity: "1",
          importance: "1",
          duration: "0",
          value_list: "2&120",
          property_affected_list: "12|money",
          skill_type: "1|12-3-0|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1151",
          name: "\u7b77\u5b50",
          ownership: "2",
          spawn_probability: "13",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&2002,2&1",
          property_affected_list: "14|skill_sub,0|reflect_damage_count",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1152",
          name: "\u76c6\u683d",
          ownership: "1",
          spawn_probability: "13",
          rarity: "2",
          importance: "2",
          duration: "0",
          value_list: "2&-6",
          property_affected_list: "0|amplified_damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1153",
          name: "\u6495\u88c2\u4f24\u53e3",
          ownership: "0",
          spawn_probability: "20",
          rarity: "1",
          importance: "0",
          duration: "2|3",
          value_list: "2&1",
          property_affected_list: "9|amplified_damage",
          skill_type: "1|14|2&1|9|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1010|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1154",
          name: "\u53f3\u624b",
          ownership: "1",
          spawn_probability: "13",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "",
          property_affected_list: "",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "1154+1155=1063",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1155",
          name: "\u5de6\u624b",
          ownership: "1",
          spawn_probability: "13",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "",
          property_affected_list: "",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "1154+1155=1063",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1156",
          name: "\u5496\u5561",
          ownership: "2",
          spawn_probability: "13",
          rarity: "2",
          importance: "0",
          duration: "0",
          value_list: "1059&1060&1061&1062&1063",
          property_affected_list: "13|5",
          skill_type: "1|5-1-6|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1157",
          name: "\u4efb\u52a1:\u53e0\u7532",
          ownership: "0",
          spawn_probability: "5",
          rarity: "3",
          importance: "0",
          duration: "0",
          value_list: "1&10&armor",
          property_affected_list: "0|armor",
          skill_type: "1|4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|17"
        }, {
          id: "1158",
          name: "\u65a7\u5934+1",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1159",
          name: "\u80fd\u91cf\u996e\u6599+1",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1004",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1160",
          name: "\u5927\u4fbf+1",
          ownership: "1",
          spawn_probability: "5",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1005",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1161",
          name: "\u91cd\u4f24",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "0",
          duration: "2|3",
          value_list: "2&3",
          property_affected_list: "9|amplified_damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1162",
          name: "\u6cbb\u7597\u589e\u5f3a",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "1",
          duration: "0",
          value_list: "1&0.17&basic_hp",
          property_affected_list: "0|healing_boost",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1074+1162=1233",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|13"
        }, {
          id: "1163",
          name: "\u51b2\u950b\u66b4\u51fb",
          ownership: "0",
          spawn_probability: "12",
          rarity: "2",
          importance: "1",
          duration: "2|3",
          value_list: "2&10",
          property_affected_list: "0|critical_rate",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1164",
          name: "\u624b\u67c4",
          ownership: "1",
          spawn_probability: "41",
          rarity: "6",
          importance: "0",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1003",
          skill_type: "",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1165",
          name: "\u80fd\u91cf\u51cf\u76ca",
          ownership: "0",
          spawn_probability: "25",
          rarity: "1",
          importance: "0",
          duration: "0",
          value_list: "2&200",
          property_affected_list: "26|energy_max",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1166",
          name: "\u51b0\u68d2\u4f24\u5bb3",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&1&currentHp&enemy",
          property_affected_list: "2|1|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1167",
          name: "\u5f31\u5438\u8840",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&40&1005-16",
          property_affected_list: "11|currentHp",
          skill_type: "1|2-0-1005|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1168",
          name: "\u5f3a\u5438\u8840",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&40&1005-16",
          property_affected_list: "0|basic_hp",
          skill_type: "1|2-0-1005|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1169",
          name: "\u5f3a\u5438\u8840",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&0.1",
          property_affected_list: "11|currentHp",
          skill_type: "1|16|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1170",
          name: "\u7acb\u5373\u6bd2\u4f24",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&100&hp_regeneration&enemy",
          property_affected_list: "7|damage",
          skill_type: "1|2-0-1005|2&15|100|0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1171",
          name: "\u7acb\u5373\u6bd2\u4f242",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&100&hp_regeneration&enemy",
          property_affected_list: "7|damage",
          skill_type: "1|2-0-1005|2&15|100|0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1172",
          name: "\u591a\u53cd\u4f24\u5f31",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&0.5",
          property_affected_list: "0|reflect_damage_count",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1173",
          name: "\u591a\u53cd\u4f24\u5f3a",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&0.5",
          property_affected_list: "0|reflect_damage_count",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1174",
          name: "\u5355\u6b21\u56de\u8840",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&800&strength",
          property_affected_list: "11|currentHp",
          skill_type: "1|3|1&40&basic_hp|100|1",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "dynamic",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1175",
          name: "6\u79d2\u56de\u884010",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&10&lost_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|5-0-6|0|100|1",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1176",
          name: "6\u79d2\u56de\u88405",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&15&lost_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|5-0-6|0|100|1",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "1175",
          ability_up: ""
        }, {
          id: "1177",
          name: "6\u79d2\u56de\u884010-2",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&25&lost_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|5-0-6|0|100|1",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "1176",
          ability_up: ""
        }, {
          id: "1178",
          name: "\u989d\u5916\u7eb8\u98de\u673a",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1012",
          skill_type: "1|10-1001|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1179",
          name: "\u5927\u62db\u56de\u8840",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&10&basic_hp",
          property_affected_list: "11|currentHp",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1180",
          name: "\u5927\u62db\u7729\u6655",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&0.1",
          property_affected_list: "8|stunTime",
          skill_type: "1|19|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1181",
          name: "\u51cf\u4e0a\u9650",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&-20",
          property_affected_list: "0|energy_max",
          skill_type: "1|19|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1182",
          name: "\u5927\u62db",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "10|ultimate_skill",
          skill_type: "1|19|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1010|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1183",
          name: "\u5927\u62db\u77f3\u5934",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&6",
          property_affected_list: "6|1001",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1184",
          name: "\u5927\u62db\u653b\u901f",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "1",
          value_list: "2&25",
          property_affected_list: "0|attack_speed",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1185",
          name: "\u5927\u62db\u4e0a\u9650",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "1",
          value_list: "2&500",
          property_affected_list: "0|energy_max",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1186",
          name: "\u51b2\u950b\u5927\u62db",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "10|ultimate_skill",
          skill_type: "1|5-2|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1187",
          name: "\u900f\u652f",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "15|overdraw",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1188",
          name: "\u6982\u7387\u949e\u7968",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "12|money",
          skill_type: "1|2-0-1003|2&1|20|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1189",
          name: "\u79fb\u9664\u5b50\u5f39",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "16|remove_bullet",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "1",
          delete: "",
          ability_up: ""
        }, {
          id: "1190",
          name: "\u5077\u5b50\u5f39",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "17|steal_bullet",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "1",
          delete: "",
          ability_up: ""
        }, {
          id: "1191",
          name: "\u5077\u590d\u5236",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "18|steal_copy_bullet",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1192",
          name: "boss\u751f\u547d\u4e0a\u9650",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "1",
          value_list: "1&1000&strength",
          property_affected_list: "0|basic_hp",
          skill_type: "1|5-3|0|100|0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1193",
          name: "\u91cd\u4f24\u589e\u4f24",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&30",
          property_affected_list: "19|enhancedDamage",
          skill_type: "1|17-amplified_damage|2&10|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1194",
          name: "\u91cd\u4f24\u589e\u4f24",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&30",
          property_affected_list: "19|enhancedDamage",
          skill_type: "1|17-attack_speed|2&10|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1008|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1195",
          name: "\u91cd\u4f24\u66b4\u51fb",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&20",
          property_affected_list: "20|enhancedCrit",
          skill_type: "1|17-amplified_damage|2&10|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1196",
          name: "\u989d\u5916\u590d\u6d3b",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "21|rebornCount",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1198",
          name: "\u5168\u8840\u590d\u6d3b",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "22|rebornRate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1199",
          name: "\u590d\u6d3b\u589e\u4f24",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&10",
          property_affected_list: "19|enhancedDamage",
          skill_type: "1|18|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1200",
          name: "\u5168\u5c40\u529b\u91cf5",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&5&strength",
          property_affected_list: "20|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1201",
          name: "\u5168\u5c40\u529b\u91cf10",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&10&strength",
          property_affected_list: "20|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1202",
          name: "\u5168\u5c40\u529b\u91cf15",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&15&strength",
          property_affected_list: "20|strength",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1203",
          name: "\u5168\u5c40\u751f\u547d15",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&15&basic_hp",
          property_affected_list: "20|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1204",
          name: "\u5168\u5c40\u751f\u547d20",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&20&basic_hp",
          property_affected_list: "20|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1205",
          name: "\u5168\u5c40\u751f\u547d30",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&30&basic_hp",
          property_affected_list: "20|basic_hp",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1206",
          name: "\u5168\u5c40\u62a4\u753210",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&10&armor",
          property_affected_list: "20|armor",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1207",
          name: "\u5168\u5c40\u62a4\u753215",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&15&armor",
          property_affected_list: "20|armor",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1208",
          name: "BOSS10",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "1",
          value_list: "2&10",
          property_affected_list: "19|enhancedDamage",
          skill_type: "1|5-3|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1209",
          name: "BOSS15",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "1",
          value_list: "2&15",
          property_affected_list: "19|enhancedDamage",
          skill_type: "1|5-3|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1210",
          name: "\u5c0f\u602a25",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "1",
          value_list: "2&25",
          property_affected_list: "19|enhancedDamage",
          skill_type: "1|5-4|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1211",
          name: "\u51cf\u514d25",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&25",
          property_affected_list: "24|damageReduction",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1212",
          name: "\u7ec8\u4f2425",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&25",
          property_affected_list: "19|enhancedDamage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1213",
          name: "\u51b2\u950b\u51cf\u4f24",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "2|3",
          value_list: "2&25",
          property_affected_list: "24|damageReduction",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1214",
          name: "\u77f3\u5934\u589e\u4f24",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&20&strength",
          property_affected_list: "2|1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1215",
          name: "\u80fd\u91cf100",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&100",
          property_affected_list: "6|currentEnergy",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1216",
          name: "\u5927\u62db\u5237\u5b50",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1005",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1217",
          name: "2\u51b0\u5757",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&2",
          property_affected_list: "1|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1218",
          name: "\u53cd\u51fb10",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1001",
          skill_type: "1|1-0-0|2&1|10|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1010|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1219",
          name: "\u5438\u88405",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&100&reflect_damage",
          property_affected_list: "11|currentHp",
          skill_type: "1|11|2&1|5|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1220",
          name: "\u53cd\u51fb5",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1001",
          skill_type: "1|1-0-0|2&1|5|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1221",
          name: "\u7ec8\u4f245",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&5",
          property_affected_list: "19|enhancedDamage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1222",
          name: "\u53cd\u4f24\u6982\u7387",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1002",
          skill_type: "1|11|2&1|15|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1223",
          name: "\u53cd\u4f2450",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&50&reflect_damage",
          property_affected_list: "0|reflect_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1224",
          name: "\u5de8\u9b54",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&150&strength",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1225",
          name: "\u51e0\u7387\u6cb9\u6f06",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1005",
          skill_type: "1|1-0-1006|2&1|30|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|2",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1227",
          name: "200\u80fd\u91cf",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&200",
          property_affected_list: "6|currentEnergy",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1228",
          name: "\u51cf\u514d15",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "2|3",
          value_list: "2&15",
          property_affected_list: "24|damageReduction",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1229",
          name: "3\u5200\u5b50",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1003",
          property_affected_list: "25|ultimateAbility",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1230",
          name: "4\u5200\u5b50",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&1012",
          property_affected_list: "25|ultimateAbility",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "1229",
          ability_up: ""
        }, {
          id: "1231",
          name: "\u5c31\u8fd92",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&30&strength",
          property_affected_list: "11|currentHp",
          skill_type: "1|1-0-0|2&1|30|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1232",
          name: "\u8d85\u957f\u51b2\u950b",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "2&2&time",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4",
          combine: "1043+1142=1232",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1233",
          name: "\u6cbb\u7597\u590d\u5408",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "1&0.25&basic_hp,1&4.17&basic_hp",
          property_affected_list: "0|healing_boost,0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1005|1",
          combine: "1074+1162=1233",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|13"
        }, {
          id: "1234",
          name: "\u82f9\u679c",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "2&1, 2&4",
          property_affected_list: "0|ultimate_ability_critical_rate,0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1087+1098=1234",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1235",
          name: "\u82f9\u679c",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "2&100",
          property_affected_list: "0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1097+1101=1235",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|15"
        }, {
          id: "1236",
          name: "\u82f9\u679c",
          ownership: "1",
          spawn_probability: "0",
          rarity: "4",
          importance: "1",
          duration: "0",
          value_list: "1&60&armor,1&33.34&strength",
          property_affected_list: "0|armor,0|reflect_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "1113+1132=1236",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|17"
        }, {
          id: "1237",
          name: "1153",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "2|3",
          value_list: "2&1",
          property_affected_list: "9|amplified_damage",
          skill_type: "1|14|2&1|9|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1010|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1238",
          name: "1022",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "1&50&1002",
          property_affected_list: "2|1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|2,1003|4,",
          combine: "",
          effect: "0_2",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1239",
          name: "1100",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "2&1, 2&6",
          property_affected_list: "0|ultimate_ability_critical_rate,0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4,1003|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1240",
          name: "1109",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1001",
          skill_type: "1|1-0-0|2&1|15|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1002|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1241",
          name: "1032",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "1&100&1006",
          property_affected_list: "2|32|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4,",
          combine: "",
          effect: "3_6",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1242",
          name: "1006",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "1&3.34&strength",
          property_affected_list: "0|strength",
          skill_type: "1|2-0-1004|2&66|100|0",
          skill_owner: "value",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1006|4,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|1"
        }, {
          id: "1243",
          name: "1008",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1009",
          skill_type: "1|2-0-1004|2&1|20|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1006|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1244",
          name: "1086",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&40",
          property_affected_list: "0|energy_recovery",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|14"
        }, {
          id: "1245",
          name: "1092",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "2&3",
          property_affected_list: "0|ultimate_ability_damage",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "1|4"
        }, {
          id: "1246",
          name: "1038",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "2|3",
          value_list: "2&20",
          property_affected_list: "0|attack_speed",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1247",
          name: "1041",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "1&100&effect",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1248",
          name: "1080",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "1&100&strength",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1249",
          name: "1075",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "1&2&basic_hp",
          property_affected_list: "0|hp_regeneration",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|1,1002|1,1003|1,1004|1,1005|1,1006|1,1007|1,1008|1,1009|1,1010|1,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|7"
        }, {
          id: "1250",
          name: "1045",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&90",
          property_affected_list: "0|energy_recovery",
          skill_type: "1|3|1&50&basic_hp|100|0",
          skill_owner: "emergency",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "dynamic",
          style: "1001|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1251",
          name: "1049",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "1&100&effect",
          property_affected_list: "4|emergency",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1252",
          name: "1048",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "1&15&limit",
          property_affected_list: "4|emergency",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|6"
        }, {
          id: "1253",
          name: "1134",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "2&25",
          property_affected_list: "0|attack_speed",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|10"
        }, {
          id: "1254",
          name: "1111",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1006",
          skill_type: "1|1-1-0|2&1|5|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1008|8,1002|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1255",
          name: "1111",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1006",
          skill_type: "1|1-1-0|2&1|5|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1008|8,1002|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1256",
          name: "1096",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&66",
          property_affected_list: "0|critical_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|15"
        }, {
          id: "1257",
          name: "1060",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "1&5&basic_hp&enemy",
          property_affected_list: "7|damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1258",
          name: "1060",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "1&5&basic_hp&enemy",
          property_affected_list: "7|damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1259",
          name: "1061",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "2&0.5",
          property_affected_list: "8|stunTime",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1260",
          name: "1001",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1261",
          name: "1003",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "1&10&strength",
          property_affected_list: "2|1|1001",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "dynamic",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1262",
          name: "1018",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1002",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1263",
          name: "1095",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&5",
          property_affected_list: "0|critical_rate",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|8"
        }, {
          id: "1264",
          name: "1020",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1006",
          skill_type: "1|2-0-1002|2&1|33|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1003|3,1008|2,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1265",
          name: "1013",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1005",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1266",
          name: "1016",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "1&100&1005",
          property_affected_list: "2|16|1005",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1009|4,",
          combine: "",
          effect: "1_5",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1267",
          name: "1031",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1006",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1268",
          name: "1119",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1002",
          skill_type: "1|11|2&1|10|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1002|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1269",
          name: "1024",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1270",
          name: "1027",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1002",
          skill_type: "1|2-0-1003|2&1|33|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1271",
          name: "1129",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "3|1003",
          skill_type: "1|8|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1272",
          name: "1012",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&1",
          property_affected_list: "1|1004",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|2,1003|2,1006|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|0"
        }, {
          id: "1273",
          name: "1030",
          ownership: "2",
          spawn_probability: "",
          rarity: "6",
          importance: "",
          duration: "0",
          value_list: "2&20",
          property_affected_list: "0|ultimate_ability_damage",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|4"
        }, {
          id: "1274",
          name: "1059",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "2&300",
          property_affected_list: "6|currentEnergy",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|12"
        }, {
          id: "1275",
          name: "1039",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "2&1&time",
          property_affected_list: "4|charge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1004|4,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1276",
          name: "1123",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "2&5",
          property_affected_list: "0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|16"
        }, {
          id: "1277",
          name: "1128",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "0",
          value_list: "2&1,2&4",
          property_affected_list: "0|ultimate_ability_dodge,0|dodge",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|16"
        }, {
          id: "1278",
          name: "1110",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "1&16.67&strength",
          property_affected_list: "11|currentHp",
          skill_type: "1|1-0-0|2&1|30|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1002|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1279",
          name: "1110",
          ownership: "2",
          spawn_probability: "",
          rarity: "0",
          importance: "",
          duration: "0",
          value_list: "1&16.67&strength",
          property_affected_list: "11|currentHp",
          skill_type: "1|1-0-0|2&1|30|0",
          skill_owner: "rate",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4,1002|3,",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1280",
          name: "1108",
          ownership: "2",
          spawn_probability: "",
          rarity: "3",
          importance: "",
          duration: "0",
          value_list: "2&8",
          property_affected_list: "3|1006",
          skill_type: "1|9|2&1|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1005|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1281",
          name: "1163",
          ownership: "2",
          spawn_probability: "",
          rarity: "2",
          importance: "",
          duration: "2|3",
          value_list: "2&10",
          property_affected_list: "0|critical_rate",
          skill_type: "1|5|0|100|0",
          skill_owner: "charge",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: "0|5"
        }, {
          id: "1282",
          name: "1088",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&190",
          property_affected_list: "6|currentEnergy",
          skill_type: "1|6|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1001|4",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "1283",
          name: "1026",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&10",
          property_affected_list: "2|2|1003",
          skill_type: "0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "1007|3,",
          combine: "",
          effect: "0_3",
          onlyOne: "",
          delete: "",
          ability_up: "0|3"
        }, {
          id: "1284",
          name: "1165",
          ownership: "2",
          spawn_probability: "",
          rarity: "1",
          importance: "",
          duration: "0",
          value_list: "2&200",
          property_affected_list: "26|energy_max",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "2001",
          name: "",
          ownership: "",
          spawn_probability: "",
          rarity: "",
          importance: "",
          duration: "2|3",
          value_list: "2&2&defeatEnemyCount",
          property_affected_list: "0|amplified_damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        }, {
          id: "2002",
          name: "",
          ownership: "",
          spawn_probability: "",
          rarity: "",
          importance: "",
          duration: "2|3",
          value_list: "2&3",
          property_affected_list: "0|amplified_damage",
          skill_type: "1|5|0|100|0",
          skill_owner: "",
          is_dynamic_value: "",
          is_dynamic_subValue: "",
          is_dynamic_condition: "",
          style: "",
          combine: "",
          effect: "",
          onlyOne: "",
          delete: "",
          ability_up: ""
        } ]
      }
    });
    module.exports = SkillConfig;
    cc._RF.pop();
  }, {} ],
  SkillData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b98fcrGTX1ASJCj3LQ5KPOJ", "SkillData");
    "use strict";
    var EnumType = require("EnumType");
    var BulletConfig = require("BulletConfig");
    var BulletData = require("./BulletData");
    var SkillData = cc.Class({
      extends: cc.Component,
      statics: {},
      properties: {
        roleData: null,
        skillConfig: null,
        skillId: null,
        skillType: null,
        propertyType: null,
        bulletDamageType: null,
        property: null,
        baseValue: null,
        baseSubValue: null,
        baseSubValueCount: null,
        valueType: null,
        value: null,
        result: null,
        durationType: null,
        durationValue: null,
        durationStartTimer: null,
        isDynamicValue: null,
        isDynamicSubValue: null,
        isDynamicCondition: null,
        dependOnEnemy: null,
        condition: null,
        subCondition: null,
        subConditionValue: null,
        conditionValueType: null,
        conditionValue: null,
        conditionValueBase: null,
        triggerRate: null,
        triggerCount: null,
        skillOwner: null,
        combineArr: null,
        combineResult: null
      },
      getBulletConfig: function getBulletConfig(_id) {
        for (var i = 0; i < BulletConfig.data.length; i++) {
          var config = BulletConfig.data[i];
          if (config.id == _id) return config;
        }
        return null;
      },
      setData: function setData(_roleData, _skillConfig, _propertyAffected, _value, _condition, _parentSet) {
        this.skillConfig = _skillConfig;
        this.skillId = _skillConfig.id;
        this.roleData = _roleData;
        this.skillOwner = _skillConfig.skill_owner;
        this.parentSet = _parentSet;
        this.isDynamicValue = _skillConfig.is_dynamic_value;
        this.isDynamicSubValue = _skillConfig.is_dynamic_subValue;
        this.isDynamicCondition = _skillConfig.is_dynamic_condition;
        if ("" != _propertyAffected) {
          var propertyArr = _propertyAffected.split("|");
          this.propertyType = parseInt(propertyArr[0]);
          if (this.propertyType == EnumType.PROPERTY_TYPE.BULLET_DAMAGE) {
            this.bulletDamageType = propertyArr[1];
            this.property = propertyArr[2];
          } else this.property = propertyArr[1];
          this.valueArr = _value.split("&");
          this.valueType = parseInt(this.valueArr[0]);
          this.dependOnEnemy = 4 == this.valueArr.length;
          if (this.valueArr.length >= 3) if (this.valueArr[2].indexOf("-") >= 0) {
            var arr = this.valueArr[2].split("-");
            this.baseValue = arr[0];
            this.baseValueDamageType = arr[1];
          } else this.baseValue = this.valueArr[2]; else this.baseValue = null;
          if (this.valueArr[1].indexOf("|") >= 0) {
            var baseSubValueArr = this.valueArr[1].split("|");
            this.baseSubValueCount = parseInt(baseSubValueArr[0]);
            this.baseSubValue = baseSubValueArr[1];
          } else this.valueType == EnumType.VALUE_TYPE.NUMBER && (this.value = Number(this.valueArr[1]));
        }
        var durationArr = _skillConfig.duration.split("|");
        this.durationType = parseInt(durationArr[0]);
        this.durationValue = durationArr.length > 1 ? parseInt(durationArr[1]) : null;
        if (_condition != EnumType.CONDITION_TYPE.GET) {
          var conditionStrArr = _condition.split("|");
          this.condition = conditionStrArr[1];
          if (this.condition.indexOf("-") >= 0) {
            var conditionArr = this.condition.split("-");
            this.condition = parseInt(conditionArr[0]);
            this.subCondition = parseInt(conditionArr[1]);
            this.subConditionValue = parseInt(conditionArr[2]);
            isNaN(this.subCondition) && (this.subCondition = conditionArr[1]);
          } else this.condition = parseInt(this.condition);
          var conditionValueArr;
          if (conditionStrArr[2].indexOf("&") >= 0) {
            conditionValueArr = conditionStrArr[2].split("&");
            this.conditionValueType = parseInt(conditionValueArr[0]);
            this.conditionValue = parseInt(conditionValueArr[1]);
            this.conditionValueBase = conditionValueArr[2];
            if (this.conditionValueType == EnumType.VALUE_TYPE.RATE) {
              var roleConfig = _roleData.getStaticData();
              if ("dynamic" != this.isDynamicCondition) {
                var bulletConfig = this.getBulletConfig(this.conditionValueBase);
                null != bulletConfig ? this.conditionValue = .01 * this.conditionValue : roleConfig.hasOwnProperty(this.conditionValueBase) && (this.conditionValue = Math.floor(.01 * this.conditionValue * roleConfig[this.conditionValueBase]));
              } else this.conditionValue = .01 * this.conditionValue;
            }
          }
          this.triggerRate = parseInt(conditionStrArr[3]);
          this.triggerCount = "0" == conditionStrArr[4] ? Number.MAX_SAFE_INTEGER : parseInt(conditionStrArr[4]);
        }
        if (_skillConfig.combine && "" != _skillConfig.combine) {
          var combineArr = _skillConfig.combine.split("=");
          this.combineResult = combineArr[1];
          this.combineArr = combineArr[0].split("+");
        }
      },
      getValue: function getValue() {
        if ("1156" == this.skillId) return this.valueArr;
        var roleData = true == this.dependOnEnemy ? this.roleData.currentEnemy : this.roleData;
        var roleConfig = true == this.dependOnEnemy ? this.roleData.currentEnemy.getStaticData() : this.roleData.getStaticData();
        var subValueRoleData = "" == this.isDynamicSubValue ? roleConfig : roleData;
        var valueRoleData = "" == this.isDynamicValue ? roleConfig : roleData;
        var currentSubBaseData;
        null != this.baseSubValue && (currentSubBaseData = subValueRoleData.hasOwnProperty(this.baseSubValue) ? subValueRoleData : subValueRoleData.data);
        var currentBaseData;
        var bulletConfig = this.getBulletConfig(this.baseValue);
        if (null != this.baseValue) if (valueRoleData.hasOwnProperty(this.baseValue) || "lost_hp" == this.baseValue) currentBaseData = valueRoleData; else if (null != bulletConfig) {
          var bulletData = roleData.baseBulletDataList[this.baseValue];
          currentBaseData = bulletData;
        } else currentBaseData = valueRoleData.data;
        if (this.valueType == EnumType.VALUE_TYPE.NUMBER) {
          if (null != this.baseSubValue) {
            if (null != this.changePropertyValue) {
              var result = this.baseSubValueCount * this.changePropertyValue;
              return result;
            }
            return this.baseSubValueCount * currentSubBaseData[this.baseSubValue];
          }
          return this.value;
        }
        if (null != this.baseSubValue) return this.baseSubValueCount * currentSubBaseData[this.baseSubValue] * .01 * currentBaseData[this.baseValue];
        if (this.propertyType == EnumType.PROPERTY_TYPE.ENHANCEMENT_EFFECT || this.propertyType == EnumType.PROPERTY_TYPE.BULLET_DAMAGE) return .01 * Number(this.valueArr[1]);
        var value = .01 * Number(this.valueArr[1]);
        var base;
        base = null != bulletConfig ? currentBaseData.getDamage()[this.baseValueDamageType] : "lost_hp" == this.baseValue ? currentBaseData.basic_hp - roleData.currentHp : currentBaseData[this.baseValue];
        return Math.floor(value * base);
      },
      getAdditionalRate: function getAdditionalRate() {
        return this.valueArr[1];
      },
      getAdditionalValue: function getAdditionalValue() {
        return null != this.baseSubValue ? this.baseSubValueCount : this.value;
      },
      updateValue: function updateValue(_value) {
        this.valueType == EnumType.VALUE_TYPE.NUMBER ? null != this.baseSubValue ? this.baseSubValueCount += _value : this.value += _value : this.valueArr[1] = Number(this.valueArr[1]) + Number(_value);
      },
      getConditionValue: function getConditionValue() {
        if (this.conditionValueType == EnumType.VALUE_TYPE.NUMBER || "dynamic" != this.isDynamicCondition) return this.conditionValue;
        var roleData = this.roleData;
        return roleData.data.hasOwnProperty(this.conditionValueBase) ? Math.floor(this.conditionValue * roleData.data[this.conditionValueBase]) : Math.floor(this.conditionValue * roleData[this.conditionValueBase]);
      },
      triggerEvent: function triggerEvent() {
        this.durationStartTimer = Date.now();
        this.durationType == EnumType.DURATION_TYPE.ROUND && (this.durationValue = Global.levelManager.curLevel);
        this.hasAdded = false;
      }
    });
    module.exports = SkillData;
    cc._RF.pop();
  }, {
    "./BulletData": "BulletData",
    BulletConfig: "BulletConfig",
    EnumType: "EnumType"
  } ],
  SkillManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "727cbae7XtE65x2/1fhwdwd", "SkillManager");
    "use strict";
    var SkillConfig = require("SkillConfig");
    var EnumType = require("EnumType");
    var BulletConfig = require("BulletConfig");
    var SkillData = require("SkillData");
    var STEAL_BULLET_ID = 1187;
    var STEAL_COPY_BULLET_ID = 1188;
    var SkillManager = cc.Class({
      extends: cc.Component,
      statics: {},
      properties: {},
      ctor: function ctor() {
        this.skillConfigDict = {};
        for (var i = 0; i < SkillConfig.data.length; i++) {
          var skill = SkillConfig.data[i];
          skill.propertyAffectedList = skill.property_affected_list.split(",");
          skill.valueList = skill.value_list.split(",");
          this.skillConfigDict[skill.id] = skill;
        }
      },
      getSkillConfig: function getSkillConfig(_id) {
        return this.skillConfigDict[_id];
      },
      removeSkillFromBag: function removeSkillFromBag(_skillSet, _roleData) {
        if (false == _roleData.bag.hasOwnProperty(EnumType.BAG_TYPE.SKILL)) return;
        if (false == _roleData.bag[EnumType.BAG_TYPE.SKILL].hasOwnProperty(_skillSet.config.rarity)) return;
        var index = _roleData.bag[EnumType.BAG_TYPE.SKILL][_skillSet.config.rarity].indexOf(_skillSet);
        if (index >= 0) {
          _roleData.bag[EnumType.BAG_TYPE.SKILL][_skillSet.config.rarity].splice(index, 1);
          _roleData.bag[EnumType.BAG_TYPE.SKILL][_skillSet.config.rarity].length <= 0 && delete _roleData.bag[EnumType.BAG_TYPE.SKILL][_skillSet.config.rarity];
        }
      },
      addSkill2Bag: function addSkill2Bag(_skillSet, _roleData) {
        _roleData.bag[EnumType.BAG_TYPE.SKILL].hasOwnProperty(_skillSet.config.rarity) ? _roleData.bag[EnumType.BAG_TYPE.SKILL][_skillSet.config.rarity].push(_skillSet) : _roleData.bag[EnumType.BAG_TYPE.SKILL][_skillSet.config.rarity] = [ _skillSet ];
      },
      getSkillByType: function getSkillByType(_type, _roleData) {
        var result = null;
        for (var id in _roleData.ownSkills) {
          var skillSetList = _roleData.ownSkills[id];
          if (skillSetList.length > 0) {
            var skillSet = skillSetList[0];
            var skill = skillSet.values[0];
            if (skill.skillOwner == _type) {
              result = skill;
              break;
            }
          }
        }
        return result;
      },
      getSkillsByType: function getSkillsByType(_type, _roleData) {
        var result = [];
        for (var id in _roleData.ownSkills) {
          var skillSetList = _roleData.ownSkills[id];
          if (skillSetList.length > 0) {
            var skillSet = skillSetList[0];
            var skill = skillSet.values[0];
            skill.skillOwner == _type && result.push(skill);
          }
        }
        return result;
      },
      getSkillSetByOwnership: function getSkillSetByOwnership(_ownership, _roleData) {
        var result = [];
        for (var id in _roleData.ownSkills) {
          var skillSetList = _roleData.ownSkills[id];
          for (var i = 0; i < skillSetList.length; i++) {
            var skillSet = skillSetList[i];
            skillSet.config.ownership == _ownership && result.push(skillSet);
          }
        }
        return result;
      },
      getSkill: function getSkill(_id, _roleData) {
        var skillSet = null;
        if (_roleData.ownSkills.hasOwnProperty(_id)) {
          var skillSetList = _roleData.ownSkills[_id];
          skillSetList.length > 0 && (skillSet = skillSetList[0]);
        }
        return skillSet;
      },
      addSkill: function addSkill(_id, _roleData, _ownerSkillSet) {
        var skillConfig = this.getSkillConfig(_id);
        if (null == skillConfig) return;
        if (1 == skillConfig.onlyOne) {
          var _skillSet2 = this.getSkill(_id, _roleData);
          if (null != _skillSet2) return "noMergeAnimation";
        }
        if ("" != skillConfig["delete"]) {
          var _skillSet3 = this.getSkill(skillConfig["delete"], _roleData);
          null != _skillSet3 && this.removeSkillFromBag(_skillSet3, _roleData);
        }
        if (_id == STEAL_COPY_BULLET_ID) {
          var stealBulletSkillSet = this.getSkill(STEAL_BULLET_ID, _roleData);
          null != stealBulletSkillSet && this.removeSkill(_roleData, stealBulletSkillSet.id);
        }
        this.handleStyle(skillConfig);
        var skillTypeArr = null;
        if (null == _ownerSkillSet && true == _roleData.eventsDict.hasOwnProperty(EnumType.EVENT_TRIGGER_TYPE.GET_SKILL)) for (var i = 0; i < _roleData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.GET_SKILL].length; i++) {
          var event = _roleData.eventsDict[EnumType.EVENT_TRIGGER_TYPE.GET_SKILL][i];
          _roleData.eventListener(event, parseInt(skillConfig.rarity));
        }
        skillConfig.skill_type.indexOf(",") >= 0 && (skillTypeArr = skillConfig.skill_type.split(","));
        var skillType;
        var skillSet = {
          id: skillConfig.id,
          values: [],
          config: skillConfig
        };
        null != _ownerSkillSet && (_ownerSkillSet.subSkillSet = skillSet);
        skillSet.ownerSkillSet = _ownerSkillSet;
        for (var _i = 0; _i < skillConfig.propertyAffectedList.length; _i++) {
          skillType = null == skillTypeArr ? skillConfig.skill_type : skillTypeArr[_i];
          var propertyAffected = skillConfig.propertyAffectedList[_i];
          var valueStr = skillConfig.valueList[_i];
          var skillData = new SkillData();
          skillData.setData(_roleData, skillConfig, propertyAffected, valueStr, skillType, skillSet);
          skillSet.values.push(skillData);
          skillSet.combineResult = skillData.combineResult;
          skillSet.combineArr = skillData.combineArr;
          if ("" != skillConfig.propertyAffectedList) if (skillType == EnumType.CONDITION_TYPE.GET) skillData.propertyType == EnumType.PROPERTY_TYPE.ENHANCEMENT_EFFECT ? _roleData.updateEnchancementEffect(skillData) : _roleData.updateProperty(skillData); else {
            var hasSkill = false;
            if (skillData.condition && true == _roleData.eventsDict.hasOwnProperty(skillData.condition)) for (var index in _roleData.eventsDict[skillData.condition]) {
              var item = _roleData.eventsDict[skillData.condition][index];
              if (item.skillId == skillConfig.id) if (skillConfig.skill_owner == EnumType.ENHANCEMENT_EFFECT.EMERGENCY || skillConfig.skill_owner == EnumType.ENHANCEMENT_EFFECT.CHARGE || skillConfig.skill_owner == EnumType.ENHANCEMENT_EFFECT.VALUE) {
                item.valueType == EnumType.VALUE_TYPE.NUMBER ? item.updateValue(skillData.getAdditionalValue()) : item.updateValue(skillData.getAdditionalRate());
                hasSkill = true;
              } else if (skillConfig.skill_owner == EnumType.ENHANCEMENT_EFFECT.RATE) {
                if (item.triggerRate < 100) {
                  item.triggerRate += skillData.triggerRate;
                  item.triggerRate = item.triggerRate > 100 ? 100 : item.triggerRate;
                }
                hasSkill = true;
              }
            }
            false == hasSkill && _roleData.updateEvent(skillData);
          }
        }
        if (null == _ownerSkillSet) {
          this.addSkill2Bag(skillSet, _roleData);
          true == _roleData.ownSkills.hasOwnProperty(_id) ? _roleData.ownSkills[_id].push(skillSet) : _roleData.ownSkills[_id] = [ skillSet ];
          this.checkCombine(skillSet, _roleData);
        }
      },
      removeSkill: function removeSkill(_roleData, _skillSetId, _subSkillSet) {
        var skillSet;
        if (null == _subSkillSet) {
          skillSet = _roleData.ownSkills[_skillSetId].pop();
          _roleData.ownSkills[_skillSetId].length <= 0 && delete _roleData.ownSkills[_skillSetId];
          this.removeSkillFromBag(skillSet, _roleData);
        } else skillSet = _subSkillSet;
        for (var k = 0; k < skillSet.values.length; k++) {
          var skillData = skillSet.values[k];
          _roleData.removeEnchancementEffect(skillData);
          _roleData.removeEvent(skillData);
          _roleData.removeProperty(skillData);
        }
      },
      checkCombine: function checkCombine(_skillSet, _roleData) {
        if (null == _skillSet.combineResult) return;
        if (_skillSet.combineResult == _skillSet.id) return;
        var count = 1;
        for (var i = 0; i < _skillSet.combineArr.length; i++) {
          var skillId = _skillSet.combineArr[i];
          if (_skillSet.id == skillId) continue;
          _roleData.ownSkills.hasOwnProperty(skillId) && count++;
        }
        if (count == _skillSet.combineArr.length) {
          for (var j = 0; j < _skillSet.combineArr.length; j++) {
            var _skillId = _skillSet.combineArr[j];
            this.removeSkill(_roleData, _skillId);
          }
          var isMergeAnimation = "noMergeAnimation" != this.addSkill(_skillSet.combineResult, _roleData);
          _roleData.combineSkillCallback && _roleData.combineSkillCallback(_skillSet.combineArr.concat(_skillSet.combineResult), isMergeAnimation);
        }
      },
      getBulletConfig: function getBulletConfig(_id) {
        for (var i = 0; i < BulletConfig.data.length; i++) {
          var config = BulletConfig.data[i];
          if (config.id == _id) return config;
        }
      },
      getSkillArr: function getSkillArr(_type) {
        var result = {};
        for (var i = 0; i < SkillConfig.data.length; i++) {
          var skill = SkillConfig.data[i];
          skill.ownership == _type && (result.hasOwnProperty(skill.rarity) ? result[skill.rarity].push(skill) : result[skill.rarity] = [ skill ]);
        }
        return result;
      },
      getRandomMagic_2: function getRandomMagic_2(_count, _isNew, _roleData) {
        !_isNew && this.lastMagic_2 || (this.lastMagic_2 = []);
        var magicArr = this.getSkillArr(EnumType.SKILL_TYPE.MAGIC);
        var result = [];
        var tempMagicArr;
        while (_count > 0) {
          var random = 100 * Math.random();
          tempMagicArr = random < 50 ? magicArr[EnumType.RARE_TYPE.EPIC] : magicArr[EnumType.RARE_TYPE.LEGENDARY];
          var magicItem = void 0;
          var style = this.getStyle(_roleData);
          if (this.checkBboostChance(_roleData) && null != style) {
            var weights = this.getSkillWeights(tempMagicArr, style);
            magicItem = this.weightedRandomFromArray(tempMagicArr, weights);
          } else {
            var randomIndex = Math.round(Math.random() * (tempMagicArr.length - 1));
            magicItem = tempMagicArr[randomIndex];
          }
          if (result.indexOf(magicItem) < 0 && this.lastMagic_2.indexOf(magicItem) < 0) {
            result.push(magicItem);
            _count--;
          }
        }
        this.lastMagic_2 = result;
        return result;
      },
      getRandomMagic: function getRandomMagic(_count, _isNew, _roleData) {
        !_isNew && this.lastMagic || (this.lastMagic = []);
        var magicArr = this.getSkillArr(EnumType.SKILL_TYPE.MAGIC);
        var result = [];
        var tempMagicArr;
        while (_count > 0) {
          var random = 100 * Math.random();
          tempMagicArr = random < EnumType.MAGIC_RATE.RARE ? magicArr[EnumType.RARE_TYPE.RARE] : random < EnumType.MAGIC_RATE.RARE + EnumType.MAGIC_RATE.EPIC ? magicArr[EnumType.RARE_TYPE.EPIC] : magicArr[EnumType.RARE_TYPE.LEGENDARY];
          var magicItem = void 0;
          var style = this.getStyle(_roleData);
          if (this.checkBboostChance(_roleData) && null != style) {
            var weights = this.getSkillWeights(tempMagicArr, style);
            magicItem = this.weightedRandomFromArray(tempMagicArr, weights);
          } else {
            var randomIndex = Math.round(Math.random() * (tempMagicArr.length - 1));
            magicItem = tempMagicArr[randomIndex];
          }
          if (result.indexOf(magicItem) < 0 && this.lastMagic.indexOf(magicItem) < 0) {
            result.push(magicItem);
            _count--;
          }
        }
        this.lastMagic = result;
        return result;
      },
      getRandomSkills: function getRandomSkills(_count, _isNew, _roleData) {
        !_isNew && this.lastSkills || (this.lastSkills = []);
        var skills = this.getSkillArr(EnumType.SKILL_TYPE.SKILL);
        var result = [];
        var tempSkills;
        while (_count > 0) {
          var random = 100 * Math.random();
          tempSkills = random < EnumType.SKILL_RATE.COMMON ? skills[EnumType.RARE_TYPE.COMMON] : random < EnumType.SKILL_RATE.COMMON + EnumType.SKILL_RATE.RARE ? skills[EnumType.RARE_TYPE.RARE] : random < EnumType.SKILL_RATE.COMMON + EnumType.SKILL_RATE.RARE + EnumType.SKILL_RATE.EPIC ? skills[EnumType.RARE_TYPE.EPIC] : skills[EnumType.RARE_TYPE.LEGENDARY];
          var skillItem = void 0;
          var style = this.getStyle(_roleData);
          if (this.checkBboostChance(_roleData) && null != style) {
            var weights = this.getSkillWeights(tempSkills, style);
            skillItem = this.weightedRandomFromArray(tempSkills, weights);
          } else {
            var randomIndex = Math.round(Math.random() * (tempSkills.length - 1));
            skillItem = tempSkills[randomIndex];
          }
          if (result.indexOf(skillItem) < 0 && this.lastSkills.indexOf(skillItem) < 0) {
            result.push(skillItem);
            _count--;
          }
        }
        this.lastSkills = result;
        return result;
      },
      weightedRandomFromArray: function weightedRandomFromArray(tempSkills, weights) {
        var sum = weights.reduce(function(a, b) {
          return a + b;
        }, 0);
        var normalizedWeights = weights.map(function(weight) {
          return weight / sum;
        });
        var cumulativeWeights = [];
        var cumulativeSum = 0;
        for (var i = 0; i < normalizedWeights.length; i++) {
          cumulativeSum += normalizedWeights[i];
          cumulativeWeights.push(cumulativeSum);
        }
        var randomValue = Math.random() * cumulativeSum;
        for (var j = 0; j < cumulativeWeights.length; j++) if (randomValue < cumulativeWeights[j]) return tempSkills[j];
        return tempSkills[tempSkills.length - 1];
      },
      getSkillWeights: function getSkillWeights(_skillArr, _style) {
        var result = [];
        for (var i = 0; i < _skillArr.length; i++) {
          var skill = _skillArr[i];
          switch (parseInt(skill.rarity)) {
           case EnumType.RARE_TYPE.COMMON:
            skill.style.indexOf(_style) >= 0 && (skill.rarityValue = EnumType.SKILL_RATE.COMMON * EnumType.BOOST_CHANCE_COEFFICIENT.COMMON);
            break;

           case EnumType.RARE_TYPE.RARE:
            skill.style.indexOf(_style) >= 0 && (skill.rarityValue = EnumType.SKILL_RATE.RARE * EnumType.BOOST_CHANCE_COEFFICIENT.RARE);
            break;

           case EnumType.RARE_TYPE.EPIC:
            skill.style.indexOf(_style) >= 0 && (skill.rarityValue = EnumType.SKILL_RATE.EPIC * EnumType.BOOST_CHANCE_COEFFICIENT.EPIC);
            break;

           case EnumType.RARE_TYPE.LEGENDARY:
            skill.style.indexOf(_style) >= 0 && (skill.rarityValue = EnumType.SKILL_RATE.LEGENDARY * EnumType.BOOST_CHANCE_COEFFICIENT.LEGENDARY);
          }
          null == skill.rarityValue && (skill.rarityValue = 0);
          result.push(skill.rarityValue);
        }
        return result;
      },
      checkBboostChance: function checkBboostChance(_roleData) {
        var result = Global.utils.getRandomByProbability(_roleData.getBoosChanceRate() / 100);
        return true;
      },
      handleStyle: function handleStyle(_skillConfig) {
        var result = {};
        if ("" != _skillConfig.style) {
          var styleStrArr;
          var style;
          var score;
          var styleArr = _skillConfig.style.split(",");
          for (var j = 0; j < styleArr.length; j++) {
            var styleStr = styleArr[j];
            styleStrArr = styleStr.split("|");
            style = styleStrArr[0];
            score = parseInt(styleStrArr[1]);
            result[style] = score;
          }
          _skillConfig.styleResult = result;
        }
        null == _skillConfig.rarityValue && (_skillConfig.rarityValue = 0);
      },
      getStyle: function getStyle(_roleData) {
        var result = {};
        var resultStyle = null;
        for (var type in _roleData.bag) {
          var rarityList = _roleData.bag[type];
          for (var rarity in rarityList) {
            var itemList = rarityList[rarity];
            for (var i = 0; i < itemList.length; i++) {
              var item = itemList[i];
              if ("" != item.style) for (var style in item.styleResult) result.hasOwnProperty(style) ? result[style] += item.styleResult[style] : result[style] = item.styleResult[style];
            }
          }
        }
        var hasSame = false;
        if (!(Object.keys(result).length > 0)) return null;
        var maxValue = 0;
        for (var _style2 in result) {
          var value = result[_style2];
          if (value > maxValue) {
            maxValue = value;
            hasSame = false;
            resultStyle = _style2;
          } else value == maxValue && (hasSame = true);
        }
        if (true == hasSame) return null;
        return resultStyle;
      }
    });
    module.exports = SkillManager;
    cc._RF.pop();
  }, {
    BulletConfig: "BulletConfig",
    EnumType: "EnumType",
    SkillConfig: "SkillConfig",
    SkillData: "SkillData"
  } ],
  SkillMerge: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e7876VVC+tL94N3+nuZVwZs", "SkillMerge");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        itemMerge: {
          type: sp.Skeleton,
          default: null
        },
        itemFusion: {
          type: sp.Skeleton,
          default: null
        },
        _leftRootNode: null,
        _rightRootNode: null,
        _fusionRootNode: null,
        _args: null,
        _belongsToCT: null
      },
      onLoad: function onLoad() {
        var attachUtil = this.itemFusion.attachUtil;
        var nodes = attachUtil.generateAttachedNodes("L_Item");
        this._leftRootNode = nodes[0];
        nodes = attachUtil.generateAttachedNodes("R_Item");
        this._rightRootNode = nodes[0];
        nodes = attachUtil.generateAttachedNodes("New_Item");
        this._fusionRootNode = nodes[0];
      },
      onEnable: function onEnable() {
        this.itemMerge.setCompleteListener(this.onComplete.bind(this));
        this.itemFusion.setCompleteListener(this.onComplete.bind(this));
        this.itemMerge.setEventListener(this.onTrack.bind(this));
        this.itemFusion.setEventListener(this.onTrack.bind(this));
        this.initUI();
      },
      onComplete: function onComplete(trackEntry) {
        console.log("onComplete");
        if ("animation" == (null == trackEntry ? void 0 : trackEntry.animation.name)) {
          this.itemFusion.node.active = true;
          this.itemFusion.setAnimation(0, "Item_Fusion", false);
        } else if ("Item_Fusion" == (null == trackEntry ? void 0 : trackEntry.animation.name)) {
          this.itemFusion.node.active = false;
          this.showRogueItemEffect();
        }
      },
      onTrack: function onTrack(trackEntry, event) {
        console.log("onTrack");
        if ("New_Item" == event.data.name) {
          this._leftRootNode.removeAllChildren();
          this._rightRootNode.removeAllChildren();
          this._fusionRootNode.active = true;
        }
      },
      onAdded: function onAdded(args) {
        this._args = args;
        return true;
      },
      onBeforeRemove: function onBeforeRemove(args) {},
      initUI: function initUI() {
        this.createItem(this._args.combineArr[0], this._leftRootNode);
        this.createItem(this._args.combineArr[1], this._rightRootNode);
        this.createItem(this._args.combineArr[2], this._fusionRootNode);
        this._fusionRootNode.active = false;
        this.itemFusion.node.active = false;
        this.itemMerge.node.active = true;
        this.itemMerge.setAnimation(0, "animation", false);
      },
      createItem: function createItem(skillId, rootNode) {
        rootNode.removeAllChildren();
        var skillData = Global.skillManager.getSkillConfig(skillId);
        var bulletPreb = Global.res.getRes(gameConfig.POOLMANAGER_TYPE.bullet.path);
        if (bulletPreb) {
          var bulletItem = cc.instantiate(bulletPreb);
          bulletItem.setPosition(0, 0);
          rootNode.addChild(bulletItem);
          var bullet = bulletItem.getComponent("Bullet");
          bullet.initData({
            bulletConfig: skillData
          }, {
            needBg: false,
            hideOwnedCount: true,
            skillType: EnumType.SKILL_TYPE.MAGIC
          });
        }
      },
      showRogueItemEffect: function showRogueItemEffect() {
        var fworldPos = this._fusionRootNode.convertToWorldSpaceAR(cc.v2(0, 0));
        Global.gui.get(gameConfig.UIID.BattlePanel).getComponent("BattleView").showRogueItemEffect(this._args.combineArr[2], fworldPos, function() {
          Global.gui.remove(gameConfig.UIID.SkillMerge);
        });
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  SlotPos: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "5b300Lq/9FE46vPKaE4ovuw", "SlotPos");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        itemMask: cc.Node,
        equipmentItem: cc.Node
      },
      start: function start() {
        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd.bind(this), this);
      },
      setData: function setData(_roleData, _index, _slot) {
        this.roleData = _roleData;
        this.index = _index;
        this.slot = _slot;
        this.equipmentItem.active = false;
        this.setMask(false);
      },
      updateUI: function updateUI() {
        var equipmentItemCom = this.equipmentItem.getComponent("EquipmentItem");
        equipmentItemCom.setData(equipmentItemCom.equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.SLOT);
      },
      updateEquipmentItem: function updateEquipmentItem(_equipmentData) {
        this.equipmentItem.getComponent("EquipmentItem").setData(_equipmentData, this.roleData, EnumType.EQUIPMENT_ITEM_OWNER_TYPE.SLOT);
        this.equipmentItem.active = true;
      },
      onTouchEnd: function onTouchEnd() {
        var currentEquipmentData = Global.equipmentManager.getCurrentEquipment();
        if (!currentEquipmentData) return;
        Global.equipmentManager.setEquipment(currentEquipmentData, this.equipmentItem.active ? this.equipmentItem.getComponent("EquipmentItem").equipmentData : null, this.index, this.roleData);
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateEquipments();
        this.updateEquipmentItem(currentEquipmentData);
        Global.gui.get(gameConfig.UIID.EquipPagePanel).getComponent("EquipmentView").updateSlot(null);
        Global.equipmentManager.setCurrentEquipment(null);
      },
      setMask: function setMask(_mask) {
        this.itemMask.active = _mask;
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  SpineBase: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ce0a5yyUcJJToaOFQaYCUXy", "SpineBase");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spine: {
          type: sp.Skeleton,
          default: null
        },
        animationCallBack: null,
        trackEventCallBack: null
      },
      onEnable: function onEnable() {
        this.spine.setCompleteListener(this.onComplete.bind(this));
        this.spine.setEventListener(this.onTrack.bind(this));
      },
      onComplete: function onComplete(trackEntry) {
        this.animationCallBack && this.animationCallBack(trackEntry);
      },
      onTrack: function onTrack(trackEntry, event) {
        this.trackEventCallBack && this.trackEventCallBack(trackEntry, event);
      },
      playAnimation: function playAnimation(animName, loop) {
        animName ? this.spine.setAnimation(0, animName, loop) : this.spine.clearTrack(0);
      }
    });
    cc._RF.pop();
  }, {} ],
  SpineDemo: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8960fWucZpPFZc6jJFSUh35", "SpineDemo");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        spine: {
          type: sp.Skeleton,
          default: null
        },
        leftPreb: {
          type: cc.Node,
          default: null
        },
        rightPreb: {
          type: cc.Node,
          default: null
        },
        fusionPreb: {
          type: cc.Node,
          default: null
        },
        _leftRootNode: null,
        _rightRootNode: null,
        _fusionRootNode: null
      },
      onLoad: function onLoad() {
        var attachUtil = this.spine.attachUtil;
        var nodes = attachUtil.generateAttachedNodes("L_Item");
        this._leftRootNode = nodes[0];
        nodes = attachUtil.generateAttachedNodes("R_Item");
        this._rightRootNode = nodes[0];
        nodes = attachUtil.generateAttachedNodes("New_Item");
        this._fusionRootNode = nodes[0];
        this.spine.node.active = false;
      },
      onEnable: function onEnable() {
        this.spine.setCompleteListener(this.onComplete.bind(this));
        this.spine.setEventListener(this.onTrack.bind(this));
      },
      onComplete: function onComplete(trackEntry) {
        console.log("onComplete");
        this.spine.node.active = false;
      },
      onTrack: function onTrack(trackEntry, event) {
        console.log("onTrack");
        if ("New_Item" == event.data.name) {
          this._leftRootNode.removeAllChildren();
          this._rightRootNode.removeAllChildren();
          this._fusionRootNode.active = true;
        }
      },
      playAnimation: function playAnimation(animName, loop) {
        animName ? this.spine.setAnimation(0, animName, loop) : this.spine.clearTrack(0);
      },
      onClickTestBtn: function onClickTestBtn() {
        this._leftRootNode.removeAllChildren();
        var leftSkill = cc.instantiate(this.leftPreb);
        leftSkill.setPosition(0, 0);
        this._leftRootNode.addChild(leftSkill);
        this._rightRootNode.removeAllChildren();
        var rightSkill = cc.instantiate(this.rightPreb);
        rightSkill.setPosition(0, 0);
        this._rightRootNode.addChild(rightSkill);
        this._fusionRootNode.removeAllChildren();
        var fusionSkill = cc.instantiate(this.fusionPreb);
        fusionSkill.setPosition(0, 0);
        this._fusionRootNode.addChild(fusionSkill);
        this._fusionRootNode.active = false;
        this.spine.node.active = true;
        this.playAnimation("Item_Fusion");
      }
    });
    cc._RF.pop();
  }, {} ],
  StaminaPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "156211AuAZNbZOsfDFRSePm", "StaminaPanel");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        remainAdCountLabel: cc.Node,
        remainDiamondLabel: cc.Node,
        diamondCountLabel: cc.Node,
        content: cc.Node,
        adButton: cc.Button,
        diamondButton: cc.Button
      },
      start: function start() {},
      getStaminaWithAd: function getStaminaWithAd() {
        if (Global.roleData.staminaRemainCount_ad <= 0) return;
        Global.roleData.staminaRemainCount_ad--;
        Global.roleData.updateStamina(15);
        this.updateUI();
        var storageData = Global.roleData.getAdditionalData();
        Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
        Global.taskManager.updateProgress(EnumType.TASK_TYPE.BUY_STAMINA, 1);
      },
      getStaminaWithDiamond: function getStaminaWithDiamond() {
        if (Global.roleData.staminaRemainCount_diamond <= 0) return;
        Global.roleData.staminaRemainCount_diamond--;
        Global.roleData.updateStamina(15);
        this.updateUI();
        var storageData = Global.roleData.getAdditionalData();
        Global.storage.set(gameConfig.COMMON_KEYS.ROLE_ADDITIONAL_DATA, storageData);
        Global.taskManager.updateProgress(EnumType.TASK_TYPE.BUY_STAMINA, 1);
      },
      updateUI: function updateUI() {
        this.remainAdCountLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("stamina_panel_remain_count") + Global.roleData.staminaRemainCount_ad);
        this.remainDiamondLabel.getComponent("LabelUpdater").setString(Global.languageManager.t("stamina_panel_remain_count") + Global.roleData.staminaRemainCount_diamond);
        this.diamondCountLabel.getComponent("LabelUpdater").setString("" + this.diamondValues[4 - Global.roleData.staminaRemainCount_diamond]);
        this.diamondButton.interactable = !(Global.roleData.staminaRemainCount_diamond <= 0);
        this.adButton.interactable = !(Global.roleData.staminaRemainCount_ad <= 0);
      },
      onAdded: function onAdded(_args) {
        this.diamondValues = [ 90, 120, 150, 180, 180 ];
        this.content.y = 1e3;
        this.content.opacity = 255;
        cc.tween(this.node).to(.2, {
          opacity: 255
        }).start();
        cc.tween(this.content).to(.5, {
          position: cc.v2(0, 0)
        }, {
          easing: "elasticOut"
        }).start();
        this.updateUI();
      },
      onClickClose: function onClickClose() {
        cc.tween(this.node).stop();
        cc.tween(this.node).to(.2, {
          opacity: 0
        }).call(function() {
          Global.gui.remove(gameConfig.UIID.StaminaPanel);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  StorageManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "ed226gLF85Oyr+WhA9TJZLX", "StorageManager");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageManager = void 0;
    var StorageManager = function() {
      function StorageManager() {
        this.id = null;
        this.iss = null;
      }
      Object.defineProperty(StorageManager.prototype, "encrypted", {
        get: function() {
          return true;
        },
        enumerable: false,
        configurable: true
      });
      StorageManager.prototype.init = function(iis) {
        this.iss = iis;
      };
      StorageManager.prototype.setUser = function(id) {
        this.id = id;
      };
      StorageManager.prototype.set = function(key, value) {
        var keywords = this.getKey(key);
        if (null == key) {
          console.error("\u5b58\u50a8\u7684key\u4e0d\u80fd\u4e3a\u7a7a");
          return;
        }
        this.encrypted && (keywords = this.iss.encryptKey(keywords));
        if (null == value) {
          console.warn("\u5b58\u50a8\u7684\u503c\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u79fb\u9664\u8be5\u5b58\u50a8");
          this.remove(key);
          return;
        }
        if ("function" === typeof value) {
          console.error("\u50a8\u5b58\u7684\u503c\u4e0d\u80fd\u4e3a\u65b9\u6cd5");
          return;
        }
        if ("object" === typeof value) try {
          value = JSON.stringify(value);
        } catch (e) {
          console.error("\u89e3\u6790\u5931\u8d25\uff0cstr = " + value);
          return;
        } else "number" === typeof value ? value += "" : "boolean" === typeof value && (value = String(value));
        this.encrypted && (value = this.iss.encrypt(value));
        cc.sys.localStorage.setItem(keywords, value);
      };
      StorageManager.prototype.get = function(key, defaultValue) {
        void 0 === defaultValue && (defaultValue = "");
        if (null == key) {
          console.error("\u5b58\u50a8\u7684key\u4e0d\u80fd\u4e3a\u7a7a");
          return null;
        }
        key = this.getKey(key);
        this.encrypted && (key = this.iss.encryptKey(key));
        var str = cc.sys.localStorage.getItem(key);
        null != str && "" !== str && this.encrypted && (str = this.iss.decrypt(str));
        if (null === str) return defaultValue;
        return str;
      };
      StorageManager.prototype.getNumber = function(key, defaultValue) {
        void 0 === defaultValue && (defaultValue = 0);
        var r = this.get(key);
        if ("0" == r) return Number(r);
        return Number(r) || defaultValue;
      };
      StorageManager.prototype.getBoolean = function(key) {
        var r = this.get(key);
        return "true" === r.toLowerCase();
      };
      StorageManager.prototype.getJson = function(key, defaultValue) {
        var r = this.get(key);
        return r && JSON.parse(r) || defaultValue;
      };
      StorageManager.prototype.remove = function(key) {
        if (null == key) {
          console.error("\u5b58\u50a8\u7684key\u4e0d\u80fd\u4e3a\u7a7a");
          return;
        }
        var keywords = this.getKey(key);
        this.encrypted && (keywords = this.iss.encryptKey(keywords));
        cc.sys.localStorage.removeItem(keywords);
      };
      StorageManager.prototype.clear = function() {
        cc.sys.localStorage.clear();
      };
      StorageManager.prototype.getKey = function(key) {
        if (null == this.id || "" == this.id) return key;
        return this.id + "_" + key;
      };
      return StorageManager;
    }();
    exports.StorageManager = StorageManager;
    cc._RF.pop();
  }, {} ],
  StorageSecurityCrypto: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "fbbbdioMCNOmI7KMEU46FfN", "StorageSecurityCrypto");
    cc._RF.pop();
  }, {} ],
  StorageSecuritySimple: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "386e3+fu+RJB5VSgow0kwS4", "StorageSecuritySimple");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StorageSecuritySimple = void 0;
    var StorageSecuritySimple = function() {
      function StorageSecuritySimple() {
        this.secretkey = null;
        var key = Global.config.localDataKey;
        var iv = Global.config.localDataIv;
        this.secretkey = key + iv;
      }
      StorageSecuritySimple.prototype.encrypt = function(str) {
        var er = "";
        for (var i = 0; i < str.length; i++) er += String.fromCharCode(str.charCodeAt(i) ^ this.secretkey.charCodeAt(i % this.secretkey.length));
        return er;
      };
      StorageSecuritySimple.prototype.decrypt = function(str) {
        var dr = "";
        for (var i = 0; i < str.length; i++) dr += String.fromCharCode(str.charCodeAt(i) ^ this.secretkey.charCodeAt(i % this.secretkey.length));
        return dr;
      };
      StorageSecuritySimple.prototype.encryptKey = function(str) {
        return this.encrypt(str);
      };
      return StorageSecuritySimple;
    }();
    exports.StorageSecuritySimple = StorageSecuritySimple;
    cc._RF.pop();
  }, {} ],
  TalentCard: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6f1abyFa71D95wn5pLLTOEQ", "TalentCard");
    "use strict";
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        bg: cc.Node,
        bg_max: cc.Node,
        lvLabel: cc.Node,
        valueLabel: cc.Node,
        icon: cc.Sprite,
        iconSpriteFrameList: [ cc.SpriteFrame ],
        typeLabel: cc.Node,
        coinLabel: cc.Node,
        coinNode: cc.Node,
        maxNode: cc.Node,
        effect: sp.Skeleton
      },
      start: function start() {
        this.effect.node.active = false;
      },
      showEffect: function showEffect() {
        var _this = this;
        this.effect.node.active = true;
        this.effect.setAnimation(0, "Approve_Sg", false);
        this.effect.setCompleteListener(function() {
          _this.effect.node.active = false;
        });
      },
      hideEffect: function hideEffect() {
        this.effect.node.active = false;
      },
      setContent: function setContent(_type, _lv, _value, _coin, _maxLv, _talentParent) {
        this.typeIndex = _type;
        this.talentParent = _talentParent;
        this.maxLv = _maxLv + 1;
        switch (_type) {
         case EnumType.TALENT_TYPE.ATTACK:
          this.icon.spriteFrame = this.iconSpriteFrameList[0];
          this.typeLabel.getComponent("LabelUpdater").setContent("property_strength");
          break;

         case EnumType.TALENT_TYPE.HP:
          this.icon.spriteFrame = this.iconSpriteFrameList[1];
          this.typeLabel.getComponent("LabelUpdater").setContent("property_basic_hp");
          break;

         case EnumType.TALENT_TYPE.ARMOR:
          this.icon.spriteFrame = this.iconSpriteFrameList[2];
          this.typeLabel.getComponent("LabelUpdater").setContent("property_armor");
        }
        this.valueLabel.getComponent("LabelUpdater").setString("+" + Global.utils.formatNumberWithUnit(_value));
        this.coinLabel.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(_coin));
        this.updateLevel(_lv, _maxLv);
        this.cost = _coin;
      },
      updateLevel: function updateLevel(_lv) {
        this.lv = _lv;
        this.lvLabel.getComponent("LabelUpdater").setString(this.lv >= this.maxLv ? Global.languageManager.t("level_max") : Global.languageManager.t("level") + " " + this.lv);
        this.coinNode.active = !(this.lv >= this.maxLv);
        this.maxNode.active = this.lv >= this.maxLv;
        this.bg.active = !(this.lv >= this.maxLv);
        this.bg_max.active = this.lv >= this.maxLv;
      },
      onClickLevelUp: function onClickLevelUp() {
        var _this2 = this;
        if (this.lv >= this.maxLv) return;
        if (Global.roleData.coin < this.cost) return;
        Global.roleData.updateCoin(-1 * this.cost);
        Global.talentManager.levelUp(this.typeIndex, this.talentParent.roleData, function(_talentData) {
          _this2.talentParent.updateUI();
          _this2.talentParent.afterLevelUp(_talentData);
        });
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType"
  } ],
  TalentConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "af48eGf1p1PGqv4mvdltf23", "TalentConfig");
    "use strict";
    var TalentConfig = cc.Class({
      name: "TalentConfig",
      statics: {
        data: [ {
          level: "1-30",
          hp: "1200",
          attack: "30",
          armor: "10",
          cost: "7200",
          clerk: "1001",
          skill: "0|0|0&4001&20"
        }, {
          level: "31-60",
          hp: "1200",
          attack: "30",
          armor: "10",
          cost: "14400",
          clerk: "1002",
          skill: "1|stamina_max|2&4005&50"
        }, {
          level: "61-90",
          hp: "2400",
          attack: "60",
          armor: "20",
          cost: "24000",
          clerk: "1003",
          skill: "2|income|5&4007&80"
        }, {
          level: "91-120",
          hp: "2400",
          attack: "60",
          armor: "20",
          cost: "75000",
          clerk: "1004",
          skill: "1|skill_reroll_count|1&4002&110"
        }, {
          level: "121-150",
          hp: "3600",
          attack: "90",
          armor: "30",
          cost: "81000",
          clerk: "1005",
          skill: "1|raid_trash_coin|25&4003&140"
        }, {
          level: "151-180",
          hp: "3600",
          attack: "90",
          armor: "30",
          cost: "87000",
          clerk: "1006",
          skill: "1|raid_boss_coin|25&4004&170"
        }, {
          level: "181-210",
          hp: "4800",
          attack: "120",
          armor: "40",
          cost: "96000",
          clerk: "1007",
          skill: "2|income|5&4007&200"
        }, {
          level: "211-240",
          hp: "3600",
          attack: "90",
          armor: "30",
          cost: "111000",
          clerk: "1008",
          skill: "1|shop_restock_count|1&4008&230"
        }, {
          level: "241-270",
          hp: "3600",
          attack: "90",
          armor: "30",
          cost: "129000",
          clerk: "1009",
          skill: "1|raid_trash_coin|25&4003&260"
        }, {
          level: "271-300",
          hp: "3600",
          attack: "90",
          armor: "30",
          cost: "180000",
          clerk: "1010",
          skill: "1|raid_boss_coin|25&4004&290"
        }, {
          level: "301-330",
          hp: "4800",
          attack: "120",
          armor: "40",
          cost: "204000",
          clerk: "1011",
          skill: "1|stamina_max|2&4005&320"
        }, {
          level: "331-360",
          hp: "4800",
          attack: "120",
          armor: "40",
          cost: "228000",
          clerk: "1012",
          skill: "1|raid_trash_coin|25&4003&350"
        }, {
          level: "361-390",
          hp: "4800",
          attack: "120",
          armor: "40",
          cost: "255000",
          clerk: "1013",
          skill: "1|stamina_recovery|5&4006&380"
        }, {
          level: "391-420",
          hp: "4800",
          attack: "120",
          armor: "40",
          cost: "285000",
          clerk: "1014",
          skill: "1|shop_restock_count|1&4008&410"
        }, {
          level: "421-450",
          hp: "6000",
          attack: "150",
          armor: "50",
          cost: "318000",
          clerk: "1015",
          skill: "1|stamina_max|2&4005&440"
        }, {
          level: "451-480",
          hp: "6000",
          attack: "150",
          armor: "50",
          cost: "357000",
          clerk: "1016",
          skill: "1|raid_boss_coin|25&4004&470"
        }, {
          level: "481-510",
          hp: "8400",
          attack: "210",
          armor: "70",
          cost: "504000",
          clerk: "1017",
          skill: "1|stamina_max|2&4005&500"
        }, {
          level: "511-540",
          hp: "9600",
          attack: "240",
          armor: "80",
          cost: "576000",
          clerk: "1018",
          skill: "1|stamina_max|2&4005&530"
        }, {
          level: "541-570",
          hp: "9600",
          attack: "240",
          armor: "80",
          cost: "609000",
          clerk: "1019",
          skill: "1|raid_trash_coin|25&4003&560"
        }, {
          level: "571-600",
          hp: "12000",
          attack: "300",
          armor: "100",
          cost: "651000",
          clerk: "1020",
          skill: "1|raid_boss_coin|25&4004&590"
        }, {
          level: "601-630",
          hp: "13200",
          attack: "330",
          armor: "110",
          cost: "687000",
          clerk: "1021",
          skill: "1|stamina_max|2&4005&620"
        }, {
          level: "631-660",
          hp: "13200",
          attack: "330",
          armor: "110",
          cost: "732000",
          clerk: "1022",
          skill: "1|raid_trash_coin|25&4003&650"
        }, {
          level: "661-690",
          hp: "14400",
          attack: "360",
          armor: "120",
          cost: "786000",
          clerk: "1023",
          skill: "1|raid_boss_coin|25&4004&680"
        }, {
          level: "691-720",
          hp: "10800",
          attack: "270",
          armor: "90",
          cost: "840000",
          clerk: "1024",
          skill: "1|stamina_max|2&4005&710"
        }, {
          level: "721-750",
          hp: "12000",
          attack: "300",
          armor: "100",
          cost: "903000",
          clerk: "1025",
          skill: "1|skill_reroll_count|1&4002&740"
        }, {
          level: "751-780",
          hp: "15600",
          attack: "390",
          armor: "130",
          cost: "966000",
          clerk: "1026",
          skill: "1|stamina_max|2&4005&770"
        }, {
          level: "781-810",
          hp: "16800",
          attack: "420",
          armor: "140",
          cost: "1026000",
          clerk: "1027",
          skill: "1|stamina_recovery|5&4006&800"
        }, {
          level: "811-840",
          hp: "16800",
          attack: "420",
          armor: "140",
          cost: "1086000",
          clerk: "1028",
          skill: "1|stamina_max|2&4005&830"
        }, {
          level: "841-870",
          hp: "18000",
          attack: "450",
          armor: "150",
          cost: "1146000",
          clerk: "1029",
          skill: "1|raid_trash_coin|25&4003&860"
        }, {
          level: "871-900",
          hp: "14400",
          attack: "360",
          armor: "120",
          cost: "1206000",
          clerk: "1030",
          skill: "1|raid_boss_coin|25&4004&890"
        }, {
          level: "901-930",
          hp: "14400",
          attack: "360",
          armor: "120",
          cost: "1266000",
          clerk: "1031",
          skill: "1|stamina_max|2&4005&920"
        }, {
          level: "931-960",
          hp: "21600",
          attack: "540",
          armor: "180",
          cost: "2092500",
          clerk: "1032",
          skill: "1|raid_trash_coin|25&4003&950"
        }, {
          level: "961-1005",
          hp: "21600",
          attack: "540",
          armor: "180",
          cost: "2115000",
          clerk: "1033",
          skill: "1|raid_boss_coin|25&4004&980"
        }, {
          level: "1006-1050",
          hp: "21600",
          attack: "540",
          armor: "180",
          cost: "2205000",
          clerk: "1034",
          skill: "1|stamina_max|2&4005&1020"
        }, {
          level: "1051-1095",
          hp: "21600",
          attack: "540",
          armor: "180",
          cost: "2322000",
          clerk: "1035",
          skill: "1|skill_reroll_count|1&4002&1065"
        }, {
          level: "1096-1140",
          hp: "23400",
          attack: "585",
          armor: "195",
          cost: "2452500",
          clerk: "1036",
          skill: "1|raid_trash_coin|25&4003&1110"
        }, {
          level: "1141-1185",
          hp: "25200",
          attack: "630",
          armor: "210",
          cost: "2587500",
          clerk: "1037",
          skill: "1|raid_boss_coin|25&4004&1155"
        }, {
          level: "1186-1230",
          hp: "25200",
          attack: "630",
          armor: "210",
          cost: "2731500",
          clerk: "1038",
          skill: "1|stamina_max|2&4005&1200"
        }, {
          level: "1231-1275",
          hp: "25200",
          attack: "630",
          armor: "210",
          cost: "2893500",
          clerk: "1039",
          skill: "1|raid_trash_coin|25&4003&1245"
        }, {
          level: "1276-1320",
          hp: "27000",
          attack: "675",
          armor: "225",
          cost: "3060000",
          clerk: "1040",
          skill: "1|raid_boss_coin|25&4004&1290"
        }, {
          level: "1321-1365",
          hp: "27000",
          attack: "675",
          armor: "225",
          cost: "3235500",
          clerk: "1041",
          skill: "1|stamina_recovery|5&4006&1335"
        }, {
          level: "1366-1410",
          hp: "28800",
          attack: "720",
          armor: "240",
          cost: "3429000",
          clerk: "1042",
          skill: "1|stamina_max|2&4005&1380"
        }, {
          level: "1411-1455",
          hp: "28800",
          attack: "720",
          armor: "240",
          cost: "3631500",
          clerk: "1043",
          skill: "1|raid_trash_coin|25&4003&1425"
        }, {
          level: "1456-1500",
          hp: "30600",
          attack: "765",
          armor: "255",
          cost: "3820500",
          clerk: "1044",
          skill: "1|raid_boss_coin|25&4004&1470"
        }, {
          level: "1501-1545",
          hp: "30600",
          attack: "765",
          armor: "255",
          cost: "4027500",
          clerk: "1045",
          skill: "1|raid_trash_coin|25&4003&1515"
        }, {
          level: "1546-1590",
          hp: "32400",
          attack: "810",
          armor: "270",
          cost: "5000000",
          clerk: "1046",
          skill: "1|raid_boss_coin|25&4004&1560"
        }, {
          level: "1591-1635",
          hp: "32400",
          attack: "810",
          armor: "270",
          cost: "5000000",
          clerk: "1047",
          skill: "1|raid_trash_coin|25&4003&1605"
        }, {
          level: "1636-1680",
          hp: "34200",
          attack: "855",
          armor: "285",
          cost: "5000000",
          clerk: "1048",
          skill: "1|stamina_max|2&4005&1650"
        }, {
          level: "1681-1725",
          hp: "34200",
          attack: "855",
          armor: "285",
          cost: "5000000",
          clerk: "1049",
          skill: "1|raid_boss_coin|25&4004&1695"
        }, {
          level: "1726-1770",
          hp: "36000",
          attack: "900",
          armor: "300",
          cost: "5000000",
          clerk: "1050",
          skill: "1|stamina_recovery|5&4006&1740"
        }, {
          level: "1771-1815",
          hp: "36000",
          attack: "900",
          armor: "300",
          cost: "5000000",
          clerk: "1051",
          skill: "1|stamina_max|2&4005&1785"
        }, {
          level: "1816-1860",
          hp: "37800",
          attack: "945",
          armor: "315",
          cost: "5000000",
          clerk: "1052",
          skill: "1|raid_trash_coin|25&4003&1830"
        }, {
          level: "1861-1905",
          hp: "37800",
          attack: "945",
          armor: "315",
          cost: "5000000",
          clerk: "1053",
          skill: "1|raid_boss_coin|25&4004&1875"
        }, {
          level: "1906-1950",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1054",
          skill: "1|raid_trash_coin|25&4003&1920"
        }, {
          level: "1951-1995",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1055",
          skill: "1|raid_boss_coin|25&4004&1965"
        }, {
          level: "1996-2040",
          hp: "41400",
          attack: "1035",
          armor: "345",
          cost: "5000000",
          clerk: "1056",
          skill: "1|stamina_max|2&4005&2010"
        }, {
          level: "2041-2085",
          hp: "41400",
          attack: "1035",
          armor: "345",
          cost: "5000000",
          clerk: "1057",
          skill: "1|stamina_max|2&4005&2055"
        }, {
          level: "2086-2130",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1058",
          skill: "1|stamina_max|2&4005&2100"
        }, {
          level: "2131-2175",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1059",
          skill: "1|raid_trash_coin|25&4003&2145"
        }, {
          level: "2176-2220",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1060",
          skill: "1|raid_boss_coin|25&4004&2190"
        }, {
          level: "2221-2265",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1061",
          skill: "1|stamina_recovery|5&4006&2235"
        }, {
          level: "2266-2310",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1062",
          skill: "1|raid_trash_coin|25&4003&2280"
        }, {
          level: "2311-2355",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1063",
          skill: "1|raid_boss_coin|25&4004&2325"
        }, {
          level: "2356-2400",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1064",
          skill: "1|stamina_max|2&4005&2370"
        }, {
          level: "2401-2445",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1065",
          skill: "1|stamina_max|2&4005&2415"
        }, {
          level: "2446-2490",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1066",
          skill: "1|stamina_max|2&4005&2460"
        }, {
          level: "2491-2535",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1067",
          skill: "1|raid_trash_coin|25&4003&2505"
        }, {
          level: "2536-2580",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1068",
          skill: "1|raid_boss_coin|25&4004&2550"
        }, {
          level: "2581-2625",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1069",
          skill: "1|stamina_recovery|5&4006&2595"
        }, {
          level: "2626-2670",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1070",
          skill: "1|raid_trash_coin|25&4003&2640"
        }, {
          level: "2671-2715",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1071",
          skill: "1|raid_boss_coin|25&4004&2685"
        }, {
          level: "2716-2760",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1072",
          skill: "1|stamina_max|2&4005&2730"
        }, {
          level: "2761-2805",
          hp: "39600",
          attack: "990",
          armor: "330",
          cost: "5000000",
          clerk: "1073",
          skill: "1|stamina_max|2&4005&2775"
        } ]
      }
    });
    module.exports = TalentConfig;
    cc._RF.pop();
  }, {} ],
  TalentManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d2279Mf0btENpDgl6oiYCnq", "TalentManager");
    "use strict";
    var talent_config = require("TalentConfig");
    var talent_title_config = require("TalentTitleConfig");
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    var TalentManager = cc.Class({
      extends: cc.Component,
      properties: {},
      ctor: function ctor() {
        this.initClerk();
        this.talentConfig = [];
        for (var i = 0; i < talent_config.data.length; i++) {
          var config = talent_config.data[i];
          var levelRangeArr = config.level.split("-");
          var startLevel = parseInt(levelRangeArr[0]);
          var endLevel = parseInt(levelRangeArr[1]);
          var coinLevel = startLevel - 1 + (endLevel - startLevel + 1) / 3;
          var coin = Math.round(parseInt(config.cost) / (endLevel - startLevel + 1) * 2.5);
          var skillArr = config.skill.split("&");
          var skillLevel = parseInt(skillArr[2]);
          var skill_i18n = skillArr[1];
          var skillContentArr = skillArr[0].split("|");
          var skillObj = {};
          skillObj.propertyType = skillContentArr[0];
          skillObj.property = skillContentArr[1];
          skillObj.propertyValue = skillContentArr[2];
          skillObj.i18n = skill_i18n;
          for (var j = startLevel; j <= endLevel; j++) {
            var talent = {};
            talent.level = j;
            talent.hp = parseInt(config.hp) / ((endLevel - startLevel + 1) / 3);
            talent.attack = parseInt(config.attack) / ((endLevel - startLevel + 1) / 3);
            talent.armor = parseInt(config.armor) / ((endLevel - startLevel + 1) / 3);
            talent.cost = parseInt(config.cost) / (endLevel - startLevel + 1);
            talent.maxLevel = coinLevel - (startLevel - 1);
            talent.internalCount = (endLevel - startLevel + 1) / 3;
            talent.skill = j == skillLevel ? skillObj : null;
            talent.coin = j == coinLevel ? coin : null;
            talent.clerk = j == endLevel ? this.talentTitleConfig[config.clerk] : null;
            this.talentConfig[j] = talent;
          }
        }
      },
      initClerk: function initClerk() {
        this.talentTitleConfig = {};
        for (var i = 0; i < talent_title_config.data.length; i++) {
          var config = talent_title_config.data[i];
          this.talentTitleConfig[config.id] = config;
        }
      },
      getTalentData: function getTalentData(_index) {
        return this.talentConfig[_index];
      },
      getNextTalent: function getNextTalent(_level) {
        return this.talentConfig[_level];
      },
      levelUp: function levelUp(_index, _roleData, _callback) {
        var nextTalent = this.getNextTalent(_roleData.talentLevel + 1);
        if (_roleData.coin < nextTalent.cost) return;
        _roleData.talentLevel++;
        _roleData.talentIndexList.push(_index);
        _roleData.updateStaticData();
        _callback && _callback(nextTalent);
        var storageData = _roleData.getTalentStorageData();
        Global.storage.set(gameConfig.COMMON_KEYS.TALENT_DATA, storageData);
        Global.taskManager.updateProgress(EnumType.TASK_TYPE.LEVEL_UP_TALENT, 1);
      },
      updateTalent: function updateTalent(_roleData) {
        for (var i = 0; i < _roleData.talentIndexList.length; i++) {
          var talentData = Global.talentManager.getTalentData(i + 1);
          null != talentData.skill && talentData.skill.propertyType == EnumType.TALENT_PROPERTY_TYPE.WORLD && (_roleData[talentData.skill.property] += parseInt(talentData.skill.propertyValue));
        }
      }
    });
    module.exports = TalentManager;
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    TalentConfig: "TalentConfig",
    TalentTitleConfig: "TalentTitleConfig"
  } ],
  TalentPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d18113tnmZOOaN8j5F2RMv4", "TalentPanel");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        levelLabel: cc.Node,
        cardSkeleton: sp.Skeleton,
        levelNameLabel: cc.Node,
        roleNode: cc.Node,
        progressBar: cc.Node,
        cards: [ cc.Node ],
        midLevelLabel: cc.Node,
        endLevelLabel: cc.Node,
        midRewardItem: cc.Node,
        endRewardItem: cc.Node
      },
      onAdded: function onAdded(_args) {
        var _this = this;
        this.roleData = _args.roleData;
        this.levelColor_1 = new cc.color(255, 255, 255);
        this.levelColor_2 = new cc.color(255, 232, 128);
        var roleView = this.roleNode.getComponent("RoleView");
        roleView.updateData(this, this.roleData);
        roleView.hideBar();
        this.updateUI(true);
        this.schedule(function() {
          _this.showEffect();
        }, 5);
      },
      showEffect: function showEffect() {
        var resultList = [];
        for (var i = 0; i < this.cards.length; i++) {
          var card = this.cards[i];
          var cardCom = card.getComponent("TalentCard");
          false == cardCom.bg_max.active && resultList.push(cardCom);
        }
        var randomIndex = Math.round(Math.random(resultList.length - 1));
        resultList[randomIndex].showEffect();
      },
      updateUI: function updateUI(_isInit) {
        this.updateTitle();
        this.updateProgress();
        this.updateCards();
        _isInit && this.setRewards();
        this.updateRewards();
        this.levelLabel.getComponent("LabelUpdater").setString(this.roleData.talentIndexList.length);
      },
      updateCards: function updateCards() {
        var range = this.getStageRange();
        var startIndex = range[0];
        var hpCard = this.cards[0].getComponent("TalentCard");
        var strCard = this.cards[1].getComponent("TalentCard");
        var defCard = this.cards[2].getComponent("TalentCard");
        var startTalentData = Global.talentManager.getTalentData(startIndex);
        var hpLevel = 0;
        var strLevel = 0;
        var defLevel = 0;
        for (var i = startIndex - 1; i < this.roleData.talentIndexList.length; i++) {
          var talentIndex = this.roleData.talentIndexList[i];
          switch (talentIndex) {
           case EnumType.TALENT_TYPE.HP:
            hpLevel++;
            break;

           case EnumType.TALENT_TYPE.ATTACK:
            strLevel++;
            break;

           case EnumType.TALENT_TYPE.ARMOR:
            defLevel++;
          }
        }
        hpCard.setContent(EnumType.TALENT_TYPE.HP, 0, startTalentData.hp * hpLevel, startTalentData.cost, startTalentData.maxLevel - 1, this);
        strCard.setContent(EnumType.TALENT_TYPE.ATTACK, 0, startTalentData.attack * strLevel, startTalentData.cost, startTalentData.maxLevel - 1, this);
        defCard.setContent(EnumType.TALENT_TYPE.ARMOR, 0, startTalentData.armor * defLevel, startTalentData.cost, startTalentData.maxLevel - 1, this);
        hpCard.updateLevel(hpLevel);
        strCard.updateLevel(strLevel);
        defCard.updateLevel(defLevel);
      },
      updateProgress: function updateProgress() {
        var currentLevel = this.roleData.talentIndexList.length;
        var range = this.getStageRange();
        var internalCount = range[2];
        var rate = currentLevel % (2 * internalCount) / (2 * internalCount);
        rate = currentLevel % (2 * internalCount) == 0 ? 1 : rate;
        rate = 0 == currentLevel ? 0 : rate;
        var addWidth = 730 * rate;
        cc.tween(this.progressBar).to(.2, {
          width: 100 + addWidth
        }).start();
        currentLevel % (2 * internalCount) == 1 && this.setRewards();
      },
      updateTitle: function updateTitle() {
        this.levelNameLabel.getComponent("LabelUpdater").setContent("talent_title_1000");
        var currentLevel = this.roleData.talentIndexList.length;
        var talentData = Global.talentManager.getTalentData(currentLevel);
        if (talentData) if (null != talentData.clerk) this.levelNameLabel.getComponent("LabelUpdater").setContent("talent_title_" + talentData.clerk.id); else {
          var range = this.getStageRange();
          var startIndex = range[0];
          var lastTalentData = Global.talentManager.getTalentData(startIndex - 1);
          lastTalentData && null != lastTalentData.clerk && this.levelNameLabel.getComponent("LabelUpdater").setContent("talent_title_" + lastTalentData.clerk.id);
        }
      },
      getStageRange: function getStageRange() {
        var startIndex = null;
        var endIndex = null;
        var currentLevel = this.roleData.talentIndexList.length;
        var talentData = Global.talentManager.getTalentData(currentLevel);
        if (null == talentData) {
          startIndex = 1;
          endIndex = 30;
        } else if (null != talentData.clerk) {
          startIndex = currentLevel + 1;
          for (var i = startIndex; i < Global.talentManager.talentConfig.length; i++) {
            var _talentData2 = Global.talentManager.getTalentData(i);
            if (_talentData2 && null != _talentData2.clerk) {
              endIndex = i;
              break;
            }
          }
          null == endIndex && (endIndex = gameConfig.TALENT_MAX_LEVEL);
        } else {
          for (var j = currentLevel; j >= 0; j--) {
            var _talentData3 = Global.talentManager.getTalentData(j);
            if (null == _talentData3) {
              startIndex = 1;
              break;
            }
            if (null != _talentData3.clerk) {
              startIndex = j + 1;
              break;
            }
          }
          for (var _i = currentLevel; _i < Global.talentManager.talentConfig.length; _i++) {
            var _talentData4 = Global.talentManager.getTalentData(_i);
            if (_talentData4 && null != _talentData4.clerk) {
              endIndex = _i;
              break;
            }
          }
          null == endIndex && (endIndex = gameConfig.TALENT_MAX_LEVEL);
        }
        var internalCount = (endIndex - startIndex + 1) / 3;
        return [ startIndex, endIndex, internalCount ];
      },
      updateRewards: function updateRewards() {
        this.midRewardItem.getComponent("TalentRewardItem").updateData();
        this.endRewardItem.getComponent("TalentRewardItem").updateData();
      },
      setRewards: function setRewards() {
        var currentLevel = this.roleData.talentIndexList.length;
        var range = this.getStageRange();
        var internalCount = range[2];
        var overHalf = currentLevel % (2 * internalCount) > internalCount;
        var reward_1 = null;
        var reward_2 = null;
        var talentData;
        if (true != overHalf) for (var i = currentLevel; i <= Global.talentManager.talentConfig.length; i++) {
          talentData = Global.talentManager.getTalentData(i);
          if (talentData && (null != talentData.clerk || null != talentData.skill || null != talentData.coin) && null == reward_1) {
            reward_1 = talentData;
            this.midLevelLabel.getComponent("LabelUpdater").setString(null != talentData.clerk ? Global.languageManager.t("talent_title_" + talentData.clerk.id) : i);
            this.midLevelLabel.getComponent("LabelUpdater").setColor(null != talentData.clerk ? this.levelColor_2 : this.levelColor_1);
            this.midRewardItem.getComponent("TalentRewardItem").setData(reward_1, this.roleData);
            continue;
          }
          if (talentData && (null != talentData.clerk || null != talentData.skill || null != talentData.coin) && null != reward_1) {
            reward_2 = talentData;
            this.endLevelLabel.getComponent("LabelUpdater").setString(null != talentData.clerk ? Global.languageManager.t("talent_title_" + talentData.clerk.id) : i);
            this.endLevelLabel.getComponent("LabelUpdater").setColor(null != talentData.clerk ? this.levelColor_2 : this.levelColor_1);
            this.endRewardItem.getComponent("TalentRewardItem").setData(reward_2, this.roleData);
            break;
          }
        } else {
          for (var _i2 = currentLevel; _i2 <= Global.talentManager.talentConfig.length; _i2++) {
            talentData = Global.talentManager.getTalentData(_i2);
            if (talentData && (null != talentData.clerk || null != talentData.skill || null != talentData.coin)) {
              reward_2 = talentData;
              this.endLevelLabel.getComponent("LabelUpdater").setString(null != talentData.clerk ? Global.languageManager.t("talent_title_" + talentData.clerk.id) : _i2);
              this.endLevelLabel.getComponent("LabelUpdater").setColor(null != talentData.clerk ? this.levelColor_2 : this.levelColor_1);
              this.endRewardItem.getComponent("TalentRewardItem").setData(reward_2, this.roleData);
              break;
            }
          }
          for (var j = currentLevel; j > 0; j--) {
            talentData = Global.talentManager.getTalentData(j);
            if (talentData && (null != talentData.clerk || null != talentData.skill || null != talentData.coin)) {
              reward_1 = talentData;
              this.midLevelLabel.getComponent("LabelUpdater").setString(null != talentData.clerk ? Global.languageManager.t("talent_title_" + talentData.clerk.id) : j);
              this.midLevelLabel.getComponent("LabelUpdater").setColor(null != talentData.clerk ? this.levelColor_2 : this.levelColor_1);
              this.midRewardItem.getComponent("TalentRewardItem").setData(reward_1, this.roleData);
              break;
            }
          }
        }
      },
      afterLevelUp: function afterLevelUp(_talentData) {
        var args = {};
        args.roleData = this.roleData;
        var show = false;
        if (null != _talentData.coin) {
          args.coinValue = _talentData.coin;
          args.rewardType = EnumType.REWARD_TYPE.COIN;
          show = true;
        } else if (null != _talentData.skill) {
          args.talentData = _talentData;
          args.rewardType = EnumType.REWARD_TYPE.SKILL;
          show = true;
        } else if (null != _talentData.clerk) {
          args.talentData = _talentData;
          args.rewardType = EnumType.REWARD_TYPE.CLERK;
          show = true;
        }
        show && Global.gui.open(gameConfig.UIID.RewardsPanel, args);
      },
      onEnable: function onEnable() {
        this.cardSkeleton.setAnimation(0, "Talent", false);
      },
      onBeforeRemove: function onBeforeRemove(args) {}
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  TalentRewardItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b9344/h6N5JPo7XRp2hL2t7", "TalentRewardItem");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        checkedNode: cc.Node,
        checkedBgNode: cc.Node,
        icon: cc.Sprite,
        iconSpriteFrameList: [ cc.SpriteFrame ]
      },
      start: function start() {},
      setData: function setData(_talentData, _roleData) {
        var _this = this;
        this.talentData = _talentData;
        this.roleData = _roleData;
        if (null != _talentData.clerk) this.icon.spriteFrame = this.iconSpriteFrameList[1]; else if (null != _talentData.skill) {
          var pathIcon = "icons/skillIcons/skill_" + _talentData.skill.i18n;
          Global.res.load(pathIcon, cc.SpriteFrame, function(error, res) {
            res && (_this.icon.spriteFrame = res);
          });
        } else this.icon.spriteFrame = this.iconSpriteFrameList[0];
        this.checkedNode.active = _roleData.talentIndexList.length >= _talentData.level;
        this.checkedBgNode.active = _roleData.talentIndexList.length >= _talentData.level;
      },
      updateData: function updateData() {
        this.checkedNode.active = this.roleData.talentIndexList.length >= this.talentData.level;
        this.checkedBgNode.active = this.roleData.talentIndexList.length >= this.talentData.level;
      }
    });
    cc._RF.pop();
  }, {} ],
  TalentTitleConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "26f72gnlolO+aQTsEznsYYb", "TalentTitleConfig");
    "use strict";
    var TalentTitleConfig = cc.Class({
      name: "TalentTitleConfig",
      statics: {
        data: [ {
          id: "1001",
          hp: "120",
          attack: "3",
          armor: "1"
        }, {
          id: "1002",
          hp: "120",
          attack: "3",
          armor: "1"
        }, {
          id: "1003",
          hp: "240",
          attack: "6",
          armor: "2"
        }, {
          id: "1004",
          hp: "240",
          attack: "6",
          armor: "2"
        }, {
          id: "1005",
          hp: "480",
          attack: "12",
          armor: "4"
        }, {
          id: "1006",
          hp: "720",
          attack: "18",
          armor: "6"
        }, {
          id: "1007",
          hp: "1200",
          attack: "30",
          armor: "10"
        }, {
          id: "1008",
          hp: "9600",
          attack: "240",
          armor: "80"
        }, {
          id: "1009",
          hp: "3600",
          attack: "90",
          armor: "30"
        }, {
          id: "1010",
          hp: "4800",
          attack: "120",
          armor: "40"
        }, {
          id: "1011",
          hp: "6000",
          attack: "150",
          armor: "50"
        }, {
          id: "1012",
          hp: "7200",
          attack: "180",
          armor: "60"
        }, {
          id: "1013",
          hp: "7200",
          attack: "180",
          armor: "60"
        }, {
          id: "1014",
          hp: "7200",
          attack: "180",
          armor: "60"
        }, {
          id: "1015",
          hp: "8400",
          attack: "210",
          armor: "70"
        }, {
          id: "1016",
          hp: "10800",
          attack: "270",
          armor: "90"
        }, {
          id: "1017",
          hp: "75000",
          attack: "1875",
          armor: "625"
        }, {
          id: "1018",
          hp: "15000",
          attack: "375",
          armor: "125"
        }, {
          id: "1019",
          hp: "15600",
          attack: "390",
          armor: "130"
        }, {
          id: "1020",
          hp: "18000",
          attack: "450",
          armor: "150"
        }, {
          id: "1021",
          hp: "19200",
          attack: "480",
          armor: "160"
        }, {
          id: "1022",
          hp: "21600",
          attack: "540",
          armor: "180"
        }, {
          id: "1023",
          hp: "21600",
          attack: "540",
          armor: "180"
        }, {
          id: "1024",
          hp: "27000",
          attack: "675",
          armor: "225"
        }, {
          id: "1025",
          hp: "24000",
          attack: "600",
          armor: "200"
        }, {
          id: "1026",
          hp: "26400",
          attack: "660",
          armor: "220"
        }, {
          id: "1027",
          hp: "28800",
          attack: "720",
          armor: "240"
        }, {
          id: "1028",
          hp: "31200",
          attack: "780",
          armor: "260"
        }, {
          id: "1029",
          hp: "33600",
          attack: "840",
          armor: "280"
        }, {
          id: "1030",
          hp: "45600",
          attack: "1140",
          armor: "380"
        }, {
          id: "1031",
          hp: "45600",
          attack: "1140",
          armor: "380"
        }, {
          id: "1032",
          hp: "28800",
          attack: "720",
          armor: "240"
        }, {
          id: "1033",
          hp: "54000",
          attack: "1350",
          armor: "450"
        }, {
          id: "1034",
          hp: "61440",
          attack: "1536",
          armor: "512"
        }, {
          id: "1035",
          hp: "61200",
          attack: "1530",
          armor: "510"
        }, {
          id: "1036",
          hp: "64800",
          attack: "1620",
          armor: "540"
        }, {
          id: "1037",
          hp: "69600",
          attack: "1740",
          armor: "580"
        }, {
          id: "1038",
          hp: "75000",
          attack: "1875",
          armor: "625"
        }, {
          id: "1039",
          hp: "79200",
          attack: "1980",
          armor: "660"
        }, {
          id: "1040",
          hp: "84000",
          attack: "2100",
          armor: "700"
        }, {
          id: "1041",
          hp: "90000",
          attack: "2250",
          armor: "750"
        }, {
          id: "1042",
          hp: "96000",
          attack: "2400",
          armor: "800"
        }, {
          id: "1043",
          hp: "102000",
          attack: "2550",
          armor: "850"
        }, {
          id: "1044",
          hp: "96000",
          attack: "2400",
          armor: "800"
        }, {
          id: "1045",
          hp: "102000",
          attack: "2550",
          armor: "850"
        }, {
          id: "1046",
          hp: "68400",
          attack: "1710",
          armor: "570"
        }, {
          id: "1047",
          hp: "69600",
          attack: "1740",
          armor: "580"
        }, {
          id: "1048",
          hp: "72000",
          attack: "1800",
          armor: "600"
        }, {
          id: "1049",
          hp: "74400",
          attack: "1860",
          armor: "620"
        }, {
          id: "1050",
          hp: "85500",
          attack: "2140",
          armor: "715"
        }, {
          id: "1051",
          hp: "90000",
          attack: "2250",
          armor: "750"
        }, {
          id: "1052",
          hp: "90000",
          attack: "2250",
          armor: "750"
        }, {
          id: "1053",
          hp: "94500",
          attack: "2360",
          armor: "780"
        }, {
          id: "1054",
          hp: "94500",
          attack: "2360",
          armor: "780"
        }, {
          id: "1055",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1056",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1057",
          hp: "103500",
          attack: "2590",
          armor: "860"
        }, {
          id: "1058",
          hp: "103500",
          attack: "2590",
          armor: "860"
        }, {
          id: "1059",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1060",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1061",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1062",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1063",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1064",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1065",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1066",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1067",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1068",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1069",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1070",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1071",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1072",
          hp: "99000",
          attack: "2475",
          armor: "825"
        }, {
          id: "1073",
          hp: "99000",
          attack: "2475",
          armor: "825"
        } ]
      }
    });
    module.exports = TalentTitleConfig;
    cc._RF.pop();
  }, {} ],
  TaskConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8b24SMD9BF3ap6FNz6xnm1", "TaskConfig");
    "use strict";
    var TaskConfig = cc.Class({
      name: "TaskConfig",
      statics: {
        data: [ {
          id: "1001",
          type: "1",
          target: "1",
          reward: "10"
        }, {
          id: "1002",
          type: "2",
          target: "30",
          reward: "10"
        }, {
          id: "1003",
          type: "3",
          target: "1",
          reward: "10"
        }, {
          id: "1004",
          type: "4",
          target: "1",
          reward: "10"
        }, {
          id: "1005",
          type: "5",
          target: "1",
          reward: "10"
        }, {
          id: "1006",
          type: "6",
          target: "1",
          reward: "10"
        }, {
          id: "1007",
          type: "7",
          target: "1",
          reward: "10"
        }, {
          id: "1008",
          type: "8",
          target: "1",
          reward: "10"
        }, {
          id: "1009",
          type: "9",
          target: "1",
          reward: "10"
        }, {
          id: "1010",
          type: "10",
          target: "15",
          reward: "10"
        }, {
          id: "1011",
          type: "11",
          target: "1",
          reward: "10"
        }, {
          id: "1012",
          type: "12",
          target: "1",
          reward: "10"
        }, {
          id: "1013",
          type: "10",
          target: "30",
          reward: "10"
        } ]
      }
    });
    module.exports = TaskConfig;
    cc._RF.pop();
  }, {} ],
  TaskItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "e6023EJae5M5bAmhWJxz6Rk", "TaskItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        rewardLabel: cc.Node,
        descLabel: cc.Node,
        progress: cc.Node,
        progressLabel: cc.Node,
        claimBtn: cc.Node,
        goBtn: cc.Node,
        finished: cc.Node
      },
      start: function start() {},
      setData: function setData(_config) {
        this.config = _config;
        this.rewardLabel.getComponent("LabelUpdater").setString("+" + _config.reward);
        this.descLabel.getComponent("LabelUpdater").setContent("task_desc_" + _config.id);
        this.progress.width = Global.taskManager.taskData[_config.id].progress / _config.target * 472;
        this.progressLabel.getComponent("LabelUpdater").setString(Global.taskManager.taskData[_config.id].progress + "/" + _config.target);
        this.claimBtn.active = Global.taskManager.taskData[_config.id].progress >= _config.target && false == Global.taskManager.taskData[_config.id].finished;
        this.goBtn.active = Global.taskManager.taskData[_config.id].progress < _config.target;
        this.finished.active = true == Global.taskManager.taskData[_config.id].finished;
      },
      onClickGo: function onClickGo() {
        var taskNode = Global.gui.get(gameConfig.UIID.TaskPanel);
        taskNode && taskNode.getComponent("TaskPanel").onClickClose();
        var homePageNode = Global.gui.get(gameConfig.UIID.HomePagePanel);
        var configId = parseInt(this.config.id);
        switch (configId) {
         case EnumType.TASK_TYPE.LOGIN:
         case EnumType.TASK_TYPE.COST_STAMINA:
          break;

         case EnumType.TASK_TYPE.UPGRADE_EQUIPMENT:
          homePageNode && homePageNode.getComponent("HomePageView").updateToggleState(1);
          break;

         case EnumType.TASK_TYPE.FACTORY_DUNGEON:
          break;

         case EnumType.TASK_TYPE.BUY_COIN:
          Global.gui.open(gameConfig.UIID.ShopPagePanel, {
            showBuyCoin: true
          });
          homePageNode && homePageNode.getComponent("HomePageView").updateToggleState(0, true);
          break;

         case EnumType.TASK_TYPE.BUY_STAMINA:
          Global.gui.open(gameConfig.UIID.StaminaPanel);
          break;

         case EnumType.TASK_TYPE.OPEN_BOX:
          homePageNode && homePageNode.getComponent("HomePageView").updateToggleState(0);
          break;

         case EnumType.TASK_TYPE.SIGNIN:
          Global.gui.open(gameConfig.UIID.SigninPanel);
          break;

         case EnumType.TASK_TYPE.STAMINA_DUNGEON:
         case EnumType.TASK_TYPE.PLAY_TIME_15:
          break;

         case EnumType.TASK_TYPE.PASSIVE_HARVESTING_REWARD:
          Global.gui.open(gameConfig.UIID.PassiveHarvestingPanel);
          break;

         case EnumType.TASK_TYPE.LEVEL_UP_TALENT:
          homePageNode && homePageNode.getComponent("HomePageView").updateToggleState(3);
          break;

         case EnumType.TASK_TYPE.PLAY_TIME_30:
        }
      },
      onClickClaim: function onClickClaim() {
        Global.taskManager.finishTask(this.config.id);
        var taskNode = Global.gui.get(gameConfig.UIID.TaskPanel);
        taskNode && taskNode.getComponent("TaskPanel").finishedTask(this.config.id);
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  TaskManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "94db5XgusFHPImVjGA3DWf5", "TaskManager");
    "use strict";
    var TaskConfig = require("TaskConfig");
    var TaskRewardConfig = require("TaskRewardConfig");
    var gameConfig = require("GameConfig");
    var BattleConfig = require("BattleConfig");
    var EnumType = require("EnumType");
    var TaskManager = cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      ctor: function ctor() {
        this.taskConfigDict = {};
        for (var i = 0; i < TaskConfig.data.length; i++) {
          var config = TaskConfig.data[i];
          this.taskConfigDict[config.id] = config;
        }
        this.dailyRewards = [];
        this.weeklyRewards = [];
        this.DAILY_REWARD_MAX = 110;
        this.WEEKLY_REWARD_MAX = 770;
        for (var j = 0; j < TaskRewardConfig.data.length; j++) {
          var _config = TaskRewardConfig.data[j];
          var rewardArr = _config.reward.split("|");
          _config.reward = {};
          _config.reward.itemId = rewardArr[0];
          _config.reward.count = rewardArr[1];
          "daily" == _config.type && this.dailyRewards.push(_config);
          "weekly" == _config.type && this.weeklyRewards.push(_config);
        }
        this.timer = Date.now();
      },
      init: function init() {
        this.taskData = Global.storage.getJson(gameConfig.COMMON_KEYS.TASK_DATA);
        if (null == this.taskData) {
          this.taskData = {};
          this.taskData.dailyProgress = 0;
          this.taskData.dailyRewardIndexList = [];
          for (var i = 0; i < this.dailyRewards.length; i++) this.taskData.dailyRewardIndexList.push(0);
          this.taskData.weeklyProgress = 0;
          this.taskData.weeklyRewardIndexList = [];
          for (var j = 0; j < this.weeklyRewards.length; j++) this.taskData.weeklyRewardIndexList.push(0);
          for (var k = 0; k < TaskConfig.data.length; k++) {
            var config = TaskConfig.data[k];
            this.taskData[config.id] = {};
            this.taskData[config.id].progress = 0;
            this.taskData[config.id].finished = false;
          }
        }
        this.updateProgress(EnumType.TASK_TYPE.LOGIN, 1);
      },
      resetDailyReward: function resetDailyReward() {
        this.taskData.dailyProgress = 0;
        this.taskData.dailyRewardIndexList = [];
        for (var i = 0; i < this.dailyRewards.length; i++) this.taskData.dailyRewardIndexList.push(0);
        for (var k = 0; k < TaskConfig.data.length; k++) {
          var config = TaskConfig.data[k];
          this.taskData[config.id] = {};
          this.taskData[config.id].progress = 0;
          this.taskData[config.id].finished = false;
        }
        this.saveData();
      },
      resetWeeklyReward: function resetWeeklyReward() {
        this.taskData.weeklyProgress = 0;
        this.taskData.weeklyRewardIndexList = [];
        for (var i = 0; i < this.weeklyRewards.length; i++) this.taskData.weeklyRewardIndexList.push(0);
        this.saveData();
      },
      hasDailyRewards: function hasDailyRewards() {
        for (var i = 0; i < this.dailyRewards.length; i++) {
          var config = this.dailyRewards[i];
          if (config.target <= this.taskData.dailyProgress && 0 == this.taskData.dailyRewardIndexList[i]) return true;
        }
        return false;
      },
      hasWeeklyRewards: function hasWeeklyRewards() {
        for (var i = 0; i < this.weeklyRewards.length; i++) {
          var config = this.weeklyRewards[i];
          if (config.target <= this.taskData.weeklyProgress && 0 == this.taskData.weeklyRewardIndexList[i]) return true;
        }
        return false;
      },
      isDailyClaimAll: function isDailyClaimAll() {
        for (var i = 0; i < this.taskData.dailyRewardIndexList.length; i++) {
          var rewardIndex = this.taskData.dailyRewardIndexList[i];
          if (0 == rewardIndex) return false;
        }
        return true;
      },
      isWeeklyClaimAll: function isWeeklyClaimAll() {
        for (var i = 0; i < this.taskData.weeklyRewardIndexList.length; i++) {
          var rewardIndex = this.taskData.weeklyRewardIndexList[i];
          if (0 == rewardIndex) return false;
        }
        return true;
      },
      getDailyRewardItem: function getDailyRewardItem(_index) {
        var config = this.dailyRewards[_index];
        if (config.target <= this.taskData.dailyProgress && 0 == this.taskData.dailyRewardIndexList[_index]) {
          var reward = {};
          reward = this.dailyRewards[_index].reward;
          this.taskData.dailyRewardIndexList[_index] = 1;
          return reward;
        }
        return null;
      },
      getWeeklyRewardItem: function getWeeklyRewardItem(_index) {
        var config = this.weeklyRewards[_index];
        if (config.target <= this.taskData.weeklyProgress && 0 == this.taskData.weeklyRewardIndexList[_index]) {
          var reward = {};
          reward = this.weeklyRewards[_index].reward;
          this.taskData.weeklyRewardIndexList[_index] = 1;
          return reward;
        }
        return null;
      },
      getDailyRewardItems: function getDailyRewardItems() {
        var result = [];
        for (var i = 0; i < this.dailyRewards.length; i++) {
          var config = this.dailyRewards[i];
          if (config.target <= this.taskData.dailyProgress && 0 == this.taskData.dailyRewardIndexList[i]) {
            var reward = {};
            reward = this.dailyRewards[i].reward;
            result.push(reward);
            this.taskData.dailyRewardIndexList[i] = 1;
          }
        }
        return result;
      },
      getWeeklyRewardItems: function getWeeklyRewardItems() {
        var result = [];
        for (var i = 0; i < this.weeklyRewards.length; i++) {
          var config = this.weeklyRewards[i];
          if (config.target <= this.taskData.weeklyProgress && 0 == this.taskData.weeklyRewardIndexList[i]) {
            var reward = {};
            reward = this.weeklyRewards[i].reward;
            result.push(reward);
            this.taskData.weeklyRewardIndexList[i] = 1;
          }
        }
        return result;
      },
      saveData: function saveData() {
        Global.storage.set(gameConfig.COMMON_KEYS.TASK_DATA, this.taskData);
      },
      updateProgress: function updateProgress(_id, _value) {
        this.taskData[_id].progress += _value;
        this.taskData[_id].progress = this.taskData[_id].progress > this.taskConfigDict[_id].target ? this.taskConfigDict[_id].target : this.taskData[_id].progress;
        this.saveData();
      },
      finishTask: function finishTask(_id) {
        this.taskData.dailyProgress += parseInt(this.taskConfigDict[_id].reward);
        this.taskData.weeklyProgress += parseInt(this.taskConfigDict[_id].reward);
        this.taskData[_id].finished = true;
        this.saveData();
      },
      update: function update(dt) {
        if (Date.now() - this.timer >= BattleConfig.HEART_BEAT_ONE_MINUTE) {
          this.timer = Date.now();
          this.updateProgress(EnumType.TASK_TYPE.PLAY_TIME_15, 1);
          this.updateProgress(EnumType.TASK_TYPE.PLAY_TIME_30, 1);
        }
      }
    });
    module.exports = TaskManager;
    cc._RF.pop();
  }, {
    BattleConfig: "BattleConfig",
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    TaskConfig: "TaskConfig",
    TaskRewardConfig: "TaskRewardConfig"
  } ],
  TaskPanel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "09261RsOgRMJKYrNVltuQWJ", "TaskPanel");
    "use strict";
    var gameConfig = require("GameConfig");
    var ItemData = require("ItemData");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        content: cc.Node,
        scrollView: cc.ScrollView,
        weeklyProgressLabel: cc.Node,
        weeklyProgress: cc.Node,
        weeklyRewardList: [ cc.Node ],
        weeklyClaimAllBtn: cc.Button,
        weeklyClaimed: cc.Node,
        dailyProgressLabel: cc.Node,
        dailyProgress: cc.Node,
        dailyRewardList: [ cc.Node ],
        dailyClaimAllBtn: cc.Button,
        dailyClaimed: cc.Node,
        taskItemPrefab: cc.Prefab,
        taskItemList: [ cc.Node ],
        taskItemPool: [ cc.Node ],
        taskItemContainer: cc.Node
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.roleData = _args.roleData;
        this.content.y = 1e3;
        this.content.opacity = 255;
        cc.tween(this.node).to(.2, {
          opacity: 255
        }).start();
        cc.tween(this.content).to(.5, {
          position: cc.v2(0, 0)
        }, {
          easing: "elasticOut"
        }).start();
        this.updateUI();
      },
      updateUI: function updateUI() {
        var _this = this;
        this.weeklyProgressLabel.getComponent("LabelUpdater").setString(Global.taskManager.taskData.weeklyProgress);
        var weeklyProgressRate = Global.taskManager.taskData.weeklyProgress / Global.taskManager.WEEKLY_REWARD_MAX;
        weeklyProgressRate = weeklyProgressRate > 1 ? 1 : weeklyProgressRate;
        this.weeklyProgress.width = 472 * weeklyProgressRate;
        for (var i = 0; i < Global.taskManager.weeklyRewards.length; i++) {
          var config = Global.taskManager.weeklyRewards[i];
          var itemConfig = Global.bagManager.getItemConfig(config.reward.itemId);
          var itemData = new ItemData();
          itemData.setData(null, itemConfig);
          itemData.count = config.reward.count;
          this.weeklyRewardList[i].getComponent("BagItem").setData(itemData, null, EnumType.ITEM_OWNER_TYPE.TASK_REWARD, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_1);
          1 == Global.taskManager.taskData.weeklyRewardIndexList[i] ? this.weeklyRewardList[i].getComponent("BagItem").showSelect(true) : this.weeklyRewardList[i].getComponent("BagItem").setMask(Global.taskManager.taskData.weeklyProgress < config.target);
          this.weeklyRewardList[i].getComponent("BagItem").setTaskRewardInfo(i, "weekly");
        }
        this.weeklyClaimAllBtn.interactable = Global.taskManager.hasWeeklyRewards();
        this.weeklyClaimAllBtn.node.active = !Global.taskManager.isWeeklyClaimAll();
        this.weeklyClaimed.active = Global.taskManager.isWeeklyClaimAll();
        this.dailyProgressLabel.getComponent("LabelUpdater").setString(Global.taskManager.taskData.dailyProgress);
        var dailyProgressRate = Global.taskManager.taskData.dailyProgress / Global.taskManager.DAILY_REWARD_MAX;
        dailyProgressRate = dailyProgressRate > 1 ? 1 : dailyProgressRate;
        this.dailyProgress.width = 472 * dailyProgressRate;
        for (var _i = 0; _i < Global.taskManager.dailyRewards.length; _i++) {
          var _config2 = Global.taskManager.dailyRewards[_i];
          var _itemConfig = Global.bagManager.getItemConfig(_config2.reward.itemId);
          var _itemData = new ItemData();
          _itemData.setData(null, _itemConfig);
          _itemData.count = _config2.reward.count;
          this.dailyRewardList[_i].getComponent("BagItem").setData(_itemData, null, EnumType.ITEM_OWNER_TYPE.TASK_REWARD, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_1);
          1 == Global.taskManager.taskData.dailyRewardIndexList[_i] ? this.dailyRewardList[_i].getComponent("BagItem").showSelect(true) : this.dailyRewardList[_i].getComponent("BagItem").setMask(Global.taskManager.taskData.dailyProgress < _config2.target);
          this.dailyRewardList[_i].getComponent("BagItem").setTaskRewardInfo(_i, "daily");
        }
        this.dailyClaimAllBtn.interactable = Global.taskManager.hasDailyRewards();
        this.dailyClaimAllBtn.node.active = !Global.taskManager.isDailyClaimAll();
        this.dailyClaimed.active = Global.taskManager.isDailyClaimAll();
        this.clearItems();
        var sortedKeys = Object.keys(Global.taskManager.taskConfigDict).sort(function(idA, idB) {
          var taskA = Global.taskManager.taskData[idA];
          var taskB = Global.taskManager.taskData[idB];
          var configA = Global.taskManager.taskConfigDict[idA];
          var configB = Global.taskManager.taskConfigDict[idB];
          if (taskA.finished !== taskB.finished) return taskA.finished ? 1 : -1;
          var progressA = taskA.progress >= configA.target;
          var progressB = taskB.progress >= configB.target;
          if (progressA !== progressB) return progressA ? -1 : 1;
        });
        sortedKeys.forEach(function(id) {
          var config = Global.taskManager.taskConfigDict[id];
          null != config && _this.generateItem(config);
        });
      },
      clearItems: function clearItems() {
        while (this.taskItemList.length > 0) {
          var item = this.taskItemList.pop();
          this.taskItemContainer.removeChild(item, false);
          this.taskItemPool.push(item);
        }
      },
      generateItem: function generateItem(_config) {
        var taskItem;
        taskItem = this.taskItemPool.length > 0 ? this.taskItemPool.pop() : cc.instantiate(this.taskItemPrefab);
        this.taskItemList.push(taskItem);
        taskItem.getComponent("TaskItem").setData(_config);
        this.taskItemContainer.addChild(taskItem);
      },
      finishedTask: function finishedTask(_id) {
        this.updateUI();
      },
      claimAllWeekly: function claimAllWeekly() {
        var rewardItems = Global.taskManager.getWeeklyRewardItems();
        this.getRewardItems(rewardItems);
        this.updateUI();
      },
      claimAllDaily: function claimAllDaily() {
        var rewardItems = Global.taskManager.getDailyRewardItems();
        this.getRewardItems(rewardItems);
        this.updateUI();
      },
      claimSingleItem: function claimSingleItem(_index, _type) {
        var rewardItem;
        var config;
        if ("weekly" == _type) {
          config = Global.taskManager.weeklyRewards[_index];
          if (Global.taskManager.taskData.weeklyProgress < config.target || 0 != Global.taskManager.taskData.weeklyRewardIndexList[_index]) return;
          rewardItem = Global.taskManager.getWeeklyRewardItem(_index);
        } else {
          config = Global.taskManager.dailyRewards[_index];
          if (Global.taskManager.taskData.dailyProgress < config.target || 0 != Global.taskManager.taskData.dailyRewardIndexList[_index]) return;
          rewardItem = Global.taskManager.getDailyRewardItem(_index);
        }
        var itemConfig = Global.bagManager.getItemConfig(rewardItem.itemId);
        var itemData = new ItemData();
        itemData.setData(null, itemConfig);
        itemData.count = rewardItem.count;
        rewardItem.itemId == Global.bagManager.STAMINA_ITEM_ID ? Global.roleData.updateStamina(parseInt(rewardItem.count)) : rewardItem.itemId == Global.bagManager.COIN_ITEM_ID ? Global.roleData.updateCoin(parseInt(rewardItem.count)) : rewardItem.itemId == Global.bagManager.DIAMOND_ITEM_ID ? Global.roleData.updateDiamond(parseInt(rewardItem.count)) : Global.bagManager.addItem(rewardItem.itemId, rewardItem.count, Global.roleData);
        var args = {};
        args.items = [ itemData ];
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        this.updateUI();
      },
      getRewardItems: function getRewardItems(_list) {
        var result = [];
        for (var i = 0; i < _list.length; i++) {
          var rewardItem = _list[i];
          var itemConfig = Global.bagManager.getItemConfig(rewardItem.itemId);
          var itemData = new ItemData();
          itemData.setData(null, itemConfig);
          itemData.count = rewardItem.count;
          result.push(itemData);
          rewardItem.itemId == Global.bagManager.STAMINA_ITEM_ID ? Global.roleData.updateStamina(parseInt(rewardItem.count)) : rewardItem.itemId == Global.bagManager.COIN_ITEM_ID ? Global.roleData.updateCoin(parseInt(rewardItem.count)) : rewardItem.itemId == Global.bagManager.DIAMOND_ITEM_ID ? Global.roleData.updateDiamond(parseInt(rewardItem.count)) : Global.bagManager.addItem(rewardItem.itemId, rewardItem.count, Global.roleData);
        }
        var args = {};
        args.items = result;
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
      },
      onEnable: function onEnable() {
        this.scrollView.scrollToTop();
      },
      onClickClose: function onClickClose() {
        cc.tween(this.node).stop();
        cc.tween(this.node).to(.2, {
          opacity: 0
        }).call(function() {
          Global.gui.remove(gameConfig.UIID.TaskPanel);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  TaskRewardConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "b6df8HaocFP66s2YTg0n1nX", "TaskRewardConfig");
    "use strict";
    var TaskRewardConfig = cc.Class({
      name: "TaskRewardConfig",
      statics: {
        data: [ {
          id: "1001",
          type: "daily",
          target: "20",
          reward: "1017|1"
        }, {
          id: "1002",
          type: "daily",
          target: "40",
          reward: "2001|15"
        }, {
          id: "1003",
          type: "daily",
          target: "60",
          reward: "1001|5"
        }, {
          id: "1004",
          type: "daily",
          target: "80",
          reward: "1002|3"
        }, {
          id: "1005",
          type: "daily",
          target: "100",
          reward: "2002|50"
        }, {
          id: "1006",
          type: "weekly",
          target: "140",
          reward: "1001|20"
        }, {
          id: "1007",
          type: "weekly",
          target: "280",
          reward: "1017|2"
        }, {
          id: "1008",
          type: "weekly",
          target: "420",
          reward: "1002|10"
        }, {
          id: "1009",
          type: "weekly",
          target: "560",
          reward: "1018|1"
        }, {
          id: "1010",
          type: "weekly",
          target: "700",
          reward: "2002|250"
        } ]
      }
    });
    module.exports = TaskRewardConfig;
    cc._RF.pop();
  }, {} ],
  TimerManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "73600VLsIBLOKhOhd7td4P8", "TimerManager");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var Timer_1 = require("./Timer");
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var TimerManager = function(_super) {
      __extends(TimerManager, _super);
      function TimerManager() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.times = {};
        _this.date_s = new Date();
        _this.date_s_start = new Date();
        _this.polymeric_s = 0;
        _this.date_c = new Date();
        return _this;
      }
      TimerManager.prototype.update = function(dt) {
        for (var key in this.times) {
          var data = this.times[key];
          var timer = data.timer;
          if (timer.update(dt) && data.object[data.field] > 0) {
            data.object[data.field]--;
            0 == data.object[data.field] ? this.onTimerComplete(data) : data.onSecond && data.onSecond.call(data.object);
          }
        }
      };
      TimerManager.prototype.onTimerComplete = function(data) {
        data.onComplete && data.onComplete.call(data.object);
        data.event && this.node.dispatchEvent(data.event);
        delete this.times[data.id];
      };
      TimerManager.prototype.register = function(object, field, onSecond, onComplete) {
        var timer = new Timer_1.Timer();
        timer.step = 1;
        var data = {};
        data.id = Global.utils.guid();
        data.timer = timer;
        data.object = object;
        data.field = field;
        data.onSecond = onSecond;
        data.onComplete = onComplete;
        this.times[data.id] = data;
        return data.id;
      };
      TimerManager.prototype.unRegister = function(id) {
        this.times[id] && delete this.times[id];
      };
      TimerManager.prototype.setServerTime = function(value) {
        this.polymeric_s = this.getTime();
        this.date_s_start.setTime(value);
      };
      TimerManager.prototype.getServerTime = function() {
        return this.date_s_start.getTime() + this.getTime() - this.polymeric_s;
      };
      TimerManager.prototype.getServerDate = function() {
        this.date_s.setTime(this.getServerTime());
        return this.date_s;
      };
      TimerManager.prototype.getClientTime = function() {
        return Date.now();
      };
      TimerManager.prototype.getClientDate = function() {
        this.date_c.setTime(this.getClientTime());
        return this.date_c;
      };
      TimerManager.prototype.getTime = function() {
        return cc.director.getTotalTime();
      };
      TimerManager.prototype.save = function() {
        for (var key in this.times) this.times[key].startTime = this.getTime();
      };
      TimerManager.prototype.load = function() {
        for (var key in this.times) {
          var interval = Math.floor((this.getTime() - (this.times[key].startTime || this.getTime())) / 1e3);
          var data = this.times[key];
          data.object[data.field] = data.object[data.field] - interval;
          if (data.object[data.field] <= 0) {
            data.object[data.field] = 0;
            this.onTimerComplete(data);
          } else this.times[key].startTime = null;
        }
      };
      TimerManager = __decorate([ ccclass ], TimerManager);
      return TimerManager;
    }(cc.Component);
    exports.default = TimerManager;
    cc._RF.pop();
  }, {
    "./Timer": "Timer"
  } ],
  Timer: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6021fct1uhJsImEuhdFWC0f", "Timer");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Timer = void 0;
    var Timer = function() {
      function Timer(step) {
        void 0 === step && (step = 0);
        this.callback = null;
        this._elapsedTime = 0;
        this._step = -1;
        this.step = step;
      }
      Object.defineProperty(Timer.prototype, "elapsedTime", {
        get: function() {
          return this._elapsedTime;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Timer.prototype, "step", {
        get: function() {
          return this._step;
        },
        set: function(step) {
          this._step = step;
          this._elapsedTime = 0;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Timer.prototype, "progress", {
        get: function() {
          return this._elapsedTime / this._step;
        },
        enumerable: false,
        configurable: true
      });
      Timer.prototype.update = function(dt) {
        var _a;
        if (this.step <= 0) return false;
        this._elapsedTime += dt;
        if (this._elapsedTime >= this._step) {
          this._elapsedTime -= this._step;
          null === (_a = this.callback) || void 0 === _a ? void 0 : _a.call(this);
          return true;
        }
        return false;
      };
      Timer.prototype.reset = function() {
        this._elapsedTime = 0;
      };
      Timer.prototype.stop = function() {
        this._elapsedTime = 0;
        this.step = -1;
      };
      return Timer;
    }();
    exports.Timer = Timer;
    cc._RF.pop();
  }, {} ],
  ToggleEffect: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "66c01Ax2VhDga0ltfNLrmrg", "ToggleEffect");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        toggleNodeList: [ cc.Node ]
      },
      start: function start() {
        this.tweenRefs = {};
      },
      resetToggleWidths: function resetToggleWidths() {
        for (var i = 0; i < this.toggleNodeList.length; i++) {
          var _toggleNode$getChildB;
          var toggleNode = this.toggleNodeList[i];
          this.setToggleWidth(toggleNode, 182);
          null == (_toggleNode$getChildB = toggleNode.getChildByName("reddot")) ? void 0 : _toggleNode$getChildB.setPosition(30, 40);
        }
      },
      setToggleWidth: function setToggleWidth(_toggleNode, width) {
        var _toggleNode$getChildB2;
        null == (_toggleNode$getChildB2 = _toggleNode.getChildByName("reddot")) ? void 0 : _toggleNode$getChildB2.setPosition(20, 75);
        this.tweenRefs[_toggleNode.uuid] && this.tweenRefs[_toggleNode.uuid].stop();
        this.tweenRefs[_toggleNode.uuid] = cc.tween(_toggleNode).to(.2, {
          width: width
        }, {
          easing: cc.easing.backOut
        }).start();
      },
      checkEventsCallback: function checkEventsCallback(_toggle) {
        this.resetToggleWidths();
        this.setToggleWidth(_toggle.node, 330);
      }
    });
    cc._RF.pop();
  }, {} ],
  TopUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "3e2538g529MGpd/3kvLWr2I", "TopUI");
    "use strict";
    var gameConfig = require("GameConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        staminaLabel: cc.Node,
        coinLabel: cc.Node,
        diamondLabel: cc.Node
      },
      start: function start() {
        Global.roleData.updateTopUICallback = this.updateTopUICallback.bind(this);
      },
      onEnable: function onEnable() {
        this.updateTopUICallback();
      },
      onClickStamina: function onClickStamina() {
        Global.gui.open(gameConfig.UIID.StaminaPanel);
      },
      updateTopUICallback: function updateTopUICallback() {
        this.staminaLabel.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(Global.roleData.currentStamina) + "/" + Global.utils.formatNumberWithUnit(Global.roleData.data.stamina_max));
        this.coinLabel.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(Global.roleData.coin));
        this.diamondLabel.getComponent("LabelUpdater").setString(Global.utils.formatNumberWithUnit(Global.roleData.diamond));
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  UltimateAbilityConfig: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "f770fejMVtPOrczOYOYnfsZ", "UltimateAbilityConfig");
    "use strict";
    var UltimateAbilityConfig = cc.Class({
      name: "UltimateAbilityConfig",
      statics: {
        data: [ {
          id: "1001",
          name: "\u8d2d\u7269\u8f66",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "1002",
          name: "\u989d\u5916\u7eb8\u56e2",
          value: "300|20",
          coefficient: "2|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "1003",
          name: "\u98de\u52003",
          value: "0",
          coefficient: "3|1002",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1003",
          comment: "\u98de\u5200\u7279\u65483"
        }, {
          id: "1004",
          name: "\u69b4\u83b2",
          value: "600|40",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "1005",
          name: "\u6fc0\u5149",
          value: "1500|100",
          coefficient: "5|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1005",
          comment: ""
        }, {
          id: "1006",
          name: "\u725b\u5486\u54ee",
          value: "900|60",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1006",
          comment: ""
        }, {
          id: "1007",
          name: "NS",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1007",
          comment: ""
        }, {
          id: "1008",
          name: "\u5927\u4fbf",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "1009",
          name: "\u6cb9\u6f06\u6876",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1009",
          comment: ""
        }, {
          id: "1010",
          name: "\u6253\u6c14\u9524",
          value: "600|40",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1010",
          comment: ""
        }, {
          id: "1011",
          name: "\u7eb8\u98de\u673a",
          value: "300|20",
          coefficient: "10|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1011",
          comment: ""
        }, {
          id: "1012",
          name: "\u98de\u52004",
          value: "0",
          coefficient: "4|1002",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "",
          comment: "\u98de\u5200\u7279\u65484"
        }, {
          id: "1013",
          name: "\u51b0\u8d2d\u7269\u8f66",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1013",
          comment: ""
        }, {
          id: "1014",
          name: "\u51b0\u53c9\u5b50",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1014",
          comment: ""
        }, {
          id: "1015",
          name: "\u6447\u6c7d\u6c34",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1015",
          comment: ""
        }, {
          id: "1016",
          name: "\u7eb8\u76fe",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1016",
          comment: ""
        }, {
          id: "1017",
          name: "\u786c\u7eb8\u677f",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1017",
          comment: ""
        }, {
          id: "1018",
          name: "\u6838\u6843",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "1019",
          name: "\u7f50\u88c5\u6c7d\u6c34",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1019",
          comment: ""
        }, {
          id: "1020",
          name: "\u5c0f\u51b2\u950b",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1020",
          comment: ""
        }, {
          id: "1021",
          name: "\u5927\u53cd\u51fb",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "1022",
          name: "\u5927\u53cd\u4f24",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "2001",
          name: "\u5c0f\u91d1\u9c7c",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "2001",
          comment: ""
        }, {
          id: "2002",
          name: "\u732a\u6ce5",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "2002",
          comment: ""
        }, {
          id: "2003",
          name: "\u949e\u7968\u96e8",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "2003",
          comment: ""
        }, {
          id: "3001",
          name: "\u8611\u83c7",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3001",
          comment: ""
        }, {
          id: "3002",
          name: "\u6c49\u5821",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3002",
          comment: ""
        }, {
          id: "3003",
          name: "\u6cb9\u6f06\u5237",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3003",
          comment: ""
        }, {
          id: "3004",
          name: "\u51b0\u7bb1",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "3005",
          name: "\u523a",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3005",
          comment: ""
        }, {
          id: "3006",
          name: "PS5",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3006",
          comment: ""
        }, {
          id: "3007",
          name: "\u996e\u6599",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3007",
          comment: ""
        }, {
          id: "3009",
          name: "\u7eff\u6cb9\u6f06\u5237",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "3009",
          comment: ""
        }, {
          id: "3011",
          name: "\u7eff\u51b0\u7bb1",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        }, {
          id: "3013",
          name: "\u8c4c\u8c46\u4eba",
          value: "1200|80",
          coefficient: "4|strength",
          damage_type: "1",
          crit: "1",
          dodge: "1",
          blast: "1001",
          comment: ""
        } ]
      }
    });
    module.exports = UltimateAbilityConfig;
    cc._RF.pop();
  }, {} ],
  UltimateAbilityData: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "95f1b+CpSlHf7j/iEjVPBc9", "UltimateAbilityData");
    "use strict";
    var EnumType = require("EnumType");
    var UltimateAbilityConfig = require("UltimateAbilityConfig");
    var BulletData = require("./BulletData");
    var UltimateAbilityData = cc.Class({
      extends: cc.Component,
      statics: {},
      properties: {},
      setData: function setData(_type, _roleData) {
        for (var i = 0; i < UltimateAbilityConfig.data.length; i++) {
          var item = UltimateAbilityConfig.data[i];
          if (item.id == _type) {
            this.config = item;
            break;
          }
        }
        this.fromData = _roleData;
        this.type = _type;
        this.damageType = parseInt(this.config.damage_type);
      },
      updateTargetData: function updateTargetData(_targetData) {
        this.targetData = _targetData;
      },
      resetDamageType: function resetDamageType() {
        this.damageType = parseInt(this.config.damage_type);
      },
      setDamageType: function setDamageType(_damageType) {
        this.damageType |= _damageType;
      },
      getBaseDamage: function getBaseDamage() {
        var damageArr = this.config.value.split("|");
        if (1 == damageArr.length) return Number(damageArr[0]);
        var weapon = null;
        for (var i = 0; i < this.fromData.equipmentList.length; i++) {
          var equipmentData = this.fromData.equipmentList[i];
          if (equipmentData.slot == EnumType.EQUIPMENT_TYPE.WEAPON) {
            weapon = equipmentData;
            break;
          }
        }
        if (null != weapon) {
          var enhancementPointItem = Global.equipmentManager.enhancementPointsConfigDict[weapon.level];
          var rarityValue = parseInt(enhancementPointItem["rarity_" + weapon.rarity]);
          return Number(damageArr[0]) + Number(damageArr[1]) * rarityValue;
        }
        return Number(damageArr[0]);
      },
      getDamage: function getDamage() {
        var damage = this.getBaseDamage();
        var arr;
        var value;
        switch (parseInt(this.type)) {
         case EnumType.ULTIMATE_ABILITY_TYPE.TYPE_3:
         case EnumType.ULTIMATE_ABILITY_TYPE.TYPE_12:
          arr = this.config.coefficient.split("|");
          this.damageCount = 1;
          var bulletData = this.fromData.baseBulletDataList[EnumType.BULLET_TYPE.AXE];
          value = parseInt(2 * arr[0]) * bulletData.getDamage()[EnumType.BULLET_DAMAGE_TYPE.HP];
          damage += Math.floor(value);
          break;

         default:
          arr = this.config.coefficient.split("|");
          this.damageCount = parseInt(arr[0]);
          value = this.damageCount * this.fromData.data[arr[1]];
          damage += Math.floor(value);
        }
        return {
          damageType: this.damageType,
          value: damage
        };
      }
    });
    module.exports = UltimateAbilityData;
    cc._RF.pop();
  }, {
    "./BulletData": "BulletData",
    EnumType: "EnumType",
    UltimateAbilityConfig: "UltimateAbilityConfig"
  } ],
  UltimateProgressBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "86f4bwvJtpBbrzbvQdwbeTJ", "UltimateProgressBar");
    "use strict";
    var BaseProgressBar = require("BaseProgressBar");
    cc.Class({
      extends: BaseProgressBar,
      properties: {
        _roleData: null,
        whiteBgPool: [],
        whiteBgPrefab: cc.Prefab,
        aniLabel: cc.Node
      },
      initData: function initData(roleData) {
        this._roleData = roleData;
        this.updateUI();
        this.timer = Date.now();
        this.speed = 2;
        this.currentValue = this._roleData.currentEnergy;
      },
      reduceEnergy: function reduceEnergy(_value) {
        if (this.percent) {
          var item;
          item = this.whiteBgPool.length > 0 ? this.whiteBgPool.pop() : cc.instantiate(this.whiteBgPrefab);
          this.currentValue = this._roleData.currentEnergy;
          _value > this._roleData.currentEnergy && (_value = this._roleData.currentEnergy);
          item.getComponent("WhiteBgBar").setContent(this.whiteBgPool, this._roleData.currentEnergy / this._roleData.data.energy_max, _value / this._roleData.data.energy_max);
          item.getComponent("WhiteBgBar").setSpriteHeight(14);
          this.node.addChild(item);
        }
      },
      updateUI: function updateUI() {
        this.aniLabel && this.aniLabel.active && this.aniLabel.getComponent("AniLabel").animateNumberChange(this._roleData.currentEnergy);
      },
      update: function update(dt) {
        if (Date.now() - this.timer >= 100) {
          this.currentValue = cc.misc.lerp(this.currentValue, this._roleData.currentEnergy, dt * this.speed);
          Math.abs(this.currentValue - this._roleData.currentEnergy) < .01 && (this.currentValue = this._roleData.currentEnergy);
          this.percent = this.currentValue / this._roleData.data.energy_max;
          this.progressBar.progress = this.percent;
        }
      }
    });
    cc._RF.pop();
  }, {
    BaseProgressBar: "BaseProgressBar"
  } ],
  Utils: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "c12aa0h7PJJqYLO1/6FwPpw", "Utils");
    "use strict";
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      info.done ? resolve(value) : Promise.resolve(value).then(_next, _throw);
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it;
      if ("undefined" === typeof Symbol || null == o[Symbol.iterator]) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && "number" === typeof o.length) {
          it && (o = it);
          var i = 0;
          return function() {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      it = o[Symbol.iterator]();
      return it.next.bind(it);
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if ("string" === typeof o) return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      "Object" === n && o.constructor && (n = o.constructor.name);
      if ("Map" === n || "Set" === n) return Array.from(o);
      if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      (null == len || len > arr.length) && (len = arr.length);
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    var EnumType = require("EnumType");
    var gameConfig = require("GameConfig");
    var Utils = function Utils() {
      this.resetData();
    }, utils = Utils.prototype, g_instance = null;
    utils.resetData = function() {};
    utils.formatNumberWithUnit = function(num) {
      return "zh" == Global.languageManager.currentLang ? utils.formatNumberWithCNUnit(num) : utils.formatNumberWithENUnit(num);
    };
    utils.formatNumberWithENUnit = function(num) {
      var units = [ "", "K", "M", "B", "T" ];
      var unitIndex = 0;
      while (Math.abs(num) >= 1e3 && unitIndex < units.length - 1) {
        num /= 1e3;
        unitIndex++;
      }
      var formattedNum = num.toFixed(1);
      formattedNum = parseFloat(formattedNum) === parseInt(formattedNum) ? parseInt(formattedNum) : formattedNum;
      return formattedNum + units[unitIndex];
    };
    utils.formatNumberWithCNUnit = function(num) {
      var units = [ "", "\u4e07", "\u4ebf", "\u4e07\u4ebf" ];
      var unitIndex = 0;
      while (Math.abs(num) >= 1e4 && unitIndex < units.length - 1) {
        num /= 1e4;
        unitIndex++;
      }
      var formattedNum = num.toFixed(1);
      formattedNum = parseFloat(formattedNum) === parseInt(formattedNum) ? parseInt(formattedNum) : formattedNum;
      return formattedNum + units[unitIndex];
    };
    utils.getRandomNumber = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1) + min);
    };
    utils.runPromiseQueue = function(parray) {
      var p = Promise.resolve();
      for (var _iterator = _createForOfIteratorHelperLoose(parray), _step; !(_step = _iterator()).done; ) {
        var promise = _step.value;
        p = p.then(promise);
      }
      return p;
    };
    utils.isDecimal = function(str) {
      var num = Number(str);
      return !isNaN(num) && num % 1 !== 0;
    };
    utils.deepClone = function(obj) {
      if (null === obj || "object" !== typeof obj) return obj;
      var clonedObj = Array.isArray(obj) ? [] : {};
      for (var key in obj) obj.hasOwnProperty(key) && (clonedObj[key] = this.deepClone(obj[key]));
      return clonedObj;
    };
    utils.getRandomByProbability = function(probability) {
      if ("number" !== typeof probability || probability < 0 || probability > 1) throw new TypeError("Probability must be a number between 0 and 1.");
      var random = Math.random();
      return random <= probability;
    };
    utils.logMessage = function(msg) {
      console.log(msg);
    };
    utils.addMethod = function(object, name, fn) {
      var old = object[name];
      object[name] = function() {
        if (fn.length === arguments.length) return fn.apply(this, arguments);
        if ("function" === typeof old) return old.apply(this, arguments);
      };
    };
    utils.guid = function() {
      var guid = "";
      for (var i = 1; i <= 32; i++) {
        var n = Math.floor(16 * Math.random()).toString(16);
        guid += n;
        8 != i && 12 != i && 16 != i && 20 != i || (guid += "-");
      }
      return guid;
    };
    utils.getPopCommonEffect = function(callbacks) {
      var newCallbacks = {
        onAdded: function onAdded(node, params) {
          node.setScale(.8, .8);
          cc.tween(node).to(.2, {
            scale: 1
          }).start();
        },
        onBeforeRemove: function onBeforeRemove(node, next) {
          cc.tween(node).to(.2, {
            scale: .8
          }).call(function(target, data) {
            next();
          }).start();
        }
      };
      if (callbacks) {
        if (callbacks && callbacks.onAdded) {
          var onAdded = callbacks.onAdded;
          callbacks.onAdded = function(node, params) {
            onAdded(node, params);
            newCallbacks.onAdded(node, params);
          };
        }
        if (callbacks && callbacks.onBeforeRemove) {
          var onBeforeRemove = callbacks.onBeforeRemove;
          callbacks.onBeforeRemove = function(node, params) {
            onBeforeRemove(node, params);
            newCallbacks.onBeforeRemove(node, params);
          };
        }
        return callbacks;
      }
      return newCallbacks;
    };
    utils.isNewDay = function(_previousDateMilliseconds) {
      var now = new Date(Global.networkTimer);
      var prev = new Date(_previousDateMilliseconds);
      return now.getFullYear() !== prev.getFullYear() || now.getMonth() !== prev.getMonth() || now.getDate() !== prev.getDate();
    };
    utils.isNewWeek = function() {
      var monday = new Date(Global.networkTimer);
      monday.setDate(monday.getDate() - (monday.getDay() + 6) % 7);
      monday.setHours(0, 0, 0, 0);
      var lastMonday = Global.storage.getJson(gameConfig.COMMON_KEYS.NEW_WEEK_TIMER);
      if (null == lastMonday) {
        lastMonday = monday.getTime();
        Global.storage.set(gameConfig.COMMON_KEYS.NEW_WEEK_TIMER, lastMonday);
        return true;
      }
      if (monday.getTime() > parseInt(lastMonday)) return true;
      return false;
    };
    utils.getNetworkTimer = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
      var apis, _i, _apis, api, response, data, milliseconds;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
         case 0:
          _context.prev = 0;
          apis = [ "https://time.akamai.com/" ];
          _i = 0, _apis = apis;

         case 3:
          if (!(_i < _apis.length)) {
            _context.next = 23;
            break;
          }
          api = _apis[_i];
          _context.prev = 5;
          _context.next = 8;
          return fetch(api, {
            cache: "no-store",
            signal: AbortSignal.timeout(2e3)
          });

         case 8:
          response = _context.sent;
          _context.next = 11;
          return response.json();

         case 11:
          data = _context.sent;
          milliseconds = 1e3 * Number(data);
          if (!milliseconds) {
            _context.next = 15;
            break;
          }
          return _context.abrupt("return", milliseconds);

         case 15:
          _context.next = 20;
          break;

         case 17:
          _context.prev = 17;
          _context.t0 = _context["catch"](5);
          console.warn("API " + api + " \u5931\u8d25:", _context.t0);

         case 20:
          _i++;
          _context.next = 3;
          break;

         case 23:
          throw new Error("\u6240\u6709API\u8bf7\u6c42\u5931\u8d25");

         case 26:
          _context.prev = 26;
          _context.t1 = _context["catch"](0);
          console.warn("\u4f7f\u7528\u672c\u5730\u65f6\u95f4:", _context.t1);
          return _context.abrupt("return", Date.now());

         case 30:
         case "end":
          return _context.stop();
        }
      }, _callee, null, [ [ 0, 26 ], [ 5, 17 ] ]);
    }));
    utils.formatTime = function(ms) {
      var totalSeconds = Math.floor(ms / 1e3);
      var hours = Math.floor(totalSeconds / 3600).toString().padStart(2, "0");
      var minutes = Math.floor(totalSeconds % 3600 / 60).toString().padStart(2, "0");
      var seconds = (totalSeconds % 60).toString().padStart(2, "0");
      return hours + ":" + minutes + ":" + seconds;
    };
    utils.removeTrailingZeros = function(num) {
      return Number(num.toString()).toString();
    };
    utils.getEquipmentLabelColor = function(_rarity) {
      if (null == this.labelColorList) {
        this.labelColorList = [];
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.COMMON] = new cc.color(255, 255, 255, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.UNCOMMON] = new cc.color(97, 197, 37, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.RARE] = new cc.color(54, 125, 187, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC] = new cc.color(137, 60, 214, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC_1] = new cc.color(137, 60, 214, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.EPIC_2] = new cc.color(137, 60, 214, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY] = new cc.color(229, 136, 29, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_1] = new cc.color(229, 136, 29, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.LEGENDARY_2] = new cc.color(229, 136, 29, 255);
        this.labelColorList[EnumType.RARE_TYPE_EQUIPMENT.MYTHIC] = new cc.color(232, 32, 74, 255);
      }
      return this.labelColorList[_rarity];
    };
    utils.formatTimeToSecondsAndMilliseconds = function(ms) {
      var seconds = Math.floor(ms / 1e3);
      seconds = seconds < 10 ? "0" + seconds : seconds;
      var milliseconds = (ms % 1e3).toString();
      milliseconds = milliseconds.substring(0, 2);
      milliseconds.length <= 1 && (milliseconds = "0" + milliseconds);
      return seconds + ":" + milliseconds;
    };
    module.exports = function() {
      g_instance || (g_instance = new Utils());
      return g_instance;
    };
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  ValueLabel: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "a58194MldVB2or+p63w3yJ4", "ValueLabel");
    "use strict";
    var gameConfig = require("GameConfig");
    var EnumType = require("EnumType");
    cc.Class({
      extends: cc.Component,
      properties: {
        valueLab: {
          type: cc.Label,
          default: null
        },
        rootNode: {
          type: cc.Node,
          default: null
        },
        tempNode: {
          type: cc.Node,
          default: null
        },
        _normalFont: null,
        _ultimateFont: null
      },
      onLoad: function onLoad() {
        var normalPath = gameConfig.PRELOADCONFIG["font_" + Global.languageManager.currentLang].path;
        this._normalFont = Global.res.getRes(normalPath);
        this._ultimateFont = Global.res.getRes(gameConfig.PRELOADCONFIG.font_bmt.path);
      },
      show: function show(damage, args) {
        var _this = this;
        this._normalFont && (this.valueLab.font = this._normalFont);
        var node = this.node;
        var rootNode = this.rootNode;
        var SCALE = 1;
        var SCALE_MAX = 1.3;
        var value = "";
        var symbol = "";
        var color = new cc.color(255, 255, 255, 255);
        if ("miss" == damage) {
          value = "MISS";
          color = new cc.color(94, 255, 236, 255);
        } else if ("ultimateAbilityMiss" == damage) {
          value = "MISS";
          color = new cc.color(94, 255, 236, 255);
          SCALE *= 1.5;
          SCALE_MAX *= 1.5;
        } else if (damage.damageType == EnumType.BULLET_DAMAGE_TYPE.ENERGY) {
          symbol = "-";
          value = damage.value;
          color = new cc.color(134, 228, 255, 255);
        } else if (damage.damageType == EnumType.BULLET_DAMAGE_TYPE.ENERGY_BACK) {
          symbol = "+";
          value = damage.value;
          color = new cc.color(134, 228, 255, 255);
        } else if (damage.damageType == EnumType.BULLET_DAMAGE_TYPE.STRENGTH) ; else if (damage.damageType == EnumType.BULLET_DAMAGE_TYPE.BLEED) {
          value = damage.value;
          color = new cc.color(187, 151, 255, 255);
        } else if ("hp_regeneration" == damage.damageType || "healing" == damage.damageType) {
          value = damage.value;
          symbol = "+";
          color = new cc.color(55, 255, 52, 255);
        } else if (damage.damageType == EnumType.BULLET_DAMAGE_TYPE.ATTACK_SPEED) ; else if ("HurtFromReflect" == damage.damageType) {
          value = damage.value;
          color = new cc.color(255, 235, 59, 255);
        } else {
          if ("Ultimate" == damage.damageType) {
            if (0 != damage.isCrit) {
              SCALE *= 1.5;
              SCALE_MAX *= 1.5;
            }
            0 != damage.isCrit && (color = new cc.color(255, 85, 59, 255));
          }
          value = damage.value;
        }
        if ("" === value) {
          Global.poolManager.put(gameConfig.POOLMANAGER_TYPE.valueLabel.key, node);
          return;
        }
        var finalMsg = symbol + value;
        if ("Ultimate" == damage.damageType) {
          rootNode.removeAllChildren();
          var _loop = function _loop(i) {
            var str = finalMsg[i];
            var tempNode = cc.instantiate(_this.tempNode);
            if (tempNode) {
              tempNode.color = color;
              tempNode.getComponent(cc.Label).string = str;
              tempNode.getComponent(cc.Label).font = _this._ultimateFont;
              tempNode.setPosition(33 * i, 30);
              rootNode.addChild(tempNode);
              cc.tween(tempNode).delay(.1 * i).call(function() {
                tempNode.setScale(3, 3);
                tempNode.active = true;
              }).delay(.1).to(.05, {
                scale: 1
              }).delay(.1).to(.05, {
                position: new cc.Vec2(33 * i, 0)
              }).start();
            }
          };
          for (var i = 0; i < finalMsg.length; i++) _loop(i);
        } else this.valueLab.string = finalMsg;
        node.opacity = 255;
        node.color = color;
        cc.tween(node).to(.06, {
          scale: SCALE
        }).to(.06, {
          scale: SCALE_MAX
        }).to(.06, {
          scale: SCALE
        }).delay(.5).to(.06, {
          opacity: 0
        }).call(function() {
          rootNode.removeAllChildren();
          Global.poolManager.put(gameConfig.POOLMANAGER_TYPE.valueLabel.key, node);
        }).start();
      }
    });
    cc._RF.pop();
  }, {
    EnumType: "EnumType",
    GameConfig: "GameConfig"
  } ],
  VipManager: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "cfe1bnZa6lMmpB6EkekJuVe", "VipManager");
    "use strict";
    var gameConfig = require("GameConfig");
    var VipManager = cc.Class({
      extends: cc.Component,
      properties: {},
      start: function start() {},
      ctor: function ctor() {
        this.FREE_DAILY_DIAMOND_COUNT = 20;
        this.AD_FREE_DIAMOND_COUNT = 900;
        this.AD_FREE_DAILY_DIAMOND_COUNT = 50;
        this.AD_FREE_COST = "$6.99";
        this.MONTHLY_DIAMOND_COUNT = 600;
        this.MONTHLY_DAILY_DIAMOND_COUNT = 200;
        this.MONTHLY_DAILY_STAMINA_COUNT = 50;
        this.MONTHLY_COST = "$4.99";
        this.PERMANENT_DIAMOND_COUNT = 3600;
        this.PERMANENT_DAILY_DIAMOND_COUNT = 200;
        this.PERMANENT_DAILY_STAMINA_COUNT = 50;
        this.PERMANENT_COST = "$29.99";
        this.PERMANENT_COIN_RATE = .1;
      },
      init: function init() {
        this.vipData = Global.storage.getJson(gameConfig.COMMON_KEYS.VIP_DATA);
        if (null == this.vipData) {
          this.vipData = {};
          this.vipData.getFreeDailyReward = false;
          this.vipData.hasAdFree = false;
          this.vipData.getAdFreeDailyReward = false;
          this.vipData.hasMonthly = false;
          this.vipData.getMonthlyDailyReward = false;
          this.vipData.hasPermanent = false;
          this.vipData.getPermanentDailyReward = false;
        }
        this.saveData();
      },
      getFreeDailyReward: function getFreeDailyReward() {
        Global.roleData.updateDiamond(this.FREE_DAILY_DIAMOND_COUNT);
        this.vipData.getFreeDailyReward = true;
        this.saveData();
      },
      getAdFree: function getAdFree() {
        Global.roleData.updateDiamond(this.AD_FREE_DIAMOND_COUNT);
        this.vipData.hasAdFree = true;
        this.saveData();
      },
      getAdFreeDailyReward: function getAdFreeDailyReward() {
        Global.roleData.updateDiamond(this.AD_FREE_DAILY_DIAMOND_COUNT);
        this.vipData.getAdFreeDailyReward = true;
        this.saveData();
      },
      getMonthly: function getMonthly() {
        Global.roleData.updateDiamond(this.MONTHLY_DIAMOND_COUNT);
        this.vipData.hasMonthly = true;
        this.saveData();
      },
      getMonthlyDailyReward: function getMonthlyDailyReward() {
        Global.roleData.updateDiamond(this.MONTHLY_DAILY_DIAMOND_COUNT);
        this.vipData.getMonthlyDailyReward = true;
        this.saveData();
      },
      getPermanent: function getPermanent() {
        Global.roleData.updateDiamond(this.PERMANENT_DIAMOND_COUNT);
        this.vipData.hasPermanent = true;
        this.saveData();
      },
      getPermanentDailyReward: function getPermanentDailyReward() {
        Global.roleData.updateDiamond(this.PERMANENT_DAILY_DIAMOND_COUNT);
        this.vipData.getPermanentDailyReward = true;
        this.saveData();
      },
      resetDailyRewards: function resetDailyRewards() {
        this.vipData.getFreeDailyReward = false;
        this.vipData.getAdFreeDailyReward = false;
        this.vipData.getMonthlyDailyReward = false;
        this.vipData.getPermanentDailyReward = false;
        this.saveData();
      },
      saveData: function saveData() {
        Global.storage.set(gameConfig.COMMON_KEYS.VIP_DATA, this.vipData);
      }
    });
    module.exports = VipManager;
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  VipUI: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "8a80a8hW2ZEDYHXeZDlPbiz", "VipUI");
    "use strict";
    var gameConfig = require("GameConfig");
    var ItemData = require("ItemData");
    var EnumType = require("EnumType");
    var BattleConfig = require("BattleConfig");
    cc.Class({
      extends: cc.Component,
      properties: {
        scrollView: cc.ScrollView,
        freeDailyRewardItem: cc.Node,
        freeTimeNode: cc.Node,
        freeTimeLabel: cc.Node,
        freeRedDot: cc.Node,
        freeClaimBtn: cc.Button,
        adFreeRewardItem: cc.Node,
        adFreeDailyRewardItem: cc.Node,
        adFreeRedDot: cc.Node,
        adFreeClaimBtn: cc.Button,
        adFreeClaimBtnLabel: cc.Node,
        monthlyRewardItem: cc.Node,
        freeMonthlyRewardItem: cc.Node,
        freeMonthlyRewardItem_2: cc.Node,
        monthlyFreeRedDot: cc.Node,
        monthlyFreeClaimBtn: cc.Button,
        monthlyFreeClaimBtnLabel: cc.Node,
        permanentRewardItem: cc.Node,
        freePermanentRewardItem: cc.Node,
        freePermanentRewardItem_2: cc.Node,
        permanentFreeRedDot: cc.Node,
        permanentFreeClaimBtn: cc.Button,
        permanentFreeClaimBtnLabel: cc.Node,
        claimAllBtn: cc.Button,
        claimAllRedDot: cc.Node
      },
      onLoad: function onLoad() {
        this.timer = Date.now();
      },
      start: function start() {},
      onAdded: function onAdded(_args) {
        this.updateUI();
      },
      updateUI: function updateUI() {
        var diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
        var diamondItemData = new ItemData();
        diamondItemData.setData(null, diamondItemCoinfig);
        diamondItemData.count = Global.vipManager.FREE_DAILY_DIAMOND_COUNT;
        this.freeDailyRewardItem.getComponent("BagItem").setData(diamondItemData, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.freeDailyRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.getFreeDailyReward);
        this.freeTimeNode.active = true == Global.vipManager.vipData.getFreeDailyReward;
        true == Global.vipManager.vipData.getFreeDailyReward && this.freeTimeLabel.getComponent("LabelUpdater").setString(this.getTimeUntilMidnight());
        this.freeRedDot.active = true != Global.vipManager.vipData.getFreeDailyReward;
        this.freeClaimBtn.interactable = true != Global.vipManager.vipData.getFreeDailyReward;
        var diamondItemDataAdFree = new ItemData();
        diamondItemDataAdFree.setData(null, diamondItemCoinfig);
        diamondItemDataAdFree.count = Global.vipManager.AD_FREE_DIAMOND_COUNT;
        var diamondItemDataAdFree_2 = new ItemData();
        diamondItemDataAdFree_2.setData(null, diamondItemCoinfig);
        diamondItemDataAdFree_2.count = Global.vipManager.AD_FREE_DAILY_DIAMOND_COUNT;
        this.adFreeRewardItem.getComponent("BagItem").setData(diamondItemDataAdFree, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.adFreeRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.hasAdFree);
        this.adFreeDailyRewardItem.getComponent("BagItem").setData(diamondItemDataAdFree_2, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.adFreeDailyRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.getAdFreeDailyReward);
        if (true != Global.vipManager.vipData.hasAdFree) {
          this.adFreeClaimBtn.interactable = true;
          this.adFreeRedDot.active = false;
          this.adFreeClaimBtnLabel.getComponent("LabelUpdater").setString(Global.vipManager.AD_FREE_COST);
        } else {
          this.adFreeClaimBtn.interactable = true != Global.vipManager.vipData.getAdFreeDailyReward;
          this.adFreeRedDot.active = true != Global.vipManager.vipData.getAdFreeDailyReward;
          this.adFreeClaimBtnLabel.getComponent("LabelUpdater").setContent("btn_claim");
        }
        var staminaItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.STAMINA_ITEM_ID);
        var diamondItemDataMonthly = new ItemData();
        diamondItemDataMonthly.setData(null, diamondItemCoinfig);
        diamondItemDataMonthly.count = Global.vipManager.MONTHLY_DIAMOND_COUNT;
        var diamondItemDataMonthly_2 = new ItemData();
        diamondItemDataMonthly_2.setData(null, diamondItemCoinfig);
        diamondItemDataMonthly_2.count = Global.vipManager.MONTHLY_DAILY_DIAMOND_COUNT;
        var staminaItemDataMonthly = new ItemData();
        staminaItemDataMonthly.setData(null, staminaItemCoinfig);
        staminaItemDataMonthly.count = Global.vipManager.MONTHLY_DAILY_STAMINA_COUNT;
        this.monthlyRewardItem.getComponent("BagItem").setData(diamondItemDataMonthly, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.monthlyRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.hasMonthly);
        this.freeMonthlyRewardItem.getComponent("BagItem").setData(diamondItemDataMonthly_2, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.freeMonthlyRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.getMonthlyDailyReward);
        this.freeMonthlyRewardItem_2.getComponent("BagItem").setData(staminaItemDataMonthly, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.freeMonthlyRewardItem_2.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.getMonthlyDailyReward);
        if (true != Global.vipManager.vipData.hasMonthly) {
          this.monthlyFreeClaimBtn.interactable = true;
          this.monthlyFreeRedDot.active = false;
          this.monthlyFreeClaimBtnLabel.getComponent("LabelUpdater").setString(Global.vipManager.MONTHLY_COST);
        } else {
          this.monthlyFreeClaimBtn.interactable = true != Global.vipManager.vipData.getMonthlyDailyReward;
          this.monthlyFreeRedDot.active = true != Global.vipManager.vipData.getMonthlyDailyReward;
          this.monthlyFreeClaimBtnLabel.getComponent("LabelUpdater").setContent("btn_claim");
        }
        var diamondItemDataPermanent = new ItemData();
        diamondItemDataPermanent.setData(null, diamondItemCoinfig);
        diamondItemDataPermanent.count = Global.vipManager.PERMANENT_DIAMOND_COUNT;
        var diamondItemDataPermanent_2 = new ItemData();
        diamondItemDataPermanent_2.setData(null, diamondItemCoinfig);
        diamondItemDataPermanent_2.count = Global.vipManager.PERMANENT_DAILY_DIAMOND_COUNT;
        var staminaItemDataPermanent = new ItemData();
        staminaItemDataPermanent.setData(null, staminaItemCoinfig);
        staminaItemDataPermanent.count = Global.vipManager.PERMANENT_DAILY_STAMINA_COUNT;
        this.permanentRewardItem.getComponent("BagItem").setData(diamondItemDataPermanent, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.permanentRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.hasPermanent);
        this.freePermanentRewardItem.getComponent("BagItem").setData(diamondItemDataPermanent_2, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.freePermanentRewardItem.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.getPermanentDailyReward);
        this.freePermanentRewardItem_2.getComponent("BagItem").setData(staminaItemDataPermanent, null, EnumType.ITEM_OWNER_TYPE.NONE, EnumType.ITEM_SHOW_TYPE.COUNT_FONT_SCALE_2);
        this.freePermanentRewardItem_2.getComponent("BagItem").showSelect(true == Global.vipManager.vipData.getPermanentDailyReward);
        if (true != Global.vipManager.vipData.hasPermanent) {
          this.permanentFreeClaimBtn.interactable = true;
          this.permanentFreeRedDot.active = false;
          this.permanentFreeClaimBtnLabel.getComponent("LabelUpdater").setString(Global.vipManager.PERMANENT_COST);
        } else {
          this.permanentFreeClaimBtn.interactable = true != Global.vipManager.vipData.getPermanentDailyReward;
          this.permanentFreeRedDot.active = true != Global.vipManager.vipData.getPermanentDailyReward;
          this.permanentFreeClaimBtnLabel.getComponent("LabelUpdater").setContent("btn_claim");
        }
        var hasReward = true != Global.vipManager.vipData.getFreeDailyReward || true == Global.vipManager.vipData.hasAdFree && true != Global.vipManager.vipData.getAdFreeDailyReward || true == Global.vipManager.vipData.hasMonthly && true != Global.vipManager.vipData.getMonthlyDailyReward || true == Global.vipManager.vipData.hasPermanent && true != Global.vipManager.vipData.getPermanentDailyReward;
        this.claimAllBtn.interactable = hasReward;
        this.claimAllRedDot.active = hasReward;
      },
      getTimeUntilMidnight: function getTimeUntilMidnight() {
        var now = Global.networkTimer;
        var midnight = new Date(now);
        midnight.setHours(24, 0, 0, 0);
        var diffMs = midnight - now;
        var seconds = Math.floor(diffMs / 1e3);
        var hours = String(Math.floor(seconds / 3600)).padStart(2, "0");
        var mins = String(Math.floor(seconds % 3600 / 60)).padStart(2, "0");
        var secs = String(seconds % 60).padStart(2, "0");
        return hours + ":" + mins + ":" + secs;
      },
      onClickGetFreeDailyReward: function onClickGetFreeDailyReward() {
        Global.vipManager.getFreeDailyReward();
        this.updateUI();
        var diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
        var diamondItemData = new ItemData();
        diamondItemData.setData(null, diamondItemCoinfig);
        diamondItemData.count = Global.vipManager.FREE_DAILY_DIAMOND_COUNT;
        var args = {};
        args.items = [ diamondItemData ];
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
      },
      onClickAdFree: function onClickAdFree() {
        if (true != Global.vipManager.vipData.hasAdFree) {
          Global.vipManager.getAdFree();
          this.updateUI();
          var diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          var diamondItemDataAdFree = new ItemData();
          diamondItemDataAdFree.setData(null, diamondItemCoinfig);
          diamondItemDataAdFree.count = Global.vipManager.AD_FREE_DIAMOND_COUNT;
          var args = {};
          args.items = [ diamondItemDataAdFree ];
          args.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        } else {
          Global.vipManager.getAdFreeDailyReward();
          this.updateUI();
          var _diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          var diamondItemDataAdFree_2 = new ItemData();
          diamondItemDataAdFree_2.setData(null, _diamondItemCoinfig);
          diamondItemDataAdFree_2.count = Global.vipManager.AD_FREE_DAILY_DIAMOND_COUNT;
          var _args2 = {};
          _args2.items = [ diamondItemDataAdFree_2 ];
          _args2.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, _args2);
        }
      },
      onClickMonthly: function onClickMonthly() {
        if (true != Global.vipManager.vipData.hasMonthly) {
          Global.vipManager.getMonthly();
          this.updateUI();
          var diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          var diamondItemDataMonthly = new ItemData();
          diamondItemDataMonthly.setData(null, diamondItemCoinfig);
          diamondItemDataMonthly.count = Global.vipManager.MONTHLY_DIAMOND_COUNT;
          var args = {};
          args.items = [ diamondItemDataMonthly ];
          args.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        } else {
          Global.vipManager.getMonthlyDailyReward();
          this.updateUI();
          var _diamondItemCoinfig2 = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          var staminaItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.STAMINA_ITEM_ID);
          var diamondItemDataMonthly_2 = new ItemData();
          diamondItemDataMonthly_2.setData(null, _diamondItemCoinfig2);
          diamondItemDataMonthly_2.count = Global.vipManager.MONTHLY_DAILY_DIAMOND_COUNT;
          var staminaItemDataMonthly = new ItemData();
          staminaItemDataMonthly.setData(null, staminaItemCoinfig);
          staminaItemDataMonthly.count = Global.vipManager.MONTHLY_DAILY_STAMINA_COUNT;
          var _args3 = {};
          _args3.items = [ diamondItemDataMonthly_2, staminaItemDataMonthly ];
          _args3.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, _args3);
        }
      },
      onClickPermanent: function onClickPermanent() {
        if (true != Global.vipManager.vipData.hasPermanent) {
          Global.vipManager.getPermanent();
          this.updateUI();
          var diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          var diamondItemDataPermanent = new ItemData();
          diamondItemDataPermanent.setData(null, diamondItemCoinfig);
          diamondItemDataPermanent.count = Global.vipManager.PERMANENT_DIAMOND_COUNT;
          var args = {};
          args.items = [ diamondItemDataPermanent ];
          args.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        } else {
          Global.vipManager.getPermanentDailyReward();
          this.updateUI();
          var _diamondItemCoinfig3 = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
          var staminaItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.STAMINA_ITEM_ID);
          var diamondItemDataPermanent_2 = new ItemData();
          diamondItemDataPermanent_2.setData(null, _diamondItemCoinfig3);
          diamondItemDataPermanent_2.count = Global.vipManager.PERMANENT_DAILY_DIAMOND_COUNT;
          var staminaItemDataPermanent = new ItemData();
          staminaItemDataPermanent.setData(null, staminaItemCoinfig);
          staminaItemDataPermanent.count = Global.vipManager.PERMANENT_DAILY_STAMINA_COUNT;
          var _args4 = {};
          _args4.items = [ diamondItemDataPermanent_2, staminaItemDataPermanent ];
          _args4.rewardType = EnumType.REWARD_TYPE.ITEM;
          Global.gui.open(gameConfig.UIID.RewardsPanel, _args4);
        }
      },
      onClickClaimAll: function onClickClaimAll() {
        var hasReward = true != Global.vipManager.vipData.getFreeDailyReward || true == Global.vipManager.vipData.hasAdFree && true != Global.vipManager.vipData.getAdFreeDailyReward || true == Global.vipManager.vipData.hasMonthly && true != Global.vipManager.vipData.getMonthlyDailyReward || true == Global.vipManager.vipData.hasPermanent && true != Global.vipManager.vipData.getPermanentDailyReward;
        var diamondItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.DIAMOND_ITEM_ID);
        var staminaItemCoinfig = Global.bagManager.getItemConfig(Global.bagManager.STAMINA_ITEM_ID);
        var result = [];
        if (true != Global.vipManager.vipData.getFreeDailyReward) {
          Global.vipManager.getFreeDailyReward();
          var diamondItemData = new ItemData();
          diamondItemData.setData(null, diamondItemCoinfig);
          diamondItemData.count = Global.vipManager.FREE_DAILY_DIAMOND_COUNT;
          result.push(diamondItemData);
        }
        if (true == Global.vipManager.vipData.hasAdFree && true != Global.vipManager.vipData.getAdFreeDailyReward) {
          Global.vipManager.getAdFreeDailyReward();
          var diamondItemDataAdFree_2 = new ItemData();
          diamondItemDataAdFree_2.setData(null, diamondItemCoinfig);
          diamondItemDataAdFree_2.count = Global.vipManager.AD_FREE_DAILY_DIAMOND_COUNT;
          result.push(diamondItemDataAdFree_2);
        }
        if (true == Global.vipManager.vipData.hasMonthly && true != Global.vipManager.vipData.getMonthlyDailyReward) {
          Global.vipManager.getMonthlyDailyReward();
          var diamondItemDataMonthly_2 = new ItemData();
          diamondItemDataMonthly_2.setData(null, diamondItemCoinfig);
          diamondItemDataMonthly_2.count = Global.vipManager.MONTHLY_DAILY_DIAMOND_COUNT;
          result.push(diamondItemDataMonthly_2);
          var staminaItemDataMonthly = new ItemData();
          staminaItemDataMonthly.setData(null, staminaItemCoinfig);
          staminaItemDataMonthly.count = Global.vipManager.MONTHLY_DAILY_STAMINA_COUNT;
          result.push(staminaItemDataMonthly);
        }
        if (true == Global.vipManager.vipData.hasPermanent && true != Global.vipManager.vipData.getPermanentDailyReward) {
          Global.vipManager.getPermanentDailyReward();
          var diamondItemDataPermanent_2 = new ItemData();
          diamondItemDataPermanent_2.setData(null, diamondItemCoinfig);
          diamondItemDataPermanent_2.count = Global.vipManager.PERMANENT_DAILY_DIAMOND_COUNT;
          result.push(diamondItemDataPermanent_2);
          var staminaItemDataPermanent = new ItemData();
          staminaItemDataPermanent.setData(null, staminaItemCoinfig);
          staminaItemDataPermanent.count = Global.vipManager.PERMANENT_DAILY_STAMINA_COUNT;
          result.push(staminaItemDataPermanent);
        }
        var args = {};
        args.items = result;
        args.rewardType = EnumType.REWARD_TYPE.ITEM;
        Global.gui.open(gameConfig.UIID.RewardsPanel, args);
        this.updateUI();
      },
      onEnable: function onEnable() {
        this.scrollView.scrollToTop();
      },
      onClickClose: function onClickClose() {
        Global.gui.remove(gameConfig.UIID.VIP);
      },
      update: function update(dt) {
        if (Date.now() - this.timer >= BattleConfig.HEART_BEAT_ONE_SECOND) {
          this.timer = Date.now();
          true == Global.vipManager.vipData.getFreeDailyReward && this.freeTimeLabel.getComponent("LabelUpdater").setString(this.getTimeUntilMidnight());
        }
      }
    });
    cc._RF.pop();
  }, {
    BattleConfig: "BattleConfig",
    EnumType: "EnumType",
    GameConfig: "GameConfig",
    ItemData: "ItemData"
  } ],
  Wait: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "61a53WtVkJGmL081AbD9bOS", "Wait");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var Wait = function(_super) {
      __extends(Wait, _super);
      function Wait() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.loading = null;
        _this.loading_rotate = 0;
        return _this;
      }
      Wait.prototype.update = function(dt) {
        this.loading_rotate += 220 * dt;
        this.loading.angle = -this.loading_rotate;
        this.loading_rotate > 360 && (this.loading_rotate += 360);
      };
      __decorate([ property(cc.Node) ], Wait.prototype, "loading", void 0);
      Wait = __decorate([ ccclass ], Wait);
      return Wait;
    }(cc.Component);
    exports.default = Wait;
    cc._RF.pop();
  }, {} ],
  WhiteBgBar: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "1e314rLRkNKv7ZfKZ9ho2k2", "WhiteBgBar");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        whiteBg: cc.Sprite
      },
      start: function start() {},
      setSpriteHeight: function setSpriteHeight(_height) {
        this.whiteBg.node.height = _height;
      },
      setContent: function setContent(_pool, _fillStart, _fillRange) {
        this.whiteBg.fillStart = _fillStart;
        this.whiteBg.fillRange = _fillRange;
        this.whiteBg.node.opacity = 255;
        this.pool = _pool;
      },
      update: function update(dt) {
        if (null == this.node.parent) return;
        this.whiteBg.node.opacity -= 10;
        if (this.whiteBg.node.opacity <= 0) {
          this.whiteBg.node.opacity = 0;
          this.node.parent = null;
          this.pool.push(this.node);
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  gameControl: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "4e59dH7gdhJK6HhFfC9Mqot", "gameControl");
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var gameX;
    (function(gameX) {
      var pause_data = new (function() {
        function class_1() {
          this.state_b = false;
          this.anim_as = [];
        }
        return class_1;
      }())();
      var pause_config = function() {
        function pause_config() {}
        return pause_config;
      }();
      gameX.pause_config = pause_config;
      function recu_node_list(node_, result_as) {
        void 0 === result_as && (result_as = []);
        if (!node_) return result_as;
        result_as.push(node_);
        node_.children.forEach(function(v1) {
          result_as.push(v1);
          recu_node_list(v1);
        });
        return result_as;
      }
      function pause(config_) {
        var _a;
        if (pause_data.state_b) return;
        cc.director.getScheduler().pauseAllTargets();
        pause_data.spine_as = cc.director.getScene().getComponentsInChildren(sp.Skeleton);
        pause_data.spine_as.forEach(function(v1) {
          v1.timeScale = 0;
        });
        pause_data.dragon_bones_as = cc.director.getScene().getComponentsInChildren(dragonBones.ArmatureDisplay);
        pause_data.dragon_bones_as.forEach(function(v1) {
          v1.timeScale = 0;
        });
        pause_data.tween_target_as = cc.director.getActionManager().pauseAllRunningActions();
        if (cc.director.getPhysicsManager() && cc.director.getPhysicsManager().enabled) {
          pause_data.physics_2d_b = cc.director.getPhysicsManager().enabled;
          cc.director.getPhysicsManager().enabled = false;
        }
        if (cc.director.getPhysics3DManager() && cc.director.getPhysics3DManager().enabled) {
          pause_data.physics_3d_b = cc.director.getPhysics3DManager().enabled;
          cc.director.getPhysics3DManager().enabled = false;
        }
        if (config_) {
          var exclude_as_1 = [];
          exclude_as_1.push.apply(exclude_as_1, config_.exclude_as);
          null === (_a = config_.recu_exclude_as) || void 0 === _a ? void 0 : _a.forEach(function(v1) {
            exclude_as_1.push.apply(exclude_as_1, recu_node_list(v1));
          });
          exclude_as_1.forEach(function(v1) {
            resume_node(v1);
          });
        }
        pause_data.state_b = true;
      }
      gameX.pause = pause;
      function resume() {
        pause_data.anim_as.forEach(function(v1) {
          v1.isPlaying && v1.isPaused && v1.play();
        });
        pause_data.dragon_bones_as.forEach(function(v1) {
          v1.timeScale = 1;
        });
        pause_data.spine_as.forEach(function(v1) {
          v1.timeScale = 1;
        });
        cc.director.getActionManager().resumeTargets(pause_data.tween_target_as);
        pause_data.physics_2d_b && (cc.director.getPhysicsManager().enabled = pause_data.physics_2d_b);
        if (pause_data.physics_3d_b) var ddd = cc.director.getPhysics3DManager().enabled = pause_data.physics_3d_b;
        pause_data.state_b = false;
      }
      gameX.resume = resume;
      function pause_node(args1_) {
        var node_as;
        node_as = Array.isArray(args1_) ? args1_ : [ args1_ ];
        node_as.forEach(function(v1) {
          var _a;
          cc.director.getScheduler().pauseTarget(v1);
          null === (_a = v1.getComponent(cc.Animation)) || void 0 === _a ? void 0 : _a.pause();
          v1.getComponent(dragonBones.ArmatureDisplay) && (v1.getComponent(dragonBones.ArmatureDisplay).timeScale = 0);
          cc.director.getActionManager().pauseTarget(v1);
        });
      }
      gameX.pause_node = pause_node;
      function resume_node(args1_) {
        var node_as;
        node_as = Array.isArray(args1_) ? args1_ : [ args1_ ];
        node_as.forEach(function(v1) {
          var _a;
          cc.director.getScheduler().resumeTarget(v1);
          null === (_a = v1.getComponent(cc.Animation)) || void 0 === _a ? void 0 : _a.resume();
          v1.getComponent(dragonBones.ArmatureDisplay) && (v1.getComponent(dragonBones.ArmatureDisplay).timeScale = 1);
          cc.director.getActionManager().resumeTarget(v1);
        });
      }
      gameX.resume_node = resume_node;
    })(gameX || (gameX = {}));
    exports.default = gameX;
    cc._RF.pop();
  }, {} ],
  reward0_diamond: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "37878jRHjxE+oGSxcKuUOix", "reward0_diamond");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        amountLab: {
          type: cc.Label,
          default: null,
          tooltip: "\u5956\u54c1\u6570\u91cf"
        }
      },
      initUI: function initUI(data) {
        this.amountLab.string = "x" + data.amount || 1;
      }
    });
    cc._RF.pop();
  }, {} ],
  signinItemDesc: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "6b80dRvOAhCD7QSOmxuh8nl", "signinItemDesc");
    "use strict";
    cc.Class({
      extends: cc.Component,
      properties: {
        dayLab: {
          type: cc.Label,
          default: null,
          tooltip: "\u7b2cX\u5929"
        },
        dateLab: {
          type: cc.Label,
          default: null,
          tooltip: "\u4fe1\u606f\u63cf\u8ff0"
        },
        _config: null
      },
      onLoad: function onLoad() {
        if (this._config.hasOwnProperty("panelPosition")) {
          var pos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this._config.panelPosition);
          this.node.setPosition(pos);
        }
      },
      onAdded: function onAdded(params) {
        this._config = params;
        console.log("_config:", this._config);
      },
      formatDate: function formatDate(date, format) {
        void 0 === format && (format = "YYYY/MM/DD");
        var year = date.getFullYear();
        var month = String(date.getMonth() + 1).padStart(2, "0");
        var day = String(date.getDate()).padStart(2, "0");
        switch (format) {
         case "YYYY/MM/DD":
          return year + "/" + month + "/" + day;

         case "MM/DD/YYYY":
          return month + "/" + day + "/" + year;

         default:
          return year + "/" + month + "/" + day;
        }
      }
    });
    cc._RF.pop();
  }, {} ],
  signinItem: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "52b5fUrDCZC+Y8Q+hwQXDPr", "signinItem");
    "use strict";
    var gameConfig = require("GameConfig");
    var EquipmentData = require("EquipmentData");
    cc.Class({
      extends: cc.Component,
      properties: {
        bgSprite: {
          type: cc.Sprite,
          default: null,
          tooltip: "\u80cc\u666f"
        },
        bgSFList: {
          type: [ cc.SpriteFrame ],
          default: [],
          tooltip: "\u80cc\u666f\u56fe\u8d44\u6e90\uff0c1\u4ee3\u8868\u5f53\u5929"
        },
        dayNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u7b2cX\u5929"
        },
        itemLayout: {
          type: cc.Node,
          default: null,
          tooltip: "\u5956\u54c1\u5217\u8868"
        },
        rewardItemPrebList: {
          type: [ cc.Prefab ],
          default: [],
          tooltip: "\u6839\u636e\u4e0d\u540c\u7684\u5956\u52b1\u5b9e\u4f8b\u5316\u4e0d\u540c\u7684\u9884\u5236\u4f53"
        },
        maskNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u906e\u7f69"
        },
        claimedFlag: {
          type: cc.Node,
          default: null,
          tooltip: "\u5bf9\u94a9"
        },
        _curState: null
      },
      initUI: function initUI(data) {
        if (!data) return;
        this._data = data;
        var curSigninTime = Global.signinManager.getSigninWeekByDay(data.index);
        var isChecked = 0 != curSigninTime;
        var isToday = data.index == data.todayIndex;
        var isExpired = data.index < data.todayIndex;
        this._curState = isChecked ? gameConfig.SIGNIN_STATE.CHECKED : isToday ? gameConfig.SIGNIN_STATE.IDLE : isExpired ? gameConfig.SIGNIN_STATE.EXPIRED : gameConfig.SIGNIN_STATE.COMEBACK;
        this.bgSprite.spriteFrame = this.bgSFList[isToday ? 0 : 1];
        this._curState == gameConfig.SIGNIN_STATE.IDLE ? this.dayNode.getComponent("RichTextUpdater").setContent("result_claim") : this.dayNode.getComponent("RichTextUpdater").setContent("signin_day" + data.index);
        this.itemLayout.removeAllChildren();
        var rewardTypes = this._data.baseData.rewardType.split("|");
        var rewardIds = this._data.baseData.rewardId.split("|");
        var rewardAmounts = this._data.baseData.amount.split("|");
        for (var index = 0; index < rewardTypes.length; index++) {
          var rewardType = rewardTypes[index];
          var rewardId = rewardIds[index] || 0;
          var amount = rewardAmounts[index] || 1;
          var itemNode = null;
          var itemData = null;
          if (rewardType == gameConfig.SIGNIN_REWARD_TYPE.DIAMONDS) {
            itemNode = cc.instantiate(this.rewardItemPrebList[gameConfig.SIGNIN_REWARD_TYPE.DIAMONDS]);
            this.itemLayout.addChild(itemNode);
            itemNode.getComponent("reward0_diamond").initUI({
              amount: amount
            });
          } else if (rewardType == gameConfig.SIGNIN_REWARD_TYPE.PURPLE_PIECES) {
            itemNode = cc.instantiate(this.rewardItemPrebList[gameConfig.SIGNIN_REWARD_TYPE.PURPLE_PIECES]);
            this.itemLayout.addChild(itemNode);
            itemData = Global.utils.deepClone(Global.bagManager.getItemConfig(rewardId));
            itemData.count = amount;
            itemData.itemId = itemData.id;
            var bagItem = itemNode.getComponent("BagItem");
            if (bagItem) {
              bagItem.setMask(false);
              bagItem.setData(itemData);
            }
          } else if (rewardType == gameConfig.SIGNIN_REWARD_TYPE.PURPLE_EQUIP) {
            itemNode = cc.instantiate(this.rewardItemPrebList[gameConfig.SIGNIN_REWARD_TYPE.PURPLE_EQUIP]);
            this.itemLayout.addChild(itemNode);
            var baseConfig = Global.utils.deepClone(Global.equipmentManager.getEquipmentConfig(rewardId));
            itemData = new EquipmentData();
            itemData.setData(null, baseConfig);
            itemData.count = amount;
            var equipmentItem = itemNode.getComponent("EquipmentItem");
            if (equipmentItem) {
              equipmentItem.showLock(false);
              equipmentItem.showSelect(false);
              equipmentItem.setData(itemData);
              equipmentItem.showEquiped(false);
            }
          }
        }
        this.claimedFlag.active = this._curState == gameConfig.SIGNIN_STATE.CHECKED;
        this.maskNode.active = isChecked || isExpired;
        this.node.getComponent(cc.Button).interactable = isToday && !isChecked;
      },
      onClickSigninBtn: function onClickSigninBtn() {
        Global.audio.playEffect("audio/click");
        var today = new Date();
        var month = today.getMonth();
        var day = today.getDate();
        var yearResult = Global.signinManager.setSignin(month, day);
        var weekResult = Global.signinManager.setSigninWeekByDay(this._data.index, Date.now());
        yearResult && weekResult && this.initUI(this._data);
        console.log(month + "\u6708" + day + "\u53f7\u7b7e\u5230 ");
        Global.gui.toast("\u7b7e\u5230\u6210\u529f\uff0c\u9886\u53d6\u5956\u52b1\u529f\u80fd\u5f00\u53d1\u4e2d...");
      },
      getDataDetails: function getDataDetails() {
        return {
          data: this._data,
          state: this._curState
        };
      }
    });
    cc._RF.pop();
  }, {
    EquipmentData: "EquipmentData",
    GameConfig: "GameConfig"
  } ],
  signinView: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "07cc4T2idJJbJ8nLJisqhx9", "signinView");
    "use strict";
    var gameConfig = require("GameConfig");
    var SIGNIN_ITEM_SIZE = {
      NORMAL: {
        width: 254,
        height: 298
      },
      SPECIAL: {
        width: 836,
        height: 298
      }
    };
    cc.Class({
      extends: cc.Component,
      properties: {
        normalRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "1-6\u5929\u5956\u52b1\u7684\u6839\u8282\u70b9"
        },
        specialRootNode: {
          type: cc.Node,
          default: null,
          tooltip: "\u7b2c7\u5929\u7279\u6b8a\u5956\u52b1\u7684\u6839\u8282\u70b9"
        },
        signinItemPreb: {
          type: cc.Prefab,
          default: null,
          tooltip: "\u7b7e\u5230\u9884\u5236\u4f53"
        }
      },
      onAdded: function onAdded(args) {
        this.initUI();
        return true;
      },
      initUI: function initUI() {
        Global.signinManager.checkSigninWeek();
        var today = new Date();
        var month = today.getMonth();
        var day = today.getDate();
        var todayIndex = Global.signinManager.signinWeekData.length;
        for (var index = Global.signinManager.signinWeekData.length - 1; index >= 0; index--) {
          var signinTime = Global.signinManager.getSigninWeekByDay(index);
          if (0 != signinTime) {
            var tempDate = new Date(signinTime);
            var tempMonty = tempDate.getMonth();
            var tempDay = tempDate.getDate();
            if (month == tempMonty && day == tempDay) {
              todayIndex = index;
              break;
            }
          }
        }
        this.normalRootNode.removeAllChildren();
        this.specialRootNode.removeAllChildren();
        for (var _index = 0; _index < Global.signinManager.signinWeekBaseData.length; _index++) {
          var baseData = Global.signinManager.signinWeekBaseData[_index];
          var signinItem = cc.instantiate(this.signinItemPreb);
          var isSpecial = 0 != _index && _index % 6 == 0;
          var size = isSpecial ? SIGNIN_ITEM_SIZE.SPECIAL : SIGNIN_ITEM_SIZE.NORMAL;
          signinItem.setContentSize(size.width, size.height);
          signinItem.setPosition(0, 0);
          isSpecial ? this.specialRootNode.addChild(signinItem) : this.normalRootNode.addChild(signinItem);
          var js = signinItem.getComponent("signinItem");
          js && js.initUI({
            index: _index,
            baseData: baseData,
            todayIndex: todayIndex
          });
        }
      },
      onCloseUI: function onCloseUI() {
        Global.audio.playEffect("audio/click");
        Global.gui.remove(gameConfig.UIID.SigninPanel);
      }
    });
    cc._RF.pop();
  }, {
    GameConfig: "GameConfig"
  } ],
  skin: [ function(require, module, exports) {
    "use strict";
    cc._RF.push(module, "d8b3bG4PQRGWqBsT5/Up+es", "skin");
    "use strict";
    var __extends = this && this.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b) Object.prototype.hasOwnProperty.call(b, p) && (d[p] = b[p]);
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if ("object" === typeof Reflect && "function" === typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
    var NewClass = function(_super) {
      __extends(NewClass, _super);
      function NewClass() {
        var _this = null !== _super && _super.apply(this, arguments) || this;
        _this.titleLab = null;
        _this.skeleton = null;
        _this._skinList = [];
        return _this;
      }
      NewClass.prototype.onLoad = function() {
        if (!this.skeleton.skeletonData) {
          console.error("\u9aa8\u9abc\u6570\u636e\u672a\u52a0\u8f7d\uff0c\u8bf7\u68c0\u67e5\u8d44\u6e90\u5f15\u7528");
          return;
        }
        var skeletonData = this.skeleton.skeletonData;
        var runtimeData = skeletonData.getRuntimeData();
        this._skinList = runtimeData.skins.map(function(skin) {
          return skin.name;
        });
        console.log("\u521d\u59cb\u5316\u76ae\u80a4\u5217\u8868:", this._skinList);
        this.skeleton.setSkin(this.skeleton.defaultSkin);
      };
      NewClass.prototype.setSkin = function(enent, skinName) {
        var _a, _b;
        if (!this._skinList.includes(skinName)) {
          console.error("\u76ae\u80a4 " + skinName + " \u4e0d\u5b58\u5728\uff0c\u53ef\u7528\u76ae\u80a4:", this._skinList);
          return;
        }
        this.skeleton.setSkin(skinName);
        this.titleLab.string = "\u5f53\u524d\u76ae\u80a4\u5df2\u5207\u6362\u81f3: " + skinName, 
        "\u5b9e\u9645\u751f\u6548\u76ae\u80a4:", null === (_b = null === (_a = this.skeleton._skeleton) || void 0 === _a ? void 0 : _a.skin) || void 0 === _b ? void 0 : _b.name;
      };
      __decorate([ property({
        type: cc.Label
      }) ], NewClass.prototype, "titleLab", void 0);
      __decorate([ property({
        type: sp.Skeleton
      }) ], NewClass.prototype, "skeleton", void 0);
      NewClass = __decorate([ ccclass ], NewClass);
      return NewClass;
    }(cc.Component);
    exports.default = NewClass;
    cc._RF.pop();
  }, {} ]
}, {}, [ "Global", "AnimatorAnimation", "AnimatorCustomization", "AnimatorDragonBones", "AnimatorSpine", "AnimatorSpineSecondary", "AnimatorBase", "AnimatorCondition", "AnimatorController", "AnimatorParams", "AnimatorState", "AnimatorStateLogic", "AnimatorTransition", "BattleView", "BossComingView", "Bullet", "Debuff", "DetailPanelView", "DialogueItem", "GuiView", "Money", "Rarity", "RoleView", "ValueLabel", "BasketAnimatorSpine", "RoleAnimatorSpine", "RoleStateAtk", "RoleStateDeath", "SpineBase", "BaseProgressBar", "HpProgressBar", "LevelProgressBar", "UltimateProgressBar", "BasicAttributes", "BattleConfig", "BulletConfig", "ChapterBaseData", "DialogueBaseData_en", "DialogueBaseData_zh", "EnhancementPointsConfig", "EnumType", "EquipmentConfig", "EventsBaseData", "GameConfig", "ItemConfig", "LevelBaseData", "PassiveHarvestingConfig", "PreloadConfig", "ShopConfig", "SigninBaseData", "SkillConfig", "TalentConfig", "TalentTitleConfig", "TaskConfig", "TaskRewardConfig", "UltimateAbilityConfig", "BulletData", "EquipmentData", "ItemData", "RoleData", "SkillData", "UltimateAbilityData", "LoadingView", "MoneyEffect", "PromotionView", "ResultView", "ReviveView", "RewardsView", "SkillMerge", "StaminaPanel", "BackpackView", "BpEquipItem", "BpStateItem", "BpStatesItem", "BpTitleItem", "BagItem", "ScrollBackground", "ScrollBackgroundView", "AniLabel", "DetailBullet", "DetailControl", "ToggleEffect", "TopUI", "WhiteBgBar", "DebugView", "EquipMerge", "EquipmentDecompose", "EquipmentItem", "EquipmentItemTip", "EquipmentItemTipText", "EquipmentMergeResult", "EquipmentView", "PowerChange", "SlotPos", "ChoiceItem", "ChoiceResult", "EventsView", "MsgItem", "Option", "OptionItem", "PicItem", "CommonPrompt", "Defines", "DelegateComponent", "LayerManager", "LayerNotify", "LayerUI", "Notify", "Wait", "BattlePageView", "HomePageView", "MailInfo", "MailItem", "MailPanel", "MarketItem", "MarketView", "PassiveHarvestingPanel", "RogueItem", "RogueView", "LanguageItem", "LanguagesView", "SettingsView", "OpenBox", "OpenBoxResult", "ShopPanel", "ShopProbItem", "ShopProbs", "ShopSelectEquipment", "reward0_diamond", "signinItem", "signinItemDesc", "signinView", "TalentCard", "TalentPanel", "TalentRewardItem", "TaskItem", "TaskPanel", "VipUI", "BagManager", "BasicAttributesManager", "ChapterManager", "DialogueManager", "EquipmentManager", "EventsManager", "GlobalEvent", "LevelManager", "MailManager", "PassiveHarvestingManager", "PoolManager", "PreloadManager", "ResManager", "RoleManager", "ShopManager", "SigninManager", "SkillManager", "TalentManager", "TaskManager", "VipManager", "AudioEffect", "AudioEffectPool", "AudioManager", "AudioMusic", "LabelUpdater", "LanguageManager", "RichTextUpdater", "StorageManager", "StorageSecurityCrypto", "StorageSecuritySimple", "Timer", "TimerManager", "Config", "MainScene", "SpineDemo", "AsyncQueue", "Utils", "gameControl", "skin" ]);